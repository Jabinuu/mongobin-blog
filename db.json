{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/css/新建文本文档.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1679403019777},{"_id":"source/_data/fluid_config.yml","hash":"5a61fd21d470502ed486efec8ae736d25d7d8d34","modified":1683365746224},{"_id":"source/about/index.md","hash":"20bc0fd96e74628e1e0d0cfe0d29ceb511f1b8bc","modified":1679402857423},{"_id":"source/_posts/Broswer.md","hash":"835cf76e90f8776228aca1a5590cf5bfefb4a923","modified":1683364745731},{"_id":"source/_posts/eventLoop.md","hash":"7d9eaedfeb0b1144bdc31b68c13ec728989eb396","modified":1683460389809},{"_id":"source/_posts/broswerQuestions.md","hash":"0fdb5d0d5a657cb85d189657005774cd16077f1b","modified":1683453776678},{"_id":"source/_posts/pnpm.md","hash":"9ed041faf88a7901d8e844dcf0e3ad38d1dcdca1","modified":1683363988649},{"_id":"source/_posts/createBlog.md","hash":"7c50e06a0dd02b55e62fede55b91273009f0a9a8","modified":1683364765029},{"_id":"source/_posts/shop-app.md","hash":"5437ac25f4d069edf6cbfdfeb11c91ac5a0e4c95","modified":1683364145784},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1679303405765},{"_id":"source/_posts/inherit.md","hash":"583277e2728c1990b9d76d2767f8e017c7f7131f","modified":1683451174878},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670937168000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1670937168000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1670937168000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1670937168000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1670937168000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1670937168000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1670937168000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1670937168000},{"_id":"themes/fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1670937168000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1670937168000},{"_id":"themes/fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1670937168000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1670937168000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1670937168000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1670937168000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1670937168000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1670937168000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1670937168000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1670937168000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1670937168000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1670937168000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1670937168000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1670937168000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1670937168000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1670937168000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1670937168000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1670937168000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1670937168000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1670937168000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1670937168000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1670937168000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1670937168000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1670937168000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1670937168000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1670937168000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1670937168000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1670937168000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1670937168000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1670937168000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1670937168000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1670937168000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1670937168000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1670937168000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1670937168000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1670937168000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1670937168000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1670937168000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1670937168000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1670937168000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1670937168000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1670937168000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1670937168000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"66f1c0d474ec3290642a822e9286df0de805c268","modified":1679402551578},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"324dfde969af987e1c3b0092d477a7872866553d","modified":1679407707790},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1670937168000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1670937168000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1670937168000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1670937168000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1670937168000},{"_id":"public/css/新建文本文档.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1683460408344},{"_id":"public/local-search.xml","hash":"7d33f1e38e6970eb32d6f365a241c50f279a5830","modified":1683460408344},{"_id":"public/about/index.html","hash":"223493a9e2b7c6682462a723963de09e1db5468e","modified":1683460408344},{"_id":"public/categories/JavaScript/index.html","hash":"8072f200a8787b33946a2d726f5556e687b1492d","modified":1683460408344},{"_id":"public/categories/面试题/index.html","hash":"79d12167d48e62ad833ca43280fc0ad49cec31a7","modified":1683460408344},{"_id":"public/categories/Hexo博客/index.html","hash":"a060b089c51bbaea62a20d6176566bfd9c4a9d10","modified":1683460408344},{"_id":"public/categories/浏览器原理/index.html","hash":"d28c5c37f631aa9dcc4cdfd2bd7eac4dcf8886d5","modified":1683460408344},{"_id":"public/categories/前端工程化/index.html","hash":"c33514da0735e14a982c6df6eff24189f7c47909","modified":1683460408344},{"_id":"public/categories/vue2/index.html","hash":"f93d98df996d64719ac0f5ca582026e22e8a7a03","modified":1683460408344},{"_id":"public/tags/浏览器原理/index.html","hash":"283723a3c96f7ad1a86cfe4eb4bbb6bcd856c4c0","modified":1683460408344},{"_id":"public/tags/浏览器架构/index.html","hash":"403dfb509937b730b9ac048b288c15aab145a677","modified":1683460408344},{"_id":"public/tags/事件循环/index.html","hash":"c3e906ddabd9069c87d571b2e7ec55d9bb31c424","modified":1683460408344},{"_id":"public/tags/Hexo/index.html","hash":"e639b940f172cca48cf1fc42e386bd7506408f5b","modified":1683460408344},{"_id":"public/tags/云服务器/index.html","hash":"d702dd954254d5db65676bf46f91e013b3dd29ea","modified":1683460408344},{"_id":"public/tags/Git/index.html","hash":"4e0b97215c7b24573ff7967938a0df612365e906","modified":1683460408344},{"_id":"public/tags/消息队列/index.html","hash":"6741a60bfa7b50438a8dccba36942c89b93c15d6","modified":1683460408344},{"_id":"public/tags/微队列/index.html","hash":"a27137014c9d6585e5e3bb8778802c3212dd4d72","modified":1683460408344},{"_id":"public/tags/交互队列/index.html","hash":"03be424bb5d758729842a0566c7da1239a115918","modified":1683460408344},{"_id":"public/tags/延时队列/index.html","hash":"ed85130070724f8f42ac40b2470d9b2e971de062","modified":1683460408344},{"_id":"public/tags/异步任务/index.html","hash":"38a1c914e0d00fe376dda641d6cbcd135bf89936","modified":1683460408344},{"_id":"public/tags/pnpm/index.html","hash":"6e0df0c9131e893474b6731079a0468de887822c","modified":1683460408344},{"_id":"public/tags/幽灵依赖/index.html","hash":"e3bd2ff137f8c397a7628f0efdd03d5842df703c","modified":1683460408344},{"_id":"public/tags/包管理工具/index.html","hash":"8dfc5ff810a3238241774723d467ced1f26ef86e","modified":1683460408344},{"_id":"public/tags/类型继承/index.html","hash":"54e4ca00333beb312abb8d31caf6411dd3fa6e92","modified":1683460408344},{"_id":"public/tags/原型/index.html","hash":"db963ca40a3e43a5f5a96b4d0ca0d7107cac285a","modified":1683460408344},{"_id":"public/tags/寄生式组合继承/index.html","hash":"d3f45147e66b8e3656b8c395b366110db15a1cfa","modified":1683460408344},{"_id":"public/tags/vue2/index.html","hash":"9bf1bbd4ac3f3a3aac327b6ab7411cf0726ba372","modified":1683460408344},{"_id":"public/tags/电商项目/index.html","hash":"6e92d7884c65b60944317c99fba99b7d07d17d11","modified":1683460408344},{"_id":"public/2023/05/07/inherit/index.html","hash":"6f3b5acd2cabbdefd6f2626d262bc0513d6d1f44","modified":1683460408344},{"_id":"public/2023/05/05/pnpm/index.html","hash":"70c0a5959d012e42766c6c8c2b608b15c275fe63","modified":1683460408344},{"_id":"public/2023/05/05/broswerQuestions/index.html","hash":"16d55015a0e4054a675c854510a3ac2b79d3ced8","modified":1683460408344},{"_id":"public/2023/04/09/shop-app/index.html","hash":"1583745863c7fa12c184e54b1624f65bf7345025","modified":1683460408344},{"_id":"public/2023/03/30/eventLoop/index.html","hash":"85f19f1ccae4010b644f78abb1b81dd40280a90b","modified":1683460408344},{"_id":"public/2023/03/29/Broswer/index.html","hash":"97c4f816a3f5ab97d63bf3f60316191fea86866e","modified":1683460408344},{"_id":"public/2023/03/20/createBlog/index.html","hash":"32d5ec0394256327a05812c3321a4aee65099c1c","modified":1683460408344},{"_id":"public/2023/03/20/hello-world/index.html","hash":"b2f6e8e749607fc093d68f92b16a122a707ea0b8","modified":1683460408344},{"_id":"public/tags/vuex/index.html","hash":"6682390be658630ee8f45dca87a27e862fabee9b","modified":1683460408344},{"_id":"public/tags/vue-router/index.html","hash":"320959d94194af0795673d986db94225f2bc4147","modified":1683460408344},{"_id":"public/tags/mock/index.html","hash":"2f59d4b32249de79ca3670b38418907aaf8bb479","modified":1683460408344},{"_id":"public/tags/代理/index.html","hash":"f2d3751a2b0b66dec3c7631665eb1ee5ded7d5e8","modified":1683460408344},{"_id":"public/archives/index.html","hash":"fabce4b0a225e97519e1f180c1ebc769ecb1249d","modified":1683460408344},{"_id":"public/archives/2023/index.html","hash":"288e4026131a42111140b3c649131bfe55b6a67d","modified":1683460408344},{"_id":"public/archives/2023/03/index.html","hash":"85377b7a3c15010793a43e3ea5912a01fa49b514","modified":1683460408344},{"_id":"public/archives/2023/04/index.html","hash":"abf6e78bab9f9fb1ecb518c36c94252b02f1a49c","modified":1683460408344},{"_id":"public/404.html","hash":"a75d6a0277d309788aa47259aa23b439f85b6955","modified":1683460408344},{"_id":"public/archives/2023/05/index.html","hash":"30cd710cf3524ad79047354b9f4c03f8b29e4388","modified":1683460408344},{"_id":"public/tags/index.html","hash":"1c32d34c712969aa073d5bca8e4814a35f4611b4","modified":1683460408344},{"_id":"public/links/index.html","hash":"cb65774d43759b95acc8bd5a95e15e762703259b","modified":1683460408344},{"_id":"public/index.html","hash":"5cc7372b98a2c2d1feb1c322a64b8c1ce2718cbf","modified":1683460408344},{"_id":"public/categories/index.html","hash":"6a4e20165c8308c6f8a57fea7d5ebbbe1ece49a0","modified":1683460408344},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1683460408344},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1683460408344},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1683460408344},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1683460408344},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1683460408344},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1683460408344},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1683460408344},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1683460408344},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1683460408344},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1683460408344},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1683460408344},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1683460408344},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1683460408344},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1683460408344},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1683460408344},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1683460408344},{"_id":"public/css/main.css","hash":"e43c3f19d3caac4ba47ae581a32dae38791cdba8","modified":1683460408344},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1683460408344}],"Category":[{"name":"JavaScript","_id":"clhdcv0x800040kv32ndc2jog"},{"name":"面试题","_id":"clhdcv0xc00090kv39gpch2sk"},{"name":"Hexo博客","_id":"clhdcv0xf000f0kv3dg2egyjv"},{"name":"浏览器原理","_id":"clhdcv0xg000j0kv37a9u4hdj"},{"name":"前端工程化","_id":"clhdcv0xh000p0kv3fnxr9bhq"},{"name":"vue2","_id":"clhdcv0xi000s0kv3g7u81tu5"}],"Data":[{"_id":"fluid_config","data":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}],"Page":[{"title":"about","layout":"about","date":"2023-03-20T15:07:37.000Z","_content":"\n## Hi~🍉这里是贾宾和张晴的新博客🎈\n\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2023-03-20 23:07:37\n---\n\n## Hi~🍉这里是贾宾和张晴的新博客🎈\n\n","updated":"2023-03-21T12:47:37.423Z","path":"about/index.html","comments":1,"_id":"clhdcv0wx00000kv381umehby","content":"<h2 id=\"Hi-🍉这里是贾宾和张晴的新博客🎈\"><a href=\"#Hi-🍉这里是贾宾和张晴的新博客🎈\" class=\"headerlink\" title=\"Hi~🍉这里是贾宾和张晴的新博客🎈\"></a>Hi~🍉这里是贾宾和张晴的新博客🎈</h2>","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<h2 id=\"Hi-🍉这里是贾宾和张晴的新博客🎈\"><a href=\"#Hi-🍉这里是贾宾和张晴的新博客🎈\" class=\"headerlink\" title=\"Hi~🍉这里是贾宾和张晴的新博客🎈\"></a>Hi~🍉这里是贾宾和张晴的新博客🎈</h2>"},{"_content":"","source":"css/新建文本文档.css","raw":"","date":"2023-03-21T12:50:27.355Z","updated":"2023-03-21T12:50:19.777Z","path":"css/新建文本文档.css","layout":"false","title":"","comments":1,"_id":"clhdcv0x400020kv342131rta","content":"","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":""}],"Post":[{"title":"事件循环和消息队列（一）","date":"2023-03-29T15:16:15.000Z","banner_img":"http://182.44.49.100:34/images/2023/05/06/createBlog.png","_content":"\n# 前言\n\n在讲述事件循环和消息队列之前，需要了解 JS 的单线程执行机制，JS 的执行是从上到下依次执行的，这些便是同步任务，而 ES6 引入了 Promise 对象，使得异步任务开始频频出现在 JS 的代码中。\n\n异步任务不同于顺序执行的同步任务，他对于 JS 运行时来说是一个黑盒，无法预知他究竟什么时候会被执行，因为这取决于异步任务何时从消息队列中出队执行，而消息队列中的异步任务是否出队，则与事件循环机制直接相关。\n\n# 从多进程(process)和单线程(thread)谈起\n\n人们使用的现代浏览器都是多进程的应用程序，而运行在浏览器上的 JS 代码是单线程的。\n\n## 浅谈Chrome浏览器架构\n\n​\t如果自己设计一个浏览器，浏览器可以是哪种架构呢？\n\n+ 单进程架构（线程间进行通信）\n+ 多进程架构（进程间 IPC (Inter-Process Communication)通信）\n\n如果你的浏览器要以单进程架构进行设计，需要在一个进程内实现网络、调度、存储、IO设备、渲染、插件等任务，当然你可以把这些任务分为若干个线程去执行，形成单进程多线程的浏览器架构。\n\n但是由于这些任务在现在操作系统中越来越复杂，例如把网络、存储、渲染这些任务放在一个线程中，执行效率和性能越来越低下（比如有一些网页的代码存在内存泄露，即便关闭这些网页线程，进程中的这块内存也无法被回收，除非关闭浏览器，否则越用越卡），且无法再向下拆分出类似线程的子空间，因为线程已经是最小的执行单位。\n\n因此，为了强化浏览器的各个复杂功能，出现了多进程架构的浏览器，可以将网络、存储、渲染、IO、插件这些复杂任务分配给一个个单独的进程，这样每个进程又能向下拆分出多个线程，极大程度上强化了浏览器。\n\n### 理解Chrome的多进程架构\n\nChrome也是基于多进程架构的现代浏览器，Chrome的主要进程组成如下：\n\n![image-20230329211758826](http://182.44.49.100:34/images/2023/05/06/image-20230329211758826.png)\n\n+ Browser 进程：Tab之外的一切都有该进程处理。负责地址栏、书签栏、前进后退、网络请求、文件访问等；\n\n+ Renderer 进程：负责一个 Tab 内所有和网页渲染有关的事情，是最核心的进程；\n\n+ Plugin 进程：负责 Chrome 插件相关的任务；\n\n+ GPU 进程：GPU进程与其他浏览器进程相隔离处理GPU任务，把浏览器的页面内容绘制到屏幕上；\n\n  > 所有应用程序都要在OS的调度下基于CPU和GPU的计算才能运行。因为GPU要处理多个应用程序的的请求，浏览器的的GPU进程只是一个分量。GPU擅长处理图形，因此提供GPU计算的应用程序可以实现快速渲染和平滑交互。\n\n![image-20230329214757221](http://182.44.49.100:34/images/2023/05/06/image-20230329214757221.png)\n\nChrome 的每一个Tab 选项卡都拥有自己的 Renderer 进程，有三个 Tab 就意味着有三个不同的 Renderer 进程这样可以保证多个 Tab 之间互不影响，即使其中一个 Tab 没有响应，也不影响其他 Tab 的正常执行。然而，由于进程是 OS 中拥有资源的独立单位，多个 Tab 之间的数据是非共享的，这也意味着多个 Tab 都会有相同的 V8引擎初始化数据，这意味着更多的内存使用。\n\n![image-20230329220338191](http://182.44.49.100:34/images/2023/05/06/image-20230329220338191.png)\n\n### 了解 Browser 浏览器进程\n\n简单来说，在浏览器中，Tab之外的一切都归浏览器进程所接管，它包含3个主要的线程：\n\n+ UI thread UI线程：负责绘制和管理浏览器的按钮和输入框区域。\n+ Network thread 网络线程：负责处理网络堆栈以从互联网接收数据\n+ Storage thread 存储线程：负责控制文件访问 \n\n而根据浏览器的优化策略，这三个线程往往会独立为三个进程。\n\n现在让我们来模拟一个在地址栏输入网址，并将网页呈现在浏览器上的过程\n\n1. 用户在地址栏中键入字符串，UI 线程会识别该字符串是 URL 还是搜索关键词。\n\n   > Chrome中的地址既可以访问网页，同时又是个搜索框，这里假设我们输入的是 URL。\n\n2. UI 线程通知网络线程开始进行导航，发起网络请求\n\n3. 读取响应数据，如果响应的是 HTML 文件，那么下一步会将该数据传递给渲染进程；但如果响应数据是一个压缩包或其它类型的文件，那么就意味着我们发送的是下载请求，所以需要把数据传递给下载管理器\n\n4. UI线程负责找到渲染进程，通知它要进行网页渲染\n\n5. 此时数据和渲染进程都已经准备好，浏览器进程和渲染进程开启 IPC 传递数据，导航部分完成，你会发现tab由原网页台跳转到空白页面，然后开始边传输HTML 边进行网页渲染。\n\n   \n\n### 了解最为重要的 Renderer 渲染进程\n\n渲染进程主要包括4个线程：\n\n+ Main thread 主线程：执行JS、下载资源、计算样式、进行布局、绘制合成\n+ Raster thread 光栅线程\n+ Compositor thread 合成线程\n+ Worker thread 工作者线程\n\n#### 主线程的功能\n\n+ 执行 JS：主线程在遇到 `<script>` 标签时会阻塞HTML文档的解析，并必须先下载、解析和执行js代码，why？因为 js 可以用 `document.write()`之类的东西改变 DOM 结构。这就是为什么会暂停HTML的解析，并等待js代码执行完毕后才能恢复。\n\n+ 下载外部资源：如果HTML中由需要加载**外部资源**的标签，这在解析HTML构建DOM树之前会由**预加载扫描线程**检测到，并**提前**利用 Browser 线程的 Network 线程来下载`<img/>`、CSS和 JS的`<link>`等渲染DOM需要的外部资源文件，这减少了解析 HTML 的阻塞时间\n\n+ 解析HTML：由 HTML**解析器**解析 HTML 内容，首先由**分词器**检测出各个标签名，我们称他们为token，然后利用token栈和括号匹配算法，构建出DOM树。同时会根据外部、内部和内联 CSS 样式计算得到 CSSOM 树。\n\n  ![根据html文档生成DOM树](http://182.44.49.100:34/images/2023/05/06/htmlDOM.png)\n\n+ 计算CSS样式：主线程根据 CSSOM 树进行CSS属性值的计算，并将计算后的样式添加到DOM树的对应DOM节点上。\n\n  > :boat: 计算（最终）样式（computed style）:是把继承、层叠关系理清，并且把所有CSS属性都赋值之后的CSS样式。\n  >\n  > :warning:HTML本质上只是提供了**语义化的标签**。为何div、p标签是块盒，而span标签却是行盒？根本原因是浏览器的源码中，设置了**浏览器默认样式**，而这些标签分别被设置为了`display:block `和 `display:inline`\n\n+ 确定**布局**结构*Layout*：只有DOM节点和和它的样式可不够，还需要确定他们之间的布局关系，并构建与DOM树类似的**布局树**，比如在页面上的位置、盒子的尺寸大小的信息\n\n  > :label:布局树通常情况下与DOM树结构并不相同。由于布局树只考虑存在位置和尺寸这样的**几何信息**的DOM元素，所以`display:none`的DOM元素在构建布局树时是不被考虑的，类似的，还有一些伪元素，匿名行盒，匿名块盒.....\n  >\n  > :man_teacher: W3C规定：标签的文本必须被包含在行盒中；行盒和块盒不能相邻。因此用匿名行盒和匿名块盒来适应这个规定\n\n  ![微信截图_20230411173336](http://182.44.49.100:34/images/2023/05/06/_20230411173336.png)\n\n  \n\n+ **分层**（Layer）：主线程会使用一套复杂的策略对整个布局树中进行分层。分层的好处在于，将来某一个层发生改变后，仅会对该层进行后续处理，从而提升效率\n\n  > 滚动条、层叠上下文（z-index）、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过`will-change`属性更大程度的影响分层结构。\n  >\n  > 分层不是越多越好，层数太多会导致占用大量的内存空间，因为浏览器会根据内存和效率权衡分层的数量。\n\n  ![image-20230329230708934](http://182.44.49.100:34/images/2023/05/06/image-20230329230708934.png)\n\n  \n\n+ **计算绘制指令集**（paint）：主线程会为每个层单独产生绘制指令集，用于描述这个层的内容该如何一步步地画出来。完成此步后，主线程将绘制指令集交付给合成线程\n\n  ![微信截图_20230411174231](http://182.44.49.100:34/images/2023/05/06/_20230411174231.png)\n\n  \n\n#### 合成器线程\n\n​\t一旦确定了**绘制指令集**，主线程就会将该信息提交给合成器线程。然后，合成线程将对每个层进行分块并光栅化。一个层可以比视口要大，所以合成器线程将它们划分为瓦片（图块），并将每个瓦片发送到GPU进程，完成光栅化，并且在这个过程中优先光栅化靠近视口的区域，紧接着再去光栅化页面的其他区域。（tiling和raster）\n\n> 将这些信息转换为屏幕上的像素称为光栅化\n\n​\t光栅化完成后，GPU进程将生成的位图交回给合成线程，合成线程收到每个层、每个块的位图之后，生成一个个的指引（quad）信息。指引信息会表示出每个位图应该滑到屏幕的那个位置，以及会考虑到旋转、缩放等变形。然后合成线程将 quad 提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。（draw）\n\n> 由于变形操作是在合成线程中执行的，与渲染主线程无关，这就是  transform 效率高的原因\n\n+ 浏览器滚动时，合成线程会创建一个新的合成帧发送给 GPU，以显示到屏幕上，所以即便主线程卡死，也不影响页面滚动。\n+ 合成线程工作与主线程无关，不用等待样式计算和 js 的执行，因此合成线程相关的动画比涉及到主线程重新计算样式和执行 js 的动画更加流畅\n\n#### 浏览器的渲染过程流程图\n\n![渲染流程图](http://182.44.49.100:34/images/2023/05/06/3787d04fe1672d3115116a6d2125f964.png)\n\n\n\n### 参考\n\n[Inside look at modern web browser (part 1)](https://developer.chrome.com/blog/inside-browser-part1/)\n\n[浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务](https://juejin.cn/post/6844904193367474184)\n\n[Inside look at modern web browser (part 2)](https://developer.chrome.com/blog/inside-browser-part2/)\n\n[Inside look at modern web browser (part 3)](https://developer.chrome.com/blog/inside-browser-part3/)\n","source":"_posts/Broswer.md","raw":"---\ntitle: 事件循环和消息队列（一）\ndate: 2023-03-29 23:16:15\ntags: [浏览器架构]\ncategories: [JavaScript]\nbanner_img: http://182.44.49.100:34/images/2023/05/06/createBlog.png\n---\n\n# 前言\n\n在讲述事件循环和消息队列之前，需要了解 JS 的单线程执行机制，JS 的执行是从上到下依次执行的，这些便是同步任务，而 ES6 引入了 Promise 对象，使得异步任务开始频频出现在 JS 的代码中。\n\n异步任务不同于顺序执行的同步任务，他对于 JS 运行时来说是一个黑盒，无法预知他究竟什么时候会被执行，因为这取决于异步任务何时从消息队列中出队执行，而消息队列中的异步任务是否出队，则与事件循环机制直接相关。\n\n# 从多进程(process)和单线程(thread)谈起\n\n人们使用的现代浏览器都是多进程的应用程序，而运行在浏览器上的 JS 代码是单线程的。\n\n## 浅谈Chrome浏览器架构\n\n​\t如果自己设计一个浏览器，浏览器可以是哪种架构呢？\n\n+ 单进程架构（线程间进行通信）\n+ 多进程架构（进程间 IPC (Inter-Process Communication)通信）\n\n如果你的浏览器要以单进程架构进行设计，需要在一个进程内实现网络、调度、存储、IO设备、渲染、插件等任务，当然你可以把这些任务分为若干个线程去执行，形成单进程多线程的浏览器架构。\n\n但是由于这些任务在现在操作系统中越来越复杂，例如把网络、存储、渲染这些任务放在一个线程中，执行效率和性能越来越低下（比如有一些网页的代码存在内存泄露，即便关闭这些网页线程，进程中的这块内存也无法被回收，除非关闭浏览器，否则越用越卡），且无法再向下拆分出类似线程的子空间，因为线程已经是最小的执行单位。\n\n因此，为了强化浏览器的各个复杂功能，出现了多进程架构的浏览器，可以将网络、存储、渲染、IO、插件这些复杂任务分配给一个个单独的进程，这样每个进程又能向下拆分出多个线程，极大程度上强化了浏览器。\n\n### 理解Chrome的多进程架构\n\nChrome也是基于多进程架构的现代浏览器，Chrome的主要进程组成如下：\n\n![image-20230329211758826](http://182.44.49.100:34/images/2023/05/06/image-20230329211758826.png)\n\n+ Browser 进程：Tab之外的一切都有该进程处理。负责地址栏、书签栏、前进后退、网络请求、文件访问等；\n\n+ Renderer 进程：负责一个 Tab 内所有和网页渲染有关的事情，是最核心的进程；\n\n+ Plugin 进程：负责 Chrome 插件相关的任务；\n\n+ GPU 进程：GPU进程与其他浏览器进程相隔离处理GPU任务，把浏览器的页面内容绘制到屏幕上；\n\n  > 所有应用程序都要在OS的调度下基于CPU和GPU的计算才能运行。因为GPU要处理多个应用程序的的请求，浏览器的的GPU进程只是一个分量。GPU擅长处理图形，因此提供GPU计算的应用程序可以实现快速渲染和平滑交互。\n\n![image-20230329214757221](http://182.44.49.100:34/images/2023/05/06/image-20230329214757221.png)\n\nChrome 的每一个Tab 选项卡都拥有自己的 Renderer 进程，有三个 Tab 就意味着有三个不同的 Renderer 进程这样可以保证多个 Tab 之间互不影响，即使其中一个 Tab 没有响应，也不影响其他 Tab 的正常执行。然而，由于进程是 OS 中拥有资源的独立单位，多个 Tab 之间的数据是非共享的，这也意味着多个 Tab 都会有相同的 V8引擎初始化数据，这意味着更多的内存使用。\n\n![image-20230329220338191](http://182.44.49.100:34/images/2023/05/06/image-20230329220338191.png)\n\n### 了解 Browser 浏览器进程\n\n简单来说，在浏览器中，Tab之外的一切都归浏览器进程所接管，它包含3个主要的线程：\n\n+ UI thread UI线程：负责绘制和管理浏览器的按钮和输入框区域。\n+ Network thread 网络线程：负责处理网络堆栈以从互联网接收数据\n+ Storage thread 存储线程：负责控制文件访问 \n\n而根据浏览器的优化策略，这三个线程往往会独立为三个进程。\n\n现在让我们来模拟一个在地址栏输入网址，并将网页呈现在浏览器上的过程\n\n1. 用户在地址栏中键入字符串，UI 线程会识别该字符串是 URL 还是搜索关键词。\n\n   > Chrome中的地址既可以访问网页，同时又是个搜索框，这里假设我们输入的是 URL。\n\n2. UI 线程通知网络线程开始进行导航，发起网络请求\n\n3. 读取响应数据，如果响应的是 HTML 文件，那么下一步会将该数据传递给渲染进程；但如果响应数据是一个压缩包或其它类型的文件，那么就意味着我们发送的是下载请求，所以需要把数据传递给下载管理器\n\n4. UI线程负责找到渲染进程，通知它要进行网页渲染\n\n5. 此时数据和渲染进程都已经准备好，浏览器进程和渲染进程开启 IPC 传递数据，导航部分完成，你会发现tab由原网页台跳转到空白页面，然后开始边传输HTML 边进行网页渲染。\n\n   \n\n### 了解最为重要的 Renderer 渲染进程\n\n渲染进程主要包括4个线程：\n\n+ Main thread 主线程：执行JS、下载资源、计算样式、进行布局、绘制合成\n+ Raster thread 光栅线程\n+ Compositor thread 合成线程\n+ Worker thread 工作者线程\n\n#### 主线程的功能\n\n+ 执行 JS：主线程在遇到 `<script>` 标签时会阻塞HTML文档的解析，并必须先下载、解析和执行js代码，why？因为 js 可以用 `document.write()`之类的东西改变 DOM 结构。这就是为什么会暂停HTML的解析，并等待js代码执行完毕后才能恢复。\n\n+ 下载外部资源：如果HTML中由需要加载**外部资源**的标签，这在解析HTML构建DOM树之前会由**预加载扫描线程**检测到，并**提前**利用 Browser 线程的 Network 线程来下载`<img/>`、CSS和 JS的`<link>`等渲染DOM需要的外部资源文件，这减少了解析 HTML 的阻塞时间\n\n+ 解析HTML：由 HTML**解析器**解析 HTML 内容，首先由**分词器**检测出各个标签名，我们称他们为token，然后利用token栈和括号匹配算法，构建出DOM树。同时会根据外部、内部和内联 CSS 样式计算得到 CSSOM 树。\n\n  ![根据html文档生成DOM树](http://182.44.49.100:34/images/2023/05/06/htmlDOM.png)\n\n+ 计算CSS样式：主线程根据 CSSOM 树进行CSS属性值的计算，并将计算后的样式添加到DOM树的对应DOM节点上。\n\n  > :boat: 计算（最终）样式（computed style）:是把继承、层叠关系理清，并且把所有CSS属性都赋值之后的CSS样式。\n  >\n  > :warning:HTML本质上只是提供了**语义化的标签**。为何div、p标签是块盒，而span标签却是行盒？根本原因是浏览器的源码中，设置了**浏览器默认样式**，而这些标签分别被设置为了`display:block `和 `display:inline`\n\n+ 确定**布局**结构*Layout*：只有DOM节点和和它的样式可不够，还需要确定他们之间的布局关系，并构建与DOM树类似的**布局树**，比如在页面上的位置、盒子的尺寸大小的信息\n\n  > :label:布局树通常情况下与DOM树结构并不相同。由于布局树只考虑存在位置和尺寸这样的**几何信息**的DOM元素，所以`display:none`的DOM元素在构建布局树时是不被考虑的，类似的，还有一些伪元素，匿名行盒，匿名块盒.....\n  >\n  > :man_teacher: W3C规定：标签的文本必须被包含在行盒中；行盒和块盒不能相邻。因此用匿名行盒和匿名块盒来适应这个规定\n\n  ![微信截图_20230411173336](http://182.44.49.100:34/images/2023/05/06/_20230411173336.png)\n\n  \n\n+ **分层**（Layer）：主线程会使用一套复杂的策略对整个布局树中进行分层。分层的好处在于，将来某一个层发生改变后，仅会对该层进行后续处理，从而提升效率\n\n  > 滚动条、层叠上下文（z-index）、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过`will-change`属性更大程度的影响分层结构。\n  >\n  > 分层不是越多越好，层数太多会导致占用大量的内存空间，因为浏览器会根据内存和效率权衡分层的数量。\n\n  ![image-20230329230708934](http://182.44.49.100:34/images/2023/05/06/image-20230329230708934.png)\n\n  \n\n+ **计算绘制指令集**（paint）：主线程会为每个层单独产生绘制指令集，用于描述这个层的内容该如何一步步地画出来。完成此步后，主线程将绘制指令集交付给合成线程\n\n  ![微信截图_20230411174231](http://182.44.49.100:34/images/2023/05/06/_20230411174231.png)\n\n  \n\n#### 合成器线程\n\n​\t一旦确定了**绘制指令集**，主线程就会将该信息提交给合成器线程。然后，合成线程将对每个层进行分块并光栅化。一个层可以比视口要大，所以合成器线程将它们划分为瓦片（图块），并将每个瓦片发送到GPU进程，完成光栅化，并且在这个过程中优先光栅化靠近视口的区域，紧接着再去光栅化页面的其他区域。（tiling和raster）\n\n> 将这些信息转换为屏幕上的像素称为光栅化\n\n​\t光栅化完成后，GPU进程将生成的位图交回给合成线程，合成线程收到每个层、每个块的位图之后，生成一个个的指引（quad）信息。指引信息会表示出每个位图应该滑到屏幕的那个位置，以及会考虑到旋转、缩放等变形。然后合成线程将 quad 提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。（draw）\n\n> 由于变形操作是在合成线程中执行的，与渲染主线程无关，这就是  transform 效率高的原因\n\n+ 浏览器滚动时，合成线程会创建一个新的合成帧发送给 GPU，以显示到屏幕上，所以即便主线程卡死，也不影响页面滚动。\n+ 合成线程工作与主线程无关，不用等待样式计算和 js 的执行，因此合成线程相关的动画比涉及到主线程重新计算样式和执行 js 的动画更加流畅\n\n#### 浏览器的渲染过程流程图\n\n![渲染流程图](http://182.44.49.100:34/images/2023/05/06/3787d04fe1672d3115116a6d2125f964.png)\n\n\n\n### 参考\n\n[Inside look at modern web browser (part 1)](https://developer.chrome.com/blog/inside-browser-part1/)\n\n[浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务](https://juejin.cn/post/6844904193367474184)\n\n[Inside look at modern web browser (part 2)](https://developer.chrome.com/blog/inside-browser-part2/)\n\n[Inside look at modern web browser (part 3)](https://developer.chrome.com/blog/inside-browser-part3/)\n","slug":"Broswer","published":1,"updated":"2023-05-06T09:19:05.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0x000010kv3fydohy2w","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在讲述事件循环和消息队列之前，需要了解 JS 的单线程执行机制，JS 的执行是从上到下依次执行的，这些便是同步任务，而 ES6 引入了 Promise 对象，使得异步任务开始频频出现在 JS 的代码中。</p>\n<p>异步任务不同于顺序执行的同步任务，他对于 JS 运行时来说是一个黑盒，无法预知他究竟什么时候会被执行，因为这取决于异步任务何时从消息队列中出队执行，而消息队列中的异步任务是否出队，则与事件循环机制直接相关。</p>\n<h1 id=\"从多进程-process-和单线程-thread-谈起\"><a href=\"#从多进程-process-和单线程-thread-谈起\" class=\"headerlink\" title=\"从多进程(process)和单线程(thread)谈起\"></a>从多进程(process)和单线程(thread)谈起</h1><p>人们使用的现代浏览器都是多进程的应用程序，而运行在浏览器上的 JS 代码是单线程的。</p>\n<h2 id=\"浅谈Chrome浏览器架构\"><a href=\"#浅谈Chrome浏览器架构\" class=\"headerlink\" title=\"浅谈Chrome浏览器架构\"></a>浅谈Chrome浏览器架构</h2><p>​    如果自己设计一个浏览器，浏览器可以是哪种架构呢？</p>\n<ul>\n<li>单进程架构（线程间进行通信）</li>\n<li>多进程架构（进程间 IPC (Inter-Process Communication)通信）</li>\n</ul>\n<p>如果你的浏览器要以单进程架构进行设计，需要在一个进程内实现网络、调度、存储、IO设备、渲染、插件等任务，当然你可以把这些任务分为若干个线程去执行，形成单进程多线程的浏览器架构。</p>\n<p>但是由于这些任务在现在操作系统中越来越复杂，例如把网络、存储、渲染这些任务放在一个线程中，执行效率和性能越来越低下（比如有一些网页的代码存在内存泄露，即便关闭这些网页线程，进程中的这块内存也无法被回收，除非关闭浏览器，否则越用越卡），且无法再向下拆分出类似线程的子空间，因为线程已经是最小的执行单位。</p>\n<p>因此，为了强化浏览器的各个复杂功能，出现了多进程架构的浏览器，可以将网络、存储、渲染、IO、插件这些复杂任务分配给一个个单独的进程，这样每个进程又能向下拆分出多个线程，极大程度上强化了浏览器。</p>\n<h3 id=\"理解Chrome的多进程架构\"><a href=\"#理解Chrome的多进程架构\" class=\"headerlink\" title=\"理解Chrome的多进程架构\"></a>理解Chrome的多进程架构</h3><p>Chrome也是基于多进程架构的现代浏览器，Chrome的主要进程组成如下：</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329211758826.png\" alt=\"image-20230329211758826\"></p>\n<ul>\n<li><p>Browser 进程：Tab之外的一切都有该进程处理。负责地址栏、书签栏、前进后退、网络请求、文件访问等；</p>\n</li>\n<li><p>Renderer 进程：负责一个 Tab 内所有和网页渲染有关的事情，是最核心的进程；</p>\n</li>\n<li><p>Plugin 进程：负责 Chrome 插件相关的任务；</p>\n</li>\n<li><p>GPU 进程：GPU进程与其他浏览器进程相隔离处理GPU任务，把浏览器的页面内容绘制到屏幕上；</p>\n<blockquote>\n<p>所有应用程序都要在OS的调度下基于CPU和GPU的计算才能运行。因为GPU要处理多个应用程序的的请求，浏览器的的GPU进程只是一个分量。GPU擅长处理图形，因此提供GPU计算的应用程序可以实现快速渲染和平滑交互。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329214757221.png\" alt=\"image-20230329214757221\"></p>\n<p>Chrome 的每一个Tab 选项卡都拥有自己的 Renderer 进程，有三个 Tab 就意味着有三个不同的 Renderer 进程这样可以保证多个 Tab 之间互不影响，即使其中一个 Tab 没有响应，也不影响其他 Tab 的正常执行。然而，由于进程是 OS 中拥有资源的独立单位，多个 Tab 之间的数据是非共享的，这也意味着多个 Tab 都会有相同的 V8引擎初始化数据，这意味着更多的内存使用。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329220338191.png\" alt=\"image-20230329220338191\"></p>\n<h3 id=\"了解-Browser-浏览器进程\"><a href=\"#了解-Browser-浏览器进程\" class=\"headerlink\" title=\"了解 Browser 浏览器进程\"></a>了解 Browser 浏览器进程</h3><p>简单来说，在浏览器中，Tab之外的一切都归浏览器进程所接管，它包含3个主要的线程：</p>\n<ul>\n<li>UI thread UI线程：负责绘制和管理浏览器的按钮和输入框区域。</li>\n<li>Network thread 网络线程：负责处理网络堆栈以从互联网接收数据</li>\n<li>Storage thread 存储线程：负责控制文件访问 </li>\n</ul>\n<p>而根据浏览器的优化策略，这三个线程往往会独立为三个进程。</p>\n<p>现在让我们来模拟一个在地址栏输入网址，并将网页呈现在浏览器上的过程</p>\n<ol>\n<li><p>用户在地址栏中键入字符串，UI 线程会识别该字符串是 URL 还是搜索关键词。</p>\n<blockquote>\n<p>Chrome中的地址既可以访问网页，同时又是个搜索框，这里假设我们输入的是 URL。</p>\n</blockquote>\n</li>\n<li><p>UI 线程通知网络线程开始进行导航，发起网络请求</p>\n</li>\n<li><p>读取响应数据，如果响应的是 HTML 文件，那么下一步会将该数据传递给渲染进程；但如果响应数据是一个压缩包或其它类型的文件，那么就意味着我们发送的是下载请求，所以需要把数据传递给下载管理器</p>\n</li>\n<li><p>UI线程负责找到渲染进程，通知它要进行网页渲染</p>\n</li>\n<li><p>此时数据和渲染进程都已经准备好，浏览器进程和渲染进程开启 IPC 传递数据，导航部分完成，你会发现tab由原网页台跳转到空白页面，然后开始边传输HTML 边进行网页渲染。</p>\n</li>\n</ol>\n<h3 id=\"了解最为重要的-Renderer-渲染进程\"><a href=\"#了解最为重要的-Renderer-渲染进程\" class=\"headerlink\" title=\"了解最为重要的 Renderer 渲染进程\"></a>了解最为重要的 Renderer 渲染进程</h3><p>渲染进程主要包括4个线程：</p>\n<ul>\n<li>Main thread 主线程：执行JS、下载资源、计算样式、进行布局、绘制合成</li>\n<li>Raster thread 光栅线程</li>\n<li>Compositor thread 合成线程</li>\n<li>Worker thread 工作者线程</li>\n</ul>\n<h4 id=\"主线程的功能\"><a href=\"#主线程的功能\" class=\"headerlink\" title=\"主线程的功能\"></a>主线程的功能</h4><ul>\n<li><p>执行 JS：主线程在遇到 <code>&lt;script&gt;</code> 标签时会阻塞HTML文档的解析，并必须先下载、解析和执行js代码，why？因为 js 可以用 <code>document.write()</code>之类的东西改变 DOM 结构。这就是为什么会暂停HTML的解析，并等待js代码执行完毕后才能恢复。</p>\n</li>\n<li><p>下载外部资源：如果HTML中由需要加载<strong>外部资源</strong>的标签，这在解析HTML构建DOM树之前会由<strong>预加载扫描线程</strong>检测到，并<strong>提前</strong>利用 Browser 线程的 Network 线程来下载<code>&lt;img/&gt;</code>、CSS和 JS的<code>&lt;link&gt;</code>等渲染DOM需要的外部资源文件，这减少了解析 HTML 的阻塞时间</p>\n</li>\n<li><p>解析HTML：由 HTML<strong>解析器</strong>解析 HTML 内容，首先由<strong>分词器</strong>检测出各个标签名，我们称他们为token，然后利用token栈和括号匹配算法，构建出DOM树。同时会根据外部、内部和内联 CSS 样式计算得到 CSSOM 树。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/htmlDOM.png\" alt=\"根据html文档生成DOM树\"></p>\n</li>\n<li><p>计算CSS样式：主线程根据 CSSOM 树进行CSS属性值的计算，并将计算后的样式添加到DOM树的对应DOM节点上。</p>\n<blockquote>\n<p>:boat: 计算（最终）样式（computed style）:是把继承、层叠关系理清，并且把所有CSS属性都赋值之后的CSS样式。</p>\n<p>:warning:HTML本质上只是提供了<strong>语义化的标签</strong>。为何div、p标签是块盒，而span标签却是行盒？根本原因是浏览器的源码中，设置了<strong>浏览器默认样式</strong>，而这些标签分别被设置为了<code>display:block </code>和 <code>display:inline</code></p>\n</blockquote>\n</li>\n<li><p>确定<strong>布局</strong>结构<em>Layout</em>：只有DOM节点和和它的样式可不够，还需要确定他们之间的布局关系，并构建与DOM树类似的<strong>布局树</strong>，比如在页面上的位置、盒子的尺寸大小的信息</p>\n<blockquote>\n<p>:label:布局树通常情况下与DOM树结构并不相同。由于布局树只考虑存在位置和尺寸这样的<strong>几何信息</strong>的DOM元素，所以<code>display:none</code>的DOM元素在构建布局树时是不被考虑的，类似的，还有一些伪元素，匿名行盒，匿名块盒…..</p>\n<p>:man_teacher: W3C规定：标签的文本必须被包含在行盒中；行盒和块盒不能相邻。因此用匿名行盒和匿名块盒来适应这个规定</p>\n</blockquote>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/_20230411173336.png\" alt=\"微信截图_20230411173336\"></p>\n</li>\n<li><p><strong>分层</strong>（Layer）：主线程会使用一套复杂的策略对整个布局树中进行分层。分层的好处在于，将来某一个层发生改变后，仅会对该层进行后续处理，从而提升效率</p>\n<blockquote>\n<p>滚动条、层叠上下文（z-index）、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结构。</p>\n<p>分层不是越多越好，层数太多会导致占用大量的内存空间，因为浏览器会根据内存和效率权衡分层的数量。</p>\n</blockquote>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329230708934.png\" alt=\"image-20230329230708934\"></p>\n</li>\n<li><p><strong>计算绘制指令集</strong>（paint）：主线程会为每个层单独产生绘制指令集，用于描述这个层的内容该如何一步步地画出来。完成此步后，主线程将绘制指令集交付给合成线程</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/_20230411174231.png\" alt=\"微信截图_20230411174231\"></p>\n</li>\n</ul>\n<h4 id=\"合成器线程\"><a href=\"#合成器线程\" class=\"headerlink\" title=\"合成器线程\"></a>合成器线程</h4><p>​    一旦确定了<strong>绘制指令集</strong>，主线程就会将该信息提交给合成器线程。然后，合成线程将对每个层进行分块并光栅化。一个层可以比视口要大，所以合成器线程将它们划分为瓦片（图块），并将每个瓦片发送到GPU进程，完成光栅化，并且在这个过程中优先光栅化靠近视口的区域，紧接着再去光栅化页面的其他区域。（tiling和raster）</p>\n<blockquote>\n<p>将这些信息转换为屏幕上的像素称为光栅化</p>\n</blockquote>\n<p>​    光栅化完成后，GPU进程将生成的位图交回给合成线程，合成线程收到每个层、每个块的位图之后，生成一个个的指引（quad）信息。指引信息会表示出每个位图应该滑到屏幕的那个位置，以及会考虑到旋转、缩放等变形。然后合成线程将 quad 提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。（draw）</p>\n<blockquote>\n<p>由于变形操作是在合成线程中执行的，与渲染主线程无关，这就是  transform 效率高的原因</p>\n</blockquote>\n<ul>\n<li>浏览器滚动时，合成线程会创建一个新的合成帧发送给 GPU，以显示到屏幕上，所以即便主线程卡死，也不影响页面滚动。</li>\n<li>合成线程工作与主线程无关，不用等待样式计算和 js 的执行，因此合成线程相关的动画比涉及到主线程重新计算样式和执行 js 的动画更加流畅</li>\n</ul>\n<h4 id=\"浏览器的渲染过程流程图\"><a href=\"#浏览器的渲染过程流程图\" class=\"headerlink\" title=\"浏览器的渲染过程流程图\"></a>浏览器的渲染过程流程图</h4><p><img src=\"http://182.44.49.100:34/images/2023/05/06/3787d04fe1672d3115116a6d2125f964.png\" alt=\"渲染流程图\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://developer.chrome.com/blog/inside-browser-part1/\">Inside look at modern web browser (part 1)</a></p>\n<p><a href=\"https://juejin.cn/post/6844904193367474184\">浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务</a></p>\n<p><a href=\"https://developer.chrome.com/blog/inside-browser-part2/\">Inside look at modern web browser (part 2)</a></p>\n<p><a href=\"https://developer.chrome.com/blog/inside-browser-part3/\">Inside look at modern web browser (part 3)</a></p>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在讲述事件循环和消息队列之前，需要了解 JS 的单线程执行机制，JS 的执行是从上到下依次执行的，这些便是同步任务，而 ES6 引入了 Promise 对象，使得异步任务开始频频出现在 JS 的代码中。</p>\n<p>异步任务不同于顺序执行的同步任务，他对于 JS 运行时来说是一个黑盒，无法预知他究竟什么时候会被执行，因为这取决于异步任务何时从消息队列中出队执行，而消息队列中的异步任务是否出队，则与事件循环机制直接相关。</p>\n<h1 id=\"从多进程-process-和单线程-thread-谈起\"><a href=\"#从多进程-process-和单线程-thread-谈起\" class=\"headerlink\" title=\"从多进程(process)和单线程(thread)谈起\"></a>从多进程(process)和单线程(thread)谈起</h1><p>人们使用的现代浏览器都是多进程的应用程序，而运行在浏览器上的 JS 代码是单线程的。</p>\n<h2 id=\"浅谈Chrome浏览器架构\"><a href=\"#浅谈Chrome浏览器架构\" class=\"headerlink\" title=\"浅谈Chrome浏览器架构\"></a>浅谈Chrome浏览器架构</h2><p>​    如果自己设计一个浏览器，浏览器可以是哪种架构呢？</p>\n<ul>\n<li>单进程架构（线程间进行通信）</li>\n<li>多进程架构（进程间 IPC (Inter-Process Communication)通信）</li>\n</ul>\n<p>如果你的浏览器要以单进程架构进行设计，需要在一个进程内实现网络、调度、存储、IO设备、渲染、插件等任务，当然你可以把这些任务分为若干个线程去执行，形成单进程多线程的浏览器架构。</p>\n<p>但是由于这些任务在现在操作系统中越来越复杂，例如把网络、存储、渲染这些任务放在一个线程中，执行效率和性能越来越低下（比如有一些网页的代码存在内存泄露，即便关闭这些网页线程，进程中的这块内存也无法被回收，除非关闭浏览器，否则越用越卡），且无法再向下拆分出类似线程的子空间，因为线程已经是最小的执行单位。</p>\n<p>因此，为了强化浏览器的各个复杂功能，出现了多进程架构的浏览器，可以将网络、存储、渲染、IO、插件这些复杂任务分配给一个个单独的进程，这样每个进程又能向下拆分出多个线程，极大程度上强化了浏览器。</p>\n<h3 id=\"理解Chrome的多进程架构\"><a href=\"#理解Chrome的多进程架构\" class=\"headerlink\" title=\"理解Chrome的多进程架构\"></a>理解Chrome的多进程架构</h3><p>Chrome也是基于多进程架构的现代浏览器，Chrome的主要进程组成如下：</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329211758826.png\" alt=\"image-20230329211758826\"></p>\n<ul>\n<li><p>Browser 进程：Tab之外的一切都有该进程处理。负责地址栏、书签栏、前进后退、网络请求、文件访问等；</p>\n</li>\n<li><p>Renderer 进程：负责一个 Tab 内所有和网页渲染有关的事情，是最核心的进程；</p>\n</li>\n<li><p>Plugin 进程：负责 Chrome 插件相关的任务；</p>\n</li>\n<li><p>GPU 进程：GPU进程与其他浏览器进程相隔离处理GPU任务，把浏览器的页面内容绘制到屏幕上；</p>\n<blockquote>\n<p>所有应用程序都要在OS的调度下基于CPU和GPU的计算才能运行。因为GPU要处理多个应用程序的的请求，浏览器的的GPU进程只是一个分量。GPU擅长处理图形，因此提供GPU计算的应用程序可以实现快速渲染和平滑交互。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329214757221.png\" alt=\"image-20230329214757221\"></p>\n<p>Chrome 的每一个Tab 选项卡都拥有自己的 Renderer 进程，有三个 Tab 就意味着有三个不同的 Renderer 进程这样可以保证多个 Tab 之间互不影响，即使其中一个 Tab 没有响应，也不影响其他 Tab 的正常执行。然而，由于进程是 OS 中拥有资源的独立单位，多个 Tab 之间的数据是非共享的，这也意味着多个 Tab 都会有相同的 V8引擎初始化数据，这意味着更多的内存使用。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329220338191.png\" alt=\"image-20230329220338191\"></p>\n<h3 id=\"了解-Browser-浏览器进程\"><a href=\"#了解-Browser-浏览器进程\" class=\"headerlink\" title=\"了解 Browser 浏览器进程\"></a>了解 Browser 浏览器进程</h3><p>简单来说，在浏览器中，Tab之外的一切都归浏览器进程所接管，它包含3个主要的线程：</p>\n<ul>\n<li>UI thread UI线程：负责绘制和管理浏览器的按钮和输入框区域。</li>\n<li>Network thread 网络线程：负责处理网络堆栈以从互联网接收数据</li>\n<li>Storage thread 存储线程：负责控制文件访问 </li>\n</ul>\n<p>而根据浏览器的优化策略，这三个线程往往会独立为三个进程。</p>\n<p>现在让我们来模拟一个在地址栏输入网址，并将网页呈现在浏览器上的过程</p>\n<ol>\n<li><p>用户在地址栏中键入字符串，UI 线程会识别该字符串是 URL 还是搜索关键词。</p>\n<blockquote>\n<p>Chrome中的地址既可以访问网页，同时又是个搜索框，这里假设我们输入的是 URL。</p>\n</blockquote>\n</li>\n<li><p>UI 线程通知网络线程开始进行导航，发起网络请求</p>\n</li>\n<li><p>读取响应数据，如果响应的是 HTML 文件，那么下一步会将该数据传递给渲染进程；但如果响应数据是一个压缩包或其它类型的文件，那么就意味着我们发送的是下载请求，所以需要把数据传递给下载管理器</p>\n</li>\n<li><p>UI线程负责找到渲染进程，通知它要进行网页渲染</p>\n</li>\n<li><p>此时数据和渲染进程都已经准备好，浏览器进程和渲染进程开启 IPC 传递数据，导航部分完成，你会发现tab由原网页台跳转到空白页面，然后开始边传输HTML 边进行网页渲染。</p>\n</li>\n</ol>\n<h3 id=\"了解最为重要的-Renderer-渲染进程\"><a href=\"#了解最为重要的-Renderer-渲染进程\" class=\"headerlink\" title=\"了解最为重要的 Renderer 渲染进程\"></a>了解最为重要的 Renderer 渲染进程</h3><p>渲染进程主要包括4个线程：</p>\n<ul>\n<li>Main thread 主线程：执行JS、下载资源、计算样式、进行布局、绘制合成</li>\n<li>Raster thread 光栅线程</li>\n<li>Compositor thread 合成线程</li>\n<li>Worker thread 工作者线程</li>\n</ul>\n<h4 id=\"主线程的功能\"><a href=\"#主线程的功能\" class=\"headerlink\" title=\"主线程的功能\"></a>主线程的功能</h4><ul>\n<li><p>执行 JS：主线程在遇到 <code>&lt;script&gt;</code> 标签时会阻塞HTML文档的解析，并必须先下载、解析和执行js代码，why？因为 js 可以用 <code>document.write()</code>之类的东西改变 DOM 结构。这就是为什么会暂停HTML的解析，并等待js代码执行完毕后才能恢复。</p>\n</li>\n<li><p>下载外部资源：如果HTML中由需要加载<strong>外部资源</strong>的标签，这在解析HTML构建DOM树之前会由<strong>预加载扫描线程</strong>检测到，并<strong>提前</strong>利用 Browser 线程的 Network 线程来下载<code>&lt;img/&gt;</code>、CSS和 JS的<code>&lt;link&gt;</code>等渲染DOM需要的外部资源文件，这减少了解析 HTML 的阻塞时间</p>\n</li>\n<li><p>解析HTML：由 HTML<strong>解析器</strong>解析 HTML 内容，首先由<strong>分词器</strong>检测出各个标签名，我们称他们为token，然后利用token栈和括号匹配算法，构建出DOM树。同时会根据外部、内部和内联 CSS 样式计算得到 CSSOM 树。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/htmlDOM.png\" alt=\"根据html文档生成DOM树\"></p>\n</li>\n<li><p>计算CSS样式：主线程根据 CSSOM 树进行CSS属性值的计算，并将计算后的样式添加到DOM树的对应DOM节点上。</p>\n<blockquote>\n<p>:boat: 计算（最终）样式（computed style）:是把继承、层叠关系理清，并且把所有CSS属性都赋值之后的CSS样式。</p>\n<p>:warning:HTML本质上只是提供了<strong>语义化的标签</strong>。为何div、p标签是块盒，而span标签却是行盒？根本原因是浏览器的源码中，设置了<strong>浏览器默认样式</strong>，而这些标签分别被设置为了<code>display:block </code>和 <code>display:inline</code></p>\n</blockquote>\n</li>\n<li><p>确定<strong>布局</strong>结构<em>Layout</em>：只有DOM节点和和它的样式可不够，还需要确定他们之间的布局关系，并构建与DOM树类似的<strong>布局树</strong>，比如在页面上的位置、盒子的尺寸大小的信息</p>\n<blockquote>\n<p>:label:布局树通常情况下与DOM树结构并不相同。由于布局树只考虑存在位置和尺寸这样的<strong>几何信息</strong>的DOM元素，所以<code>display:none</code>的DOM元素在构建布局树时是不被考虑的，类似的，还有一些伪元素，匿名行盒，匿名块盒…..</p>\n<p>:man_teacher: W3C规定：标签的文本必须被包含在行盒中；行盒和块盒不能相邻。因此用匿名行盒和匿名块盒来适应这个规定</p>\n</blockquote>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/_20230411173336.png\" alt=\"微信截图_20230411173336\"></p>\n</li>\n<li><p><strong>分层</strong>（Layer）：主线程会使用一套复杂的策略对整个布局树中进行分层。分层的好处在于，将来某一个层发生改变后，仅会对该层进行后续处理，从而提升效率</p>\n<blockquote>\n<p>滚动条、层叠上下文（z-index）、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结构。</p>\n<p>分层不是越多越好，层数太多会导致占用大量的内存空间，因为浏览器会根据内存和效率权衡分层的数量。</p>\n</blockquote>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230329230708934.png\" alt=\"image-20230329230708934\"></p>\n</li>\n<li><p><strong>计算绘制指令集</strong>（paint）：主线程会为每个层单独产生绘制指令集，用于描述这个层的内容该如何一步步地画出来。完成此步后，主线程将绘制指令集交付给合成线程</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/_20230411174231.png\" alt=\"微信截图_20230411174231\"></p>\n</li>\n</ul>\n<h4 id=\"合成器线程\"><a href=\"#合成器线程\" class=\"headerlink\" title=\"合成器线程\"></a>合成器线程</h4><p>​    一旦确定了<strong>绘制指令集</strong>，主线程就会将该信息提交给合成器线程。然后，合成线程将对每个层进行分块并光栅化。一个层可以比视口要大，所以合成器线程将它们划分为瓦片（图块），并将每个瓦片发送到GPU进程，完成光栅化，并且在这个过程中优先光栅化靠近视口的区域，紧接着再去光栅化页面的其他区域。（tiling和raster）</p>\n<blockquote>\n<p>将这些信息转换为屏幕上的像素称为光栅化</p>\n</blockquote>\n<p>​    光栅化完成后，GPU进程将生成的位图交回给合成线程，合成线程收到每个层、每个块的位图之后，生成一个个的指引（quad）信息。指引信息会表示出每个位图应该滑到屏幕的那个位置，以及会考虑到旋转、缩放等变形。然后合成线程将 quad 提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。（draw）</p>\n<blockquote>\n<p>由于变形操作是在合成线程中执行的，与渲染主线程无关，这就是  transform 效率高的原因</p>\n</blockquote>\n<ul>\n<li>浏览器滚动时，合成线程会创建一个新的合成帧发送给 GPU，以显示到屏幕上，所以即便主线程卡死，也不影响页面滚动。</li>\n<li>合成线程工作与主线程无关，不用等待样式计算和 js 的执行，因此合成线程相关的动画比涉及到主线程重新计算样式和执行 js 的动画更加流畅</li>\n</ul>\n<h4 id=\"浏览器的渲染过程流程图\"><a href=\"#浏览器的渲染过程流程图\" class=\"headerlink\" title=\"浏览器的渲染过程流程图\"></a>浏览器的渲染过程流程图</h4><p><img src=\"http://182.44.49.100:34/images/2023/05/06/3787d04fe1672d3115116a6d2125f964.png\" alt=\"渲染流程图\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://developer.chrome.com/blog/inside-browser-part1/\">Inside look at modern web browser (part 1)</a></p>\n<p><a href=\"https://juejin.cn/post/6844904193367474184\">浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务</a></p>\n<p><a href=\"https://developer.chrome.com/blog/inside-browser-part2/\">Inside look at modern web browser (part 2)</a></p>\n<p><a href=\"https://developer.chrome.com/blog/inside-browser-part3/\">Inside look at modern web browser (part 3)</a></p>\n"},{"title":"事件循环和消息队列(三)","date":"2023-05-05T08:43:55.000Z","banner_img":"http://182.44.49.100:34/images/2023/05/06/createBlog.png","comment":true,"_content":"\n# 面试题\n\n## 浏览器是如何渲染页面的？\n\n当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。\n\n在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。\n\n-------\n\n整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画\n\n每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。\n\n这样，整个渲染流程就形成了一套组织严密的生产流水线。\n\n-------\n\n渲染的第一步是**解析 HTML**。\n\n解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。\n\n如果主线程解析到`link`位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。\n\n如果主线程解析到`script`位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。\n\n第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。\n\n-------\n\n渲染的下一步是**样式计算**。\n\n主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。\n\n在这一过程中，很多预设值会变成绝对值，比如`red`会变成`rgb(255,0,0)`；相对单位会变成绝对单位，比如`em`会变成`px`\n\n这一步完成后，会得到一棵带有样式的 DOM 树。\n\n--------\n\n接下来是**布局**，布局完成后会得到布局树。\n\n布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。\n\n大部分时候，DOM 树和布局树并非一一对应。\n\n比如`display:none`的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。\n\n-----------\n\n下一步是**分层**\n\n主线程会使用一套复杂的策略对整个布局树中进行分层。\n\n分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。\n\n滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过`will-change`属性更大程度的影响分层结果。\n\n---------\n\n再下一步是**绘制**\n\n主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。\n\n------\n\n完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。\n\n合成线程首先对每个图层进行分块，将其划分为更多的小区域。\n\n它会从线程池中拿取多个线程来完成分块工作。\n\n----\n\n分块完成后，进入**光栅化**阶段。\n\n合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。\n\nGPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。\n\n光栅化的结果，就是一块一块的位图\n\n---------\n\n最后一个阶段就是**画**了\n\n合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。\n\n指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。\n\n变形发生在合成线程，与渲染主线程无关，这就是`transform`效率高的本质原因。\n\n合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。\n\n## 什么是 reflow？\n\nreflow 的本质就是重新计算 layout 树。\n\n当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。\n\n为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。\n\n也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。\n\n浏览器在反复权衡下，最终决定获取属性立即 reflow。\n\n## 什么是 repaint？\n\nrepaint 的本质就是重新根据分层信息计算了绘制指令。\n\n当改动了可见样式后，就需要重新计算，会引发 repaint。\n\n由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。\n\n## 为什么 transform 的效率高？\n\n因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段\n\n由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。\n\n## 如何理解 JS 的异步？\n\nJS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。\n\n而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。\n\n如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。\n\n所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。\n\n在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。\n\n> 何为异步？\n>\n> 代码在执行过程中，会遇到一些无法立即处理的任务，比如：\n>\n> - 计时完成后需要执行的任务 —— `setTimeout`、`setInterval`  （交给计时线程去计时）\n> - 网络通信完成后需要执行的任务 -- `XHR`、`Fetch `  （交给网络进程去请求）\n> - 用户操作后需要执行的任务 -- `addEventListener`   （交给交互线程去时时刻刻地监听事件）\n>\n> 如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」\n>\n> **渲染主线程承担着极其重要的工作，无论如何都不能阻塞！**因此，浏览器选择**异步**来解决这个问题\n\n## JS 为何会阻碍渲染？\n\nJS 代码和渲染任务都在主线程中执行，如果当前任务中的 JS 代码发生阻塞，那么任务队列中的渲染任务就被阻碍了。\n\n## 任务有优先级吗？\n\n任务没有优先级，在消息队列中先进先出\n\n但**消息队列是有优先级的**\n\n根据 W3C 的最新解释:\n\n- 每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。\n  在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。\n- 浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行\n  https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\n\n> 随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法\n\n在目前 chrome 的实现中，至少包含了下面的队列：\n\n- 延时队列：用于存放计时器到达后的回调任务，优先级「中」\n- 交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」\n- 微队列：用户存放需要最快执行的任务，优先级「最高」\n\n## 阐述一下 JS 的事件循环？\n\n事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。\n\n在 Chrome 的源码中，渲染主线程的最开始会开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。\n\n过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。\n\n根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。\n\n## JS 中的计时器能做到精准计时吗？\n\n不行，因为：\n\n1. 计算机硬件没有原子钟，无法做到精确计时\n2. 操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差\n3. 按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差\n4. 受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差\n","source":"_posts/broswerQuestions.md","raw":"---\ntitle: 事件循环和消息队列(三)\ndate: 2023-05-05 16:43:55\ntags: [浏览器原理,事件循环]\ncategories: [面试题]\nbanner_img: http://182.44.49.100:34/images/2023/05/06/createBlog.png\ncomment: true\n---\n\n# 面试题\n\n## 浏览器是如何渲染页面的？\n\n当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。\n\n在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。\n\n-------\n\n整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画\n\n每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。\n\n这样，整个渲染流程就形成了一套组织严密的生产流水线。\n\n-------\n\n渲染的第一步是**解析 HTML**。\n\n解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。\n\n如果主线程解析到`link`位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。\n\n如果主线程解析到`script`位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。\n\n第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。\n\n-------\n\n渲染的下一步是**样式计算**。\n\n主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。\n\n在这一过程中，很多预设值会变成绝对值，比如`red`会变成`rgb(255,0,0)`；相对单位会变成绝对单位，比如`em`会变成`px`\n\n这一步完成后，会得到一棵带有样式的 DOM 树。\n\n--------\n\n接下来是**布局**，布局完成后会得到布局树。\n\n布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。\n\n大部分时候，DOM 树和布局树并非一一对应。\n\n比如`display:none`的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。\n\n-----------\n\n下一步是**分层**\n\n主线程会使用一套复杂的策略对整个布局树中进行分层。\n\n分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。\n\n滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过`will-change`属性更大程度的影响分层结果。\n\n---------\n\n再下一步是**绘制**\n\n主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。\n\n------\n\n完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。\n\n合成线程首先对每个图层进行分块，将其划分为更多的小区域。\n\n它会从线程池中拿取多个线程来完成分块工作。\n\n----\n\n分块完成后，进入**光栅化**阶段。\n\n合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。\n\nGPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。\n\n光栅化的结果，就是一块一块的位图\n\n---------\n\n最后一个阶段就是**画**了\n\n合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。\n\n指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。\n\n变形发生在合成线程，与渲染主线程无关，这就是`transform`效率高的本质原因。\n\n合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。\n\n## 什么是 reflow？\n\nreflow 的本质就是重新计算 layout 树。\n\n当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。\n\n为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。\n\n也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。\n\n浏览器在反复权衡下，最终决定获取属性立即 reflow。\n\n## 什么是 repaint？\n\nrepaint 的本质就是重新根据分层信息计算了绘制指令。\n\n当改动了可见样式后，就需要重新计算，会引发 repaint。\n\n由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。\n\n## 为什么 transform 的效率高？\n\n因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段\n\n由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。\n\n## 如何理解 JS 的异步？\n\nJS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。\n\n而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。\n\n如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。\n\n所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。\n\n在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。\n\n> 何为异步？\n>\n> 代码在执行过程中，会遇到一些无法立即处理的任务，比如：\n>\n> - 计时完成后需要执行的任务 —— `setTimeout`、`setInterval`  （交给计时线程去计时）\n> - 网络通信完成后需要执行的任务 -- `XHR`、`Fetch `  （交给网络进程去请求）\n> - 用户操作后需要执行的任务 -- `addEventListener`   （交给交互线程去时时刻刻地监听事件）\n>\n> 如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」\n>\n> **渲染主线程承担着极其重要的工作，无论如何都不能阻塞！**因此，浏览器选择**异步**来解决这个问题\n\n## JS 为何会阻碍渲染？\n\nJS 代码和渲染任务都在主线程中执行，如果当前任务中的 JS 代码发生阻塞，那么任务队列中的渲染任务就被阻碍了。\n\n## 任务有优先级吗？\n\n任务没有优先级，在消息队列中先进先出\n\n但**消息队列是有优先级的**\n\n根据 W3C 的最新解释:\n\n- 每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。\n  在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。\n- 浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行\n  https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\n\n> 随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法\n\n在目前 chrome 的实现中，至少包含了下面的队列：\n\n- 延时队列：用于存放计时器到达后的回调任务，优先级「中」\n- 交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」\n- 微队列：用户存放需要最快执行的任务，优先级「最高」\n\n## 阐述一下 JS 的事件循环？\n\n事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。\n\n在 Chrome 的源码中，渲染主线程的最开始会开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。\n\n过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。\n\n根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。\n\n## JS 中的计时器能做到精准计时吗？\n\n不行，因为：\n\n1. 计算机硬件没有原子钟，无法做到精确计时\n2. 操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差\n3. 按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差\n4. 受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差\n","slug":"broswerQuestions","published":1,"updated":"2023-05-07T10:02:56.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0x600030kv369bb8xjh","content":"<h1 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h1><h2 id=\"浏览器是如何渲染页面的？\"><a href=\"#浏览器是如何渲染页面的？\" class=\"headerlink\" title=\"浏览器是如何渲染页面的？\"></a>浏览器是如何渲染页面的？</h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p>\n<p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p>\n<hr>\n<p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画</p>\n<p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p>\n<p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p>\n<hr>\n<p>渲染的第一步是<strong>解析 HTML</strong>。</p>\n<p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</p>\n<p>如果主线程解析到<code>link</code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p>\n<p>如果主线程解析到<code>script</code>位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p>\n<p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p>\n<hr>\n<p>渲染的下一步是<strong>样式计算</strong>。</p>\n<p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</p>\n<p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code></p>\n<p>这一步完成后，会得到一棵带有样式的 DOM 树。</p>\n<hr>\n<p>接下来是<strong>布局</strong>，布局完成后会得到布局树。</p>\n<p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p>\n<p>大部分时候，DOM 树和布局树并非一一对应。</p>\n<p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p>\n<hr>\n<p>下一步是<strong>分层</strong></p>\n<p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p>\n<p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p>\n<p>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p>\n<hr>\n<p>再下一步是<strong>绘制</strong></p>\n<p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p>\n<hr>\n<p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p>\n<p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p>\n<p>它会从线程池中拿取多个线程来完成分块工作。</p>\n<hr>\n<p>分块完成后，进入<strong>光栅化</strong>阶段。</p>\n<p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p>\n<p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p>\n<p>光栅化的结果，就是一块一块的位图</p>\n<hr>\n<p>最后一个阶段就是<strong>画</strong>了</p>\n<p>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。</p>\n<p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p>\n<p>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因。</p>\n<p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p>\n<h2 id=\"什么是-reflow？\"><a href=\"#什么是-reflow？\" class=\"headerlink\" title=\"什么是 reflow？\"></a>什么是 reflow？</h2><p>reflow 的本质就是重新计算 layout 树。</p>\n<p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</p>\n<p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</p>\n<p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p>\n<p>浏览器在反复权衡下，最终决定获取属性立即 reflow。</p>\n<h2 id=\"什么是-repaint？\"><a href=\"#什么是-repaint？\" class=\"headerlink\" title=\"什么是 repaint？\"></a>什么是 repaint？</h2><p>repaint 的本质就是重新根据分层信息计算了绘制指令。</p>\n<p>当改动了可见样式后，就需要重新计算，会引发 repaint。</p>\n<p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p>\n<h2 id=\"为什么-transform-的效率高？\"><a href=\"#为什么-transform-的效率高？\" class=\"headerlink\" title=\"为什么 transform 的效率高？\"></a>为什么 transform 的效率高？</h2><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</p>\n<p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>\n<h2 id=\"如何理解-JS-的异步？\"><a href=\"#如何理解-JS-的异步？\" class=\"headerlink\" title=\"如何理解 JS 的异步？\"></a>如何理解 JS 的异步？</h2><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p>\n<p>而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。</p>\n<p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p>\n<p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p>\n<p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p>\n<blockquote>\n<p>何为异步？</p>\n<p>代码在执行过程中，会遇到一些无法立即处理的任务，比如：</p>\n<ul>\n<li>计时完成后需要执行的任务 —— <code>setTimeout</code>、<code>setInterval</code>  （交给计时线程去计时）</li>\n<li>网络通信完成后需要执行的任务 – <code>XHR</code>、<code>Fetch </code>  （交给网络进程去请求）</li>\n<li>用户操作后需要执行的任务 – <code>addEventListener</code>   （交给交互线程去时时刻刻地监听事件）</li>\n</ul>\n<p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」</p>\n<p><strong>渲染主线程承担着极其重要的工作，无论如何都不能阻塞！</strong>因此，浏览器选择<strong>异步</strong>来解决这个问题</p>\n</blockquote>\n<h2 id=\"JS-为何会阻碍渲染？\"><a href=\"#JS-为何会阻碍渲染？\" class=\"headerlink\" title=\"JS 为何会阻碍渲染？\"></a>JS 为何会阻碍渲染？</h2><p>JS 代码和渲染任务都在主线程中执行，如果当前任务中的 JS 代码发生阻塞，那么任务队列中的渲染任务就被阻碍了。</p>\n<h2 id=\"任务有优先级吗？\"><a href=\"#任务有优先级吗？\" class=\"headerlink\" title=\"任务有优先级吗？\"></a>任务有优先级吗？</h2><p>任务没有优先级，在消息队列中先进先出</p>\n<p>但<strong>消息队列是有优先级的</strong></p>\n<p>根据 W3C 的最新解释:</p>\n<ul>\n<li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。<br>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li>\n<li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行<br><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\">https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint</a></li>\n</ul>\n<blockquote>\n<p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p>\n</blockquote>\n<p>在目前 chrome 的实现中，至少包含了下面的队列：</p>\n<ul>\n<li>延时队列：用于存放计时器到达后的回调任务，优先级「中」</li>\n<li>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</li>\n<li>微队列：用户存放需要最快执行的任务，优先级「最高」</li>\n</ul>\n<h2 id=\"阐述一下-JS-的事件循环？\"><a href=\"#阐述一下-JS-的事件循环？\" class=\"headerlink\" title=\"阐述一下 JS 的事件循环？\"></a>阐述一下 JS 的事件循环？</h2><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p>\n<p>在 Chrome 的源码中，渲染主线程的最开始会开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p>\n<p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p>\n<p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p>\n<h2 id=\"JS-中的计时器能做到精准计时吗？\"><a href=\"#JS-中的计时器能做到精准计时吗？\" class=\"headerlink\" title=\"JS 中的计时器能做到精准计时吗？\"></a>JS 中的计时器能做到精准计时吗？</h2><p>不行，因为：</p>\n<ol>\n<li>计算机硬件没有原子钟，无法做到精确计时</li>\n<li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li>\n<li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差</li>\n<li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li>\n</ol>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<h1 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h1><h2 id=\"浏览器是如何渲染页面的？\"><a href=\"#浏览器是如何渲染页面的？\" class=\"headerlink\" title=\"浏览器是如何渲染页面的？\"></a>浏览器是如何渲染页面的？</h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p>\n<p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p>\n<hr>\n<p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画</p>\n<p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p>\n<p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p>\n<hr>\n<p>渲染的第一步是<strong>解析 HTML</strong>。</p>\n<p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</p>\n<p>如果主线程解析到<code>link</code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p>\n<p>如果主线程解析到<code>script</code>位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p>\n<p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p>\n<hr>\n<p>渲染的下一步是<strong>样式计算</strong>。</p>\n<p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</p>\n<p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code></p>\n<p>这一步完成后，会得到一棵带有样式的 DOM 树。</p>\n<hr>\n<p>接下来是<strong>布局</strong>，布局完成后会得到布局树。</p>\n<p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p>\n<p>大部分时候，DOM 树和布局树并非一一对应。</p>\n<p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p>\n<hr>\n<p>下一步是<strong>分层</strong></p>\n<p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p>\n<p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p>\n<p>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p>\n<hr>\n<p>再下一步是<strong>绘制</strong></p>\n<p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p>\n<hr>\n<p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p>\n<p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p>\n<p>它会从线程池中拿取多个线程来完成分块工作。</p>\n<hr>\n<p>分块完成后，进入<strong>光栅化</strong>阶段。</p>\n<p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p>\n<p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p>\n<p>光栅化的结果，就是一块一块的位图</p>\n<hr>\n<p>最后一个阶段就是<strong>画</strong>了</p>\n<p>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。</p>\n<p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p>\n<p>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因。</p>\n<p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p>\n<h2 id=\"什么是-reflow？\"><a href=\"#什么是-reflow？\" class=\"headerlink\" title=\"什么是 reflow？\"></a>什么是 reflow？</h2><p>reflow 的本质就是重新计算 layout 树。</p>\n<p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</p>\n<p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</p>\n<p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p>\n<p>浏览器在反复权衡下，最终决定获取属性立即 reflow。</p>\n<h2 id=\"什么是-repaint？\"><a href=\"#什么是-repaint？\" class=\"headerlink\" title=\"什么是 repaint？\"></a>什么是 repaint？</h2><p>repaint 的本质就是重新根据分层信息计算了绘制指令。</p>\n<p>当改动了可见样式后，就需要重新计算，会引发 repaint。</p>\n<p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p>\n<h2 id=\"为什么-transform-的效率高？\"><a href=\"#为什么-transform-的效率高？\" class=\"headerlink\" title=\"为什么 transform 的效率高？\"></a>为什么 transform 的效率高？</h2><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</p>\n<p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>\n<h2 id=\"如何理解-JS-的异步？\"><a href=\"#如何理解-JS-的异步？\" class=\"headerlink\" title=\"如何理解 JS 的异步？\"></a>如何理解 JS 的异步？</h2><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p>\n<p>而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。</p>\n<p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p>\n<p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p>\n<p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p>\n<blockquote>\n<p>何为异步？</p>\n<p>代码在执行过程中，会遇到一些无法立即处理的任务，比如：</p>\n<ul>\n<li>计时完成后需要执行的任务 —— <code>setTimeout</code>、<code>setInterval</code>  （交给计时线程去计时）</li>\n<li>网络通信完成后需要执行的任务 – <code>XHR</code>、<code>Fetch </code>  （交给网络进程去请求）</li>\n<li>用户操作后需要执行的任务 – <code>addEventListener</code>   （交给交互线程去时时刻刻地监听事件）</li>\n</ul>\n<p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」</p>\n<p><strong>渲染主线程承担着极其重要的工作，无论如何都不能阻塞！</strong>因此，浏览器选择<strong>异步</strong>来解决这个问题</p>\n</blockquote>\n<h2 id=\"JS-为何会阻碍渲染？\"><a href=\"#JS-为何会阻碍渲染？\" class=\"headerlink\" title=\"JS 为何会阻碍渲染？\"></a>JS 为何会阻碍渲染？</h2><p>JS 代码和渲染任务都在主线程中执行，如果当前任务中的 JS 代码发生阻塞，那么任务队列中的渲染任务就被阻碍了。</p>\n<h2 id=\"任务有优先级吗？\"><a href=\"#任务有优先级吗？\" class=\"headerlink\" title=\"任务有优先级吗？\"></a>任务有优先级吗？</h2><p>任务没有优先级，在消息队列中先进先出</p>\n<p>但<strong>消息队列是有优先级的</strong></p>\n<p>根据 W3C 的最新解释:</p>\n<ul>\n<li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。<br>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li>\n<li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行<br><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\">https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint</a></li>\n</ul>\n<blockquote>\n<p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p>\n</blockquote>\n<p>在目前 chrome 的实现中，至少包含了下面的队列：</p>\n<ul>\n<li>延时队列：用于存放计时器到达后的回调任务，优先级「中」</li>\n<li>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</li>\n<li>微队列：用户存放需要最快执行的任务，优先级「最高」</li>\n</ul>\n<h2 id=\"阐述一下-JS-的事件循环？\"><a href=\"#阐述一下-JS-的事件循环？\" class=\"headerlink\" title=\"阐述一下 JS 的事件循环？\"></a>阐述一下 JS 的事件循环？</h2><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p>\n<p>在 Chrome 的源码中，渲染主线程的最开始会开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p>\n<p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p>\n<p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p>\n<h2 id=\"JS-中的计时器能做到精准计时吗？\"><a href=\"#JS-中的计时器能做到精准计时吗？\" class=\"headerlink\" title=\"JS 中的计时器能做到精准计时吗？\"></a>JS 中的计时器能做到精准计时吗？</h2><p>不行，因为：</p>\n<ol>\n<li>计算机硬件没有原子钟，无法做到精确计时</li>\n<li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li>\n<li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差</li>\n<li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li>\n</ol>\n"},{"title":"从0开始在云服务器上搭建Hexo博客","date":"2023-03-20T15:23:01.000Z","index_img":"http://182.44.49.100:34/images/2023/05/06/createBlog.png","banner_img":"http://182.44.49.100:34/images/2023/05/06/createBlog.png","comment":true,"_content":"\n### 前言\n\n​\t本来博客是用wordpress在服务器搭建的，但苦于wordpress的后端语言是php，对markdown的支持也不尽如人意，最终还是放弃了wordpress，转战后端为Node的Hexo框架。\n\n​\t**整体思路：**\n\n1. 在服务器上配置Git环境，创建Git仓库\n2. 在主机安装Hexo，并生成Hexo静态文件，通过与服务器链接，将静态文件推送到服务器上的Git仓库\n3. 通过Git-hooks，即Git钩子，实现将服务器Git仓库的文件自动部署到网页资源目录\n4. 将Nginx作为静态文件服务器，实现外界对网页资源目录的访问。\n\n​\t**本文的配置环境为**\n\n + 天翼云服务器：[宝塔](https://www.bt.cn/new/index.html)面板，一键安装nginx\n\n   > 没有宝塔可以用ssh链接服务器，敲命令行也是一样的`yum install nginx`\n\n + 本地主机：Git、Node.js、Hexo\n\n   > Hexo安装：`npm install hexp -g ` 。`-g`意为全局安装。\n   >\n   > 如果第一次安装node，请注意配置环境变量，否则会出现`hexo不是内部或外部命令`的问题。\n\n### 1. 在服务器安装Git\n\n​\t不管是宝塔提供的终端，还是Xshell的命令行都可以，安装命令`yum install git`。\n\n> 安装git可能会出现这样的报错信息\n>\n> Loaded plugins: fastestmirror, langpacks\n>\n> Loading mirror speeds from cached hostfile\n>\n> No package yum-util available.\n>\n> Error: Nothing to do\n>\n> 解决方法可参考：[安装docker时，遇到Loaded plugins...怎么办](https://blog.csdn.net/weixin_51225684/article/details/128040380)\n\n### 2.在宝塔面板添加站点\n\n​\t由于天翼云服务器在域名没有备案的情况下不开放80端口，所以手动设置一个空闲的32端口用于访问网页。\n\n\n\n![image-20230320213201932](http://182.44.49.100:34/images/2023/05/06/image-20230320213201932.png)\n\n​\t将网站目录设置为如下（自定义即可）\n\n\n\n![image-20230320213344566](http://182.44.49.100:34/images/2023/05/06/image-20230320213344566.png)\n\n### 3.对服务器的Git进行搭建\n\n#### 1. 添加一个git用户\n\n```shell\nadduser git       # 添加git用户\nchmod 740 /etc/sudoers    #改变sudoers文件的权限为文件所有者可写\nvim /etc/sudoers\n#在root ALL=(ALL) ALL下方添加一行,按esc,再按:wq退出编辑\ngit ALL=(ALL) ALL\nchmod 400 /etc/sudoers #将sudoers文件的权限改回文件所有者可读\n\nsudo passwd git   #设置服务器的git密码，用于git连接。输入时看不到任何显示，输入完成回车即可\n```\n\n#### 2. 给服务器和主机的Git配置SSH密钥\n\n​\t\t如果**主机**已有ssh密钥则跳过这一步，直接到`C:\\Users\\你的用户名\\.ssh`中找到`id_rsa.pub`。如果没有，按照如下步骤生成密钥：\n\n```sh\ngit config --global user.name \"你要设置的名字\"\ngit config --global user.email \"你要设置的邮箱\"\nssh-keygen -t rsa -C \"你刚刚设置的邮箱\"\n```\n\n​\t\t此时**主机**的git密钥已生成，存放在上述`id_rsa.pub`文件中。接着，打开宝塔的文件管理系统，在**服务器**的`/home/git`中新建`.ssh`文件夹，并在其中新建`authorized_keys`文件。将**主机**的`id_rsa.pub`中的内容复制到该新建文件中。\n\n\n\n![image-20230320211205195](http://182.44.49.100:34/images/2023/05/06/image-20230320211205195.png)\n\n​\t\t通过配置ssh密钥，主机和服务器的git连接时将不再需要密码，简化了操作。\n\n#### 3.在服务器中创建一个新的Git仓库\n\n```sh\ncd /home/git\ngit init --bare hexoblog.git  #在/home/git下初始化一个名为hexoblog的仓库\n```\n\n#### 4. 配置钩子实现自动部署\n\n​\t找到`/home/git/hexoblog.git/hooks`下的`post-receive`文件，如果没有则新建一个该文件，将其内容改为\n\n``` sh\n#!/bin/sh\ngit --work-tree=/home/www/mongobin --git-dir=/home/git/hexoblog.git checkout -f\n\n```\n\n​\t以上内容是一条命令，前者为网页资源目录，后者为git仓库。意为当主机将静态文件推给服务器的git仓库后，服务器能够自动将文件部署到网页资源目录。\n\n​\t**然后设置网页资源目录的IO权限，否则git没有权限修改网页资源目录的内容，无法实现自动部署！！！**\n\n``` sh\nsudo chmod +x /home/git/hexoblog.git/hooks/pre-receive  #赋予其可执行权限\nsudo chown -R git:git /home/git/ #仓库目录的所有者改为git\nsudo chown -R git:git /home/www/ #站点文件夹所有者改为git\n```\n\n### 4. 主机配置与测试\n\n#### 1. 在主机初始化博客文件夹并测试本地demo\n\n​\t执行以下命令在文件夹中创建一个新的博客文件夹（官方demo）。\n\n```sh\ncd D:\\JaBinsProjects\\mongobin\nhexo init\n```\n\n**然后安装两个插件，用于部署，否则会报错！**\n\n``` sh\nnpm install hexo-deployer-git --save\nnpm install hexo-server\n```\n\n​\t执行以下命令即可在本机上查看自己的博客了，地址为<localhost:4000>\n\n``` \nhexo g\nhexo s\n```\n\n\n\n![image-20230320215235929](http://182.44.49.100:34/images/2023/05/06/image-20230320215235929.png)\n\n#### 2.配置本地博客与服务器git的连接\n\n​\t在刚才生成的博客文件夹根目录中找到并打开`_config.yml`文件，把最下面的depoly处改为如下内容，目的是与服务器git仓库建立连接。\n\n![image-20230320220031029](http://182.44.49.100:34/images/2023/05/06/image-20230320220031029.png)\n\n​\t**注意：**\n\n+ type, repo, branch缩进2格\n+ 冒号与其后面的内容必须有一空格\n+ branch为master和main均可\n\n#### 3. 测试连接和自动部署是否生效\n\ncd到**博客的文件夹下执行**以下命令\n\n``` sh\nhexo new \"Hello My First Blog\"\nhexo clean && hexo generate --deploy\n```\n\n也可以在`package.json`中添加`npm`脚本，简化操作，这样可以直接用`npm run dd`部署博客网页\n\n``` json\n\"scripts\": {\n    \"build\": \"hexo generate\",   // 重新生成静态页面文件\n    \"clean\": \"hexo clean\",    // 清除缓存\n    \"deploy\": \"hexo deploy\",   // 将静态页面文件部署到服务器\n\t\"dd\": \"hexo clean && hexo g -d\",\n    \"server\": \"hexo server\",\n\t\"ss\": \"hexo clean && hexo g && hexo s\"\n  },\n\n```\n\n然后输入域名`www.mongobin.top:32`看博客是否更新了一篇文章。\n\n### 5.最后\n\n​\t完成部署后可以去[Hexo](https://hexo.io/themes/)主题下载自己喜欢的主题，美化博客。现在去本地主机浏览器上输入域名或者公网IP，访问你的博客吧！\n样例博客：[唐志远の博客](https://tzy1997.com/)\n\n### 参考文章\n\n+ [将Hexo部署到云服务器（使用宝塔面板）](https://blog.csdn.net/qq_43219561/article/details/116719535)\n\n+ [基于云服务器的hexo博客搭建（稳）](https://blog.csdn.net/weixin_56301399/article/details/129270887)\n\n+ [Hexo博客部署至服务器](https://blog.csdn.net/u013190417/article/details/122694959)\n\n  \n","source":"_posts/createBlog.md","raw":"---\ntitle: 从0开始在云服务器上搭建Hexo博客\ndate: 2023-03-20 23:23:01\ntags: [Hexo,云服务器, Git]\ncategories: [Hexo博客]\nindex_img: http://182.44.49.100:34/images/2023/05/06/createBlog.png\nbanner_img: http://182.44.49.100:34/images/2023/05/06/createBlog.png\ncomment: true\n---\n\n### 前言\n\n​\t本来博客是用wordpress在服务器搭建的，但苦于wordpress的后端语言是php，对markdown的支持也不尽如人意，最终还是放弃了wordpress，转战后端为Node的Hexo框架。\n\n​\t**整体思路：**\n\n1. 在服务器上配置Git环境，创建Git仓库\n2. 在主机安装Hexo，并生成Hexo静态文件，通过与服务器链接，将静态文件推送到服务器上的Git仓库\n3. 通过Git-hooks，即Git钩子，实现将服务器Git仓库的文件自动部署到网页资源目录\n4. 将Nginx作为静态文件服务器，实现外界对网页资源目录的访问。\n\n​\t**本文的配置环境为**\n\n + 天翼云服务器：[宝塔](https://www.bt.cn/new/index.html)面板，一键安装nginx\n\n   > 没有宝塔可以用ssh链接服务器，敲命令行也是一样的`yum install nginx`\n\n + 本地主机：Git、Node.js、Hexo\n\n   > Hexo安装：`npm install hexp -g ` 。`-g`意为全局安装。\n   >\n   > 如果第一次安装node，请注意配置环境变量，否则会出现`hexo不是内部或外部命令`的问题。\n\n### 1. 在服务器安装Git\n\n​\t不管是宝塔提供的终端，还是Xshell的命令行都可以，安装命令`yum install git`。\n\n> 安装git可能会出现这样的报错信息\n>\n> Loaded plugins: fastestmirror, langpacks\n>\n> Loading mirror speeds from cached hostfile\n>\n> No package yum-util available.\n>\n> Error: Nothing to do\n>\n> 解决方法可参考：[安装docker时，遇到Loaded plugins...怎么办](https://blog.csdn.net/weixin_51225684/article/details/128040380)\n\n### 2.在宝塔面板添加站点\n\n​\t由于天翼云服务器在域名没有备案的情况下不开放80端口，所以手动设置一个空闲的32端口用于访问网页。\n\n\n\n![image-20230320213201932](http://182.44.49.100:34/images/2023/05/06/image-20230320213201932.png)\n\n​\t将网站目录设置为如下（自定义即可）\n\n\n\n![image-20230320213344566](http://182.44.49.100:34/images/2023/05/06/image-20230320213344566.png)\n\n### 3.对服务器的Git进行搭建\n\n#### 1. 添加一个git用户\n\n```shell\nadduser git       # 添加git用户\nchmod 740 /etc/sudoers    #改变sudoers文件的权限为文件所有者可写\nvim /etc/sudoers\n#在root ALL=(ALL) ALL下方添加一行,按esc,再按:wq退出编辑\ngit ALL=(ALL) ALL\nchmod 400 /etc/sudoers #将sudoers文件的权限改回文件所有者可读\n\nsudo passwd git   #设置服务器的git密码，用于git连接。输入时看不到任何显示，输入完成回车即可\n```\n\n#### 2. 给服务器和主机的Git配置SSH密钥\n\n​\t\t如果**主机**已有ssh密钥则跳过这一步，直接到`C:\\Users\\你的用户名\\.ssh`中找到`id_rsa.pub`。如果没有，按照如下步骤生成密钥：\n\n```sh\ngit config --global user.name \"你要设置的名字\"\ngit config --global user.email \"你要设置的邮箱\"\nssh-keygen -t rsa -C \"你刚刚设置的邮箱\"\n```\n\n​\t\t此时**主机**的git密钥已生成，存放在上述`id_rsa.pub`文件中。接着，打开宝塔的文件管理系统，在**服务器**的`/home/git`中新建`.ssh`文件夹，并在其中新建`authorized_keys`文件。将**主机**的`id_rsa.pub`中的内容复制到该新建文件中。\n\n\n\n![image-20230320211205195](http://182.44.49.100:34/images/2023/05/06/image-20230320211205195.png)\n\n​\t\t通过配置ssh密钥，主机和服务器的git连接时将不再需要密码，简化了操作。\n\n#### 3.在服务器中创建一个新的Git仓库\n\n```sh\ncd /home/git\ngit init --bare hexoblog.git  #在/home/git下初始化一个名为hexoblog的仓库\n```\n\n#### 4. 配置钩子实现自动部署\n\n​\t找到`/home/git/hexoblog.git/hooks`下的`post-receive`文件，如果没有则新建一个该文件，将其内容改为\n\n``` sh\n#!/bin/sh\ngit --work-tree=/home/www/mongobin --git-dir=/home/git/hexoblog.git checkout -f\n\n```\n\n​\t以上内容是一条命令，前者为网页资源目录，后者为git仓库。意为当主机将静态文件推给服务器的git仓库后，服务器能够自动将文件部署到网页资源目录。\n\n​\t**然后设置网页资源目录的IO权限，否则git没有权限修改网页资源目录的内容，无法实现自动部署！！！**\n\n``` sh\nsudo chmod +x /home/git/hexoblog.git/hooks/pre-receive  #赋予其可执行权限\nsudo chown -R git:git /home/git/ #仓库目录的所有者改为git\nsudo chown -R git:git /home/www/ #站点文件夹所有者改为git\n```\n\n### 4. 主机配置与测试\n\n#### 1. 在主机初始化博客文件夹并测试本地demo\n\n​\t执行以下命令在文件夹中创建一个新的博客文件夹（官方demo）。\n\n```sh\ncd D:\\JaBinsProjects\\mongobin\nhexo init\n```\n\n**然后安装两个插件，用于部署，否则会报错！**\n\n``` sh\nnpm install hexo-deployer-git --save\nnpm install hexo-server\n```\n\n​\t执行以下命令即可在本机上查看自己的博客了，地址为<localhost:4000>\n\n``` \nhexo g\nhexo s\n```\n\n\n\n![image-20230320215235929](http://182.44.49.100:34/images/2023/05/06/image-20230320215235929.png)\n\n#### 2.配置本地博客与服务器git的连接\n\n​\t在刚才生成的博客文件夹根目录中找到并打开`_config.yml`文件，把最下面的depoly处改为如下内容，目的是与服务器git仓库建立连接。\n\n![image-20230320220031029](http://182.44.49.100:34/images/2023/05/06/image-20230320220031029.png)\n\n​\t**注意：**\n\n+ type, repo, branch缩进2格\n+ 冒号与其后面的内容必须有一空格\n+ branch为master和main均可\n\n#### 3. 测试连接和自动部署是否生效\n\ncd到**博客的文件夹下执行**以下命令\n\n``` sh\nhexo new \"Hello My First Blog\"\nhexo clean && hexo generate --deploy\n```\n\n也可以在`package.json`中添加`npm`脚本，简化操作，这样可以直接用`npm run dd`部署博客网页\n\n``` json\n\"scripts\": {\n    \"build\": \"hexo generate\",   // 重新生成静态页面文件\n    \"clean\": \"hexo clean\",    // 清除缓存\n    \"deploy\": \"hexo deploy\",   // 将静态页面文件部署到服务器\n\t\"dd\": \"hexo clean && hexo g -d\",\n    \"server\": \"hexo server\",\n\t\"ss\": \"hexo clean && hexo g && hexo s\"\n  },\n\n```\n\n然后输入域名`www.mongobin.top:32`看博客是否更新了一篇文章。\n\n### 5.最后\n\n​\t完成部署后可以去[Hexo](https://hexo.io/themes/)主题下载自己喜欢的主题，美化博客。现在去本地主机浏览器上输入域名或者公网IP，访问你的博客吧！\n样例博客：[唐志远の博客](https://tzy1997.com/)\n\n### 参考文章\n\n+ [将Hexo部署到云服务器（使用宝塔面板）](https://blog.csdn.net/qq_43219561/article/details/116719535)\n\n+ [基于云服务器的hexo博客搭建（稳）](https://blog.csdn.net/weixin_56301399/article/details/129270887)\n\n+ [Hexo博客部署至服务器](https://blog.csdn.net/u013190417/article/details/122694959)\n\n  \n","slug":"createBlog","published":1,"updated":"2023-05-06T09:19:25.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0xa00060kv3666hcs9k","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​    本来博客是用wordpress在服务器搭建的，但苦于wordpress的后端语言是php，对markdown的支持也不尽如人意，最终还是放弃了wordpress，转战后端为Node的Hexo框架。</p>\n<p>​    <strong>整体思路：</strong></p>\n<ol>\n<li>在服务器上配置Git环境，创建Git仓库</li>\n<li>在主机安装Hexo，并生成Hexo静态文件，通过与服务器链接，将静态文件推送到服务器上的Git仓库</li>\n<li>通过Git-hooks，即Git钩子，实现将服务器Git仓库的文件自动部署到网页资源目录</li>\n<li>将Nginx作为静态文件服务器，实现外界对网页资源目录的访问。</li>\n</ol>\n<p>​    <strong>本文的配置环境为</strong></p>\n<ul>\n<li><p>天翼云服务器：<a href=\"https://www.bt.cn/new/index.html\">宝塔</a>面板，一键安装nginx</p>\n<blockquote>\n<p>没有宝塔可以用ssh链接服务器，敲命令行也是一样的<code>yum install nginx</code></p>\n</blockquote>\n</li>\n<li><p>本地主机：Git、Node.js、Hexo</p>\n<blockquote>\n<p>Hexo安装：<code>npm install hexp -g </code> 。<code>-g</code>意为全局安装。</p>\n<p>如果第一次安装node，请注意配置环境变量，否则会出现<code>hexo不是内部或外部命令</code>的问题。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1-在服务器安装Git\"><a href=\"#1-在服务器安装Git\" class=\"headerlink\" title=\"1. 在服务器安装Git\"></a>1. 在服务器安装Git</h3><p>​    不管是宝塔提供的终端，还是Xshell的命令行都可以，安装命令<code>yum install git</code>。</p>\n<blockquote>\n<p>安装git可能会出现这样的报错信息</p>\n<p>Loaded plugins: fastestmirror, langpacks</p>\n<p>Loading mirror speeds from cached hostfile</p>\n<p>No package yum-util available.</p>\n<p>Error: Nothing to do</p>\n<p>解决方法可参考：<a href=\"https://blog.csdn.net/weixin_51225684/article/details/128040380\">安装docker时，遇到Loaded plugins…怎么办</a></p>\n</blockquote>\n<h3 id=\"2-在宝塔面板添加站点\"><a href=\"#2-在宝塔面板添加站点\" class=\"headerlink\" title=\"2.在宝塔面板添加站点\"></a>2.在宝塔面板添加站点</h3><p>​    由于天翼云服务器在域名没有备案的情况下不开放80端口，所以手动设置一个空闲的32端口用于访问网页。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320213201932.png\" alt=\"image-20230320213201932\"></p>\n<p>​    将网站目录设置为如下（自定义即可）</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320213344566.png\" alt=\"image-20230320213344566\"></p>\n<h3 id=\"3-对服务器的Git进行搭建\"><a href=\"#3-对服务器的Git进行搭建\" class=\"headerlink\" title=\"3.对服务器的Git进行搭建\"></a>3.对服务器的Git进行搭建</h3><h4 id=\"1-添加一个git用户\"><a href=\"#1-添加一个git用户\" class=\"headerlink\" title=\"1. 添加一个git用户\"></a>1. 添加一个git用户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">adduser git       # 添加git用户<br>chmod 740 /etc/sudoers    #改变sudoers文件的权限为文件所有者可写<br>vim /etc/sudoers<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">在root ALL=(ALL) ALL下方添加一行,按esc,再按:wq退出编辑</span><br>git ALL=(ALL) ALL<br>chmod 400 /etc/sudoers #将sudoers文件的权限改回文件所有者可读<br><br>sudo passwd git   #设置服务器的git密码，用于git连接。输入时看不到任何显示，输入完成回车即可<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-给服务器和主机的Git配置SSH密钥\"><a href=\"#2-给服务器和主机的Git配置SSH密钥\" class=\"headerlink\" title=\"2. 给服务器和主机的Git配置SSH密钥\"></a>2. 给服务器和主机的Git配置SSH密钥</h4><p>​        如果<strong>主机</strong>已有ssh密钥则跳过这一步，直接到<code>C:\\Users\\你的用户名\\.ssh</code>中找到<code>id_rsa.pub</code>。如果没有，按照如下步骤生成密钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git config --global user.name <span class=\"hljs-string\">&quot;你要设置的名字&quot;</span><br>git config --global user.email <span class=\"hljs-string\">&quot;你要设置的邮箱&quot;</span><br>ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;你刚刚设置的邮箱&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>​        此时<strong>主机</strong>的git密钥已生成，存放在上述<code>id_rsa.pub</code>文件中。接着，打开宝塔的文件管理系统，在<strong>服务器</strong>的<code>/home/git</code>中新建<code>.ssh</code>文件夹，并在其中新建<code>authorized_keys</code>文件。将<strong>主机</strong>的<code>id_rsa.pub</code>中的内容复制到该新建文件中。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320211205195.png\" alt=\"image-20230320211205195\"></p>\n<p>​        通过配置ssh密钥，主机和服务器的git连接时将不再需要密码，简化了操作。</p>\n<h4 id=\"3-在服务器中创建一个新的Git仓库\"><a href=\"#3-在服务器中创建一个新的Git仓库\" class=\"headerlink\" title=\"3.在服务器中创建一个新的Git仓库\"></a>3.在服务器中创建一个新的Git仓库</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cd</span> /home/git<br>git init --bare hexoblog.git  <span class=\"hljs-comment\">#在/home/git下初始化一个名为hexoblog的仓库</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-配置钩子实现自动部署\"><a href=\"#4-配置钩子实现自动部署\" class=\"headerlink\" title=\"4. 配置钩子实现自动部署\"></a>4. 配置钩子实现自动部署</h4><p>​    找到<code>/home/git/hexoblog.git/hooks</code>下的<code>post-receive</code>文件，如果没有则新建一个该文件，将其内容改为</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/www/mongobin --git-dir=/home/git/hexoblog.git checkout -f<br><br></code></pre></td></tr></table></figure>\n\n<p>​    以上内容是一条命令，前者为网页资源目录，后者为git仓库。意为当主机将静态文件推给服务器的git仓库后，服务器能够自动将文件部署到网页资源目录。</p>\n<p>​    <strong>然后设置网页资源目录的IO权限，否则git没有权限修改网页资源目录的内容，无法实现自动部署！！！</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">chmod</span> +x /home/git/hexoblog.git/hooks/pre-receive  <span class=\"hljs-comment\">#赋予其可执行权限</span><br>sudo <span class=\"hljs-built_in\">chown</span> -R git:git /home/git/ <span class=\"hljs-comment\">#仓库目录的所有者改为git</span><br>sudo <span class=\"hljs-built_in\">chown</span> -R git:git /home/www/ <span class=\"hljs-comment\">#站点文件夹所有者改为git</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-主机配置与测试\"><a href=\"#4-主机配置与测试\" class=\"headerlink\" title=\"4. 主机配置与测试\"></a>4. 主机配置与测试</h3><h4 id=\"1-在主机初始化博客文件夹并测试本地demo\"><a href=\"#1-在主机初始化博客文件夹并测试本地demo\" class=\"headerlink\" title=\"1. 在主机初始化博客文件夹并测试本地demo\"></a>1. 在主机初始化博客文件夹并测试本地demo</h4><p>​    执行以下命令在文件夹中创建一个新的博客文件夹（官方demo）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cd</span> D:\\JaBinsProjects\\mongobin<br>hexo init<br></code></pre></td></tr></table></figure>\n\n<p><strong>然后安装两个插件，用于部署，否则会报错！</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm install hexo-deployer-git --save<br>npm install hexo-server<br></code></pre></td></tr></table></figure>\n\n<p>​    执行以下命令即可在本机上查看自己的博客了，地址为<a href=\"localhost:4000\">localhost:4000</a></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo g</span><br><span class=\"hljs-attribute\">hexo s</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320215235929.png\" alt=\"image-20230320215235929\"></p>\n<h4 id=\"2-配置本地博客与服务器git的连接\"><a href=\"#2-配置本地博客与服务器git的连接\" class=\"headerlink\" title=\"2.配置本地博客与服务器git的连接\"></a>2.配置本地博客与服务器git的连接</h4><p>​    在刚才生成的博客文件夹根目录中找到并打开<code>_config.yml</code>文件，把最下面的depoly处改为如下内容，目的是与服务器git仓库建立连接。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320220031029.png\" alt=\"image-20230320220031029\"></p>\n<p>​    <strong>注意：</strong></p>\n<ul>\n<li>type, repo, branch缩进2格</li>\n<li>冒号与其后面的内容必须有一空格</li>\n<li>branch为master和main均可</li>\n</ul>\n<h4 id=\"3-测试连接和自动部署是否生效\"><a href=\"#3-测试连接和自动部署是否生效\" class=\"headerlink\" title=\"3. 测试连接和自动部署是否生效\"></a>3. 测试连接和自动部署是否生效</h4><p>cd到<strong>博客的文件夹下执行</strong>以下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">hexo new <span class=\"hljs-string\">&quot;Hello My First Blog&quot;</span><br>hexo clean &amp;&amp; hexo generate --deploy<br></code></pre></td></tr></table></figure>\n\n<p>也可以在<code>package.json</code>中添加<code>npm</code>脚本，简化操作，这样可以直接用<code>npm run dd</code>部署博客网页</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;build&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo generate&quot;</span><span class=\"hljs-punctuation\">,</span>   <span class=\"hljs-comment\">// 重新生成静态页面文件</span><br>    <span class=\"hljs-attr\">&quot;clean&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo clean&quot;</span><span class=\"hljs-punctuation\">,</span>    <span class=\"hljs-comment\">// 清除缓存</span><br>    <span class=\"hljs-attr\">&quot;deploy&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo deploy&quot;</span><span class=\"hljs-punctuation\">,</span>   <span class=\"hljs-comment\">// 将静态页面文件部署到服务器</span><br>\t<span class=\"hljs-attr\">&quot;dd&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo clean &amp;&amp; hexo g -d&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;server&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo server&quot;</span><span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-attr\">&quot;ss&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br></code></pre></td></tr></table></figure>\n\n<p>然后输入域名<code>www.mongobin.top:32</code>看博客是否更新了一篇文章。</p>\n<h3 id=\"5-最后\"><a href=\"#5-最后\" class=\"headerlink\" title=\"5.最后\"></a>5.最后</h3><p>​    完成部署后可以去<a href=\"https://hexo.io/themes/\">Hexo</a>主题下载自己喜欢的主题，美化博客。现在去本地主机浏览器上输入域名或者公网IP，访问你的博客吧！<br>样例博客：<a href=\"https://tzy1997.com/\">唐志远の博客</a></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><p><a href=\"https://blog.csdn.net/qq_43219561/article/details/116719535\">将Hexo部署到云服务器（使用宝塔面板）</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_56301399/article/details/129270887\">基于云服务器的hexo博客搭建（稳）</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/u013190417/article/details/122694959\">Hexo博客部署至服务器</a></p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​    本来博客是用wordpress在服务器搭建的，但苦于wordpress的后端语言是php，对markdown的支持也不尽如人意，最终还是放弃了wordpress，转战后端为Node的Hexo框架。</p>\n<p>​    <strong>整体思路：</strong></p>\n<ol>\n<li>在服务器上配置Git环境，创建Git仓库</li>\n<li>在主机安装Hexo，并生成Hexo静态文件，通过与服务器链接，将静态文件推送到服务器上的Git仓库</li>\n<li>通过Git-hooks，即Git钩子，实现将服务器Git仓库的文件自动部署到网页资源目录</li>\n<li>将Nginx作为静态文件服务器，实现外界对网页资源目录的访问。</li>\n</ol>\n<p>​    <strong>本文的配置环境为</strong></p>\n<ul>\n<li><p>天翼云服务器：<a href=\"https://www.bt.cn/new/index.html\">宝塔</a>面板，一键安装nginx</p>\n<blockquote>\n<p>没有宝塔可以用ssh链接服务器，敲命令行也是一样的<code>yum install nginx</code></p>\n</blockquote>\n</li>\n<li><p>本地主机：Git、Node.js、Hexo</p>\n<blockquote>\n<p>Hexo安装：<code>npm install hexp -g </code> 。<code>-g</code>意为全局安装。</p>\n<p>如果第一次安装node，请注意配置环境变量，否则会出现<code>hexo不是内部或外部命令</code>的问题。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1-在服务器安装Git\"><a href=\"#1-在服务器安装Git\" class=\"headerlink\" title=\"1. 在服务器安装Git\"></a>1. 在服务器安装Git</h3><p>​    不管是宝塔提供的终端，还是Xshell的命令行都可以，安装命令<code>yum install git</code>。</p>\n<blockquote>\n<p>安装git可能会出现这样的报错信息</p>\n<p>Loaded plugins: fastestmirror, langpacks</p>\n<p>Loading mirror speeds from cached hostfile</p>\n<p>No package yum-util available.</p>\n<p>Error: Nothing to do</p>\n<p>解决方法可参考：<a href=\"https://blog.csdn.net/weixin_51225684/article/details/128040380\">安装docker时，遇到Loaded plugins…怎么办</a></p>\n</blockquote>\n<h3 id=\"2-在宝塔面板添加站点\"><a href=\"#2-在宝塔面板添加站点\" class=\"headerlink\" title=\"2.在宝塔面板添加站点\"></a>2.在宝塔面板添加站点</h3><p>​    由于天翼云服务器在域名没有备案的情况下不开放80端口，所以手动设置一个空闲的32端口用于访问网页。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320213201932.png\" alt=\"image-20230320213201932\"></p>\n<p>​    将网站目录设置为如下（自定义即可）</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320213344566.png\" alt=\"image-20230320213344566\"></p>\n<h3 id=\"3-对服务器的Git进行搭建\"><a href=\"#3-对服务器的Git进行搭建\" class=\"headerlink\" title=\"3.对服务器的Git进行搭建\"></a>3.对服务器的Git进行搭建</h3><h4 id=\"1-添加一个git用户\"><a href=\"#1-添加一个git用户\" class=\"headerlink\" title=\"1. 添加一个git用户\"></a>1. 添加一个git用户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">adduser git       # 添加git用户<br>chmod 740 /etc/sudoers    #改变sudoers文件的权限为文件所有者可写<br>vim /etc/sudoers<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">在root ALL=(ALL) ALL下方添加一行,按esc,再按:wq退出编辑</span><br>git ALL=(ALL) ALL<br>chmod 400 /etc/sudoers #将sudoers文件的权限改回文件所有者可读<br><br>sudo passwd git   #设置服务器的git密码，用于git连接。输入时看不到任何显示，输入完成回车即可<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-给服务器和主机的Git配置SSH密钥\"><a href=\"#2-给服务器和主机的Git配置SSH密钥\" class=\"headerlink\" title=\"2. 给服务器和主机的Git配置SSH密钥\"></a>2. 给服务器和主机的Git配置SSH密钥</h4><p>​        如果<strong>主机</strong>已有ssh密钥则跳过这一步，直接到<code>C:\\Users\\你的用户名\\.ssh</code>中找到<code>id_rsa.pub</code>。如果没有，按照如下步骤生成密钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git config --global user.name <span class=\"hljs-string\">&quot;你要设置的名字&quot;</span><br>git config --global user.email <span class=\"hljs-string\">&quot;你要设置的邮箱&quot;</span><br>ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;你刚刚设置的邮箱&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>​        此时<strong>主机</strong>的git密钥已生成，存放在上述<code>id_rsa.pub</code>文件中。接着，打开宝塔的文件管理系统，在<strong>服务器</strong>的<code>/home/git</code>中新建<code>.ssh</code>文件夹，并在其中新建<code>authorized_keys</code>文件。将<strong>主机</strong>的<code>id_rsa.pub</code>中的内容复制到该新建文件中。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320211205195.png\" alt=\"image-20230320211205195\"></p>\n<p>​        通过配置ssh密钥，主机和服务器的git连接时将不再需要密码，简化了操作。</p>\n<h4 id=\"3-在服务器中创建一个新的Git仓库\"><a href=\"#3-在服务器中创建一个新的Git仓库\" class=\"headerlink\" title=\"3.在服务器中创建一个新的Git仓库\"></a>3.在服务器中创建一个新的Git仓库</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cd</span> /home/git<br>git init --bare hexoblog.git  <span class=\"hljs-comment\">#在/home/git下初始化一个名为hexoblog的仓库</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-配置钩子实现自动部署\"><a href=\"#4-配置钩子实现自动部署\" class=\"headerlink\" title=\"4. 配置钩子实现自动部署\"></a>4. 配置钩子实现自动部署</h4><p>​    找到<code>/home/git/hexoblog.git/hooks</code>下的<code>post-receive</code>文件，如果没有则新建一个该文件，将其内容改为</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/www/mongobin --git-dir=/home/git/hexoblog.git checkout -f<br><br></code></pre></td></tr></table></figure>\n\n<p>​    以上内容是一条命令，前者为网页资源目录，后者为git仓库。意为当主机将静态文件推给服务器的git仓库后，服务器能够自动将文件部署到网页资源目录。</p>\n<p>​    <strong>然后设置网页资源目录的IO权限，否则git没有权限修改网页资源目录的内容，无法实现自动部署！！！</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">chmod</span> +x /home/git/hexoblog.git/hooks/pre-receive  <span class=\"hljs-comment\">#赋予其可执行权限</span><br>sudo <span class=\"hljs-built_in\">chown</span> -R git:git /home/git/ <span class=\"hljs-comment\">#仓库目录的所有者改为git</span><br>sudo <span class=\"hljs-built_in\">chown</span> -R git:git /home/www/ <span class=\"hljs-comment\">#站点文件夹所有者改为git</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-主机配置与测试\"><a href=\"#4-主机配置与测试\" class=\"headerlink\" title=\"4. 主机配置与测试\"></a>4. 主机配置与测试</h3><h4 id=\"1-在主机初始化博客文件夹并测试本地demo\"><a href=\"#1-在主机初始化博客文件夹并测试本地demo\" class=\"headerlink\" title=\"1. 在主机初始化博客文件夹并测试本地demo\"></a>1. 在主机初始化博客文件夹并测试本地demo</h4><p>​    执行以下命令在文件夹中创建一个新的博客文件夹（官方demo）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cd</span> D:\\JaBinsProjects\\mongobin<br>hexo init<br></code></pre></td></tr></table></figure>\n\n<p><strong>然后安装两个插件，用于部署，否则会报错！</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm install hexo-deployer-git --save<br>npm install hexo-server<br></code></pre></td></tr></table></figure>\n\n<p>​    执行以下命令即可在本机上查看自己的博客了，地址为<a href=\"localhost:4000\">localhost:4000</a></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo g</span><br><span class=\"hljs-attribute\">hexo s</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320215235929.png\" alt=\"image-20230320215235929\"></p>\n<h4 id=\"2-配置本地博客与服务器git的连接\"><a href=\"#2-配置本地博客与服务器git的连接\" class=\"headerlink\" title=\"2.配置本地博客与服务器git的连接\"></a>2.配置本地博客与服务器git的连接</h4><p>​    在刚才生成的博客文件夹根目录中找到并打开<code>_config.yml</code>文件，把最下面的depoly处改为如下内容，目的是与服务器git仓库建立连接。</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230320220031029.png\" alt=\"image-20230320220031029\"></p>\n<p>​    <strong>注意：</strong></p>\n<ul>\n<li>type, repo, branch缩进2格</li>\n<li>冒号与其后面的内容必须有一空格</li>\n<li>branch为master和main均可</li>\n</ul>\n<h4 id=\"3-测试连接和自动部署是否生效\"><a href=\"#3-测试连接和自动部署是否生效\" class=\"headerlink\" title=\"3. 测试连接和自动部署是否生效\"></a>3. 测试连接和自动部署是否生效</h4><p>cd到<strong>博客的文件夹下执行</strong>以下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">hexo new <span class=\"hljs-string\">&quot;Hello My First Blog&quot;</span><br>hexo clean &amp;&amp; hexo generate --deploy<br></code></pre></td></tr></table></figure>\n\n<p>也可以在<code>package.json</code>中添加<code>npm</code>脚本，简化操作，这样可以直接用<code>npm run dd</code>部署博客网页</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;build&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo generate&quot;</span><span class=\"hljs-punctuation\">,</span>   <span class=\"hljs-comment\">// 重新生成静态页面文件</span><br>    <span class=\"hljs-attr\">&quot;clean&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo clean&quot;</span><span class=\"hljs-punctuation\">,</span>    <span class=\"hljs-comment\">// 清除缓存</span><br>    <span class=\"hljs-attr\">&quot;deploy&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo deploy&quot;</span><span class=\"hljs-punctuation\">,</span>   <span class=\"hljs-comment\">// 将静态页面文件部署到服务器</span><br>\t<span class=\"hljs-attr\">&quot;dd&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo clean &amp;&amp; hexo g -d&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;server&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo server&quot;</span><span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-attr\">&quot;ss&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br><br></code></pre></td></tr></table></figure>\n\n<p>然后输入域名<code>www.mongobin.top:32</code>看博客是否更新了一篇文章。</p>\n<h3 id=\"5-最后\"><a href=\"#5-最后\" class=\"headerlink\" title=\"5.最后\"></a>5.最后</h3><p>​    完成部署后可以去<a href=\"https://hexo.io/themes/\">Hexo</a>主题下载自己喜欢的主题，美化博客。现在去本地主机浏览器上输入域名或者公网IP，访问你的博客吧！<br>样例博客：<a href=\"https://tzy1997.com/\">唐志远の博客</a></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><p><a href=\"https://blog.csdn.net/qq_43219561/article/details/116719535\">将Hexo部署到云服务器（使用宝塔面板）</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_56301399/article/details/129270887\">基于云服务器的hexo博客搭建（稳）</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/u013190417/article/details/122694959\">Hexo博客部署至服务器</a></p>\n</li>\n</ul>\n"},{"title":"事件循环和消息队列（二）","date":"2023-03-30T13:27:54.000Z","banner_img":"http://182.44.49.100:34/images/2023/05/06/createBlog.png","_content":"\n## 前言\n\n上篇文章中介绍了多进程的浏览器基本架构，现在，我们来谈谈单线程的 JS 代码、消息队列、事件循环、微任务和宏任务。\n\n## 单线程的 JavaScript\n\n### JS 代码运行在哪里？\n\n如果你已经仔细阅读过上一篇文章，那么答案是显而易见的：由于浏览器是由渲染进程的主线程来执行 js 代码的，换句话说，js的运行位置是渲染进程的主线程，所以 js 自然而然就是单线程的。\n\n### js 为什么设计成单线程的？\n\n这个问题的答案同样在上一篇文章中有所体现。浏览器中的js执行和页面渲染是在同一个线程中发生的，主线程在解析HTML生成DOM树的过程中，如果遇到`<script>`标签会先执行js代码而阻塞对HTML的解析，因为 js 能够修改DOM进而影响渲染结果。但如果 js 可以拥有多个线程来执行，那么会出现一边解析HTML进行渲染，一边执行的 js 代码操作 DOM ，这样会影响到页面最终渲染效果的一致性（可预见性）。\n\n### 同步任务和异步任务\n\n+ 同步任务：按顺序执行的js代码，上一个任务结束才能执行下一个任务，**主线程中只执行同步任务**。\n+ 异步任务：**不进入主线程**执行，而是由宿主环境提供的线程执行。当**异步任务完成时**，会在消息队列中添加异步任务的回调函数。\n\n### 消息队列\n\n此时，你可能会有疑问：既然 JS 是单线程的，而异步任务又不是在主线程中执行的，这不是矛盾了吗？实际上，JS的确是单线程，但他的宿主环境（浏览器，Node.js）可不是单线程的，js中一些耗时的任务，可以交由宿主环境的其他线程来执行，但这与多线程语言可以开启多个线程并行执行任务并不相同。\n\n让我们来看看异步任务执行时发生了什么。假设js代码发出了一个异步 http 请求，此时由IO线程来接管执行http请求的代码，主线程将异步任务挂起，并继续执行接下来的同步代码，当IO线程接收到了服务器发来的响应，便将异步任务的回调加入到消息队列的队尾。\n\n**消息队列**（任务队列）是在**主线程之外的数据结构，**每当有异步任务完成，那么他的回调函数（callback）就会被push到消息队列的队尾。主线程中所有同步任务执行完之后，由事件循环来通知主线程开始执行消息队列中的任务。\n\n### 事件循环（Event Loop）\n\n简单的说，事件循环起到通知主线程该执行异步任务回调的作用。\n\n1. 在浏览器源码中，可以看到在最开始的时候，渲染主线程会进入一个无限循环\n2. 每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。\n3. 其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务\n\n这样一来，就可以让每个异步任务有条不紊的、持续的进行下去了。\n\n**整个过程，被称之为事件循环（在chrome源码中称为消息循环）**\n\n![image-20230507175003831](http://182.44.49.100:34/images/image-20230507175003831.png)\n\n\n\n## 任务的优先级\n\n任务没有优先级，在消息队列中先进先出\n\n但**消息队列是有优先级的**\n\n根据 W3C 的最新解释:\n\n+ 每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。\n  在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。\n\n+ 浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行\n  https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\n\n  > 随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法\n\n在目前 chrome 的实现中，至少包含了下面的队列：\n\n+ 延时队列：用于存放计时器到达后的回调任务，优先级「**中**」（setTimeout、setInterval）\n\n+ 交互队列：用于存放用户操作后产生的事件处理任务，优先级「**高**」（点击事件等交互操作）\n\n+ 微队列：用户存放需要最快执行的任务，优先级「**最高**」 （Promise , MutationObserver）\n\n\n\n下面用一组图片来形象地展示消息队列和事件循环、异步任务的运行机制：\n\n没有异步任务时，主线程的一次执行\n\n\n\n![image-20230330211730822](http://182.44.49.100:34/images/2023/05/06/image-20230330211730822.png)\n\n在主线程中引入事件循环\n\n\n\n![image-20230330211813118](http://182.44.49.100:34/images/2023/05/06/image-20230330211813118.png)\n\n渲染进程的线程之间发送通知\n\n\n\n![image-20230330211910974](http://182.44.49.100:34/images/2023/05/06/image-20230330211910974.png)\n\n![image-20230330211933941](http://182.44.49.100:34/images/2023/05/06/image-20230330211933941.png)\n\n线程模型：消息队列、事件循环和跨进程发送信息\n\n![image-20230330212109012](http://182.44.49.100:34/images/2023/05/06/image-20230330212109012.png)\n\n### 参考\n\n[阿里一面：熟悉事件循环？那谈谈为什么会分为宏任务和微任务。](https://juejin.cn/post/7073099307510923295)\n\n[浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务](https://juejin.cn/post/6844904193367474184)\n","source":"_posts/eventLoop.md","raw":"---\ntitle: 事件循环和消息队列（二）\ndate: 2023-03-30 21:27:54\ntags: [事件循环,消息队列,微队列,交互队列,延时队列,异步任务]\ncategories: [浏览器原理]\nbanner_img: http://182.44.49.100:34/images/2023/05/06/createBlog.png\n---\n\n## 前言\n\n上篇文章中介绍了多进程的浏览器基本架构，现在，我们来谈谈单线程的 JS 代码、消息队列、事件循环、微任务和宏任务。\n\n## 单线程的 JavaScript\n\n### JS 代码运行在哪里？\n\n如果你已经仔细阅读过上一篇文章，那么答案是显而易见的：由于浏览器是由渲染进程的主线程来执行 js 代码的，换句话说，js的运行位置是渲染进程的主线程，所以 js 自然而然就是单线程的。\n\n### js 为什么设计成单线程的？\n\n这个问题的答案同样在上一篇文章中有所体现。浏览器中的js执行和页面渲染是在同一个线程中发生的，主线程在解析HTML生成DOM树的过程中，如果遇到`<script>`标签会先执行js代码而阻塞对HTML的解析，因为 js 能够修改DOM进而影响渲染结果。但如果 js 可以拥有多个线程来执行，那么会出现一边解析HTML进行渲染，一边执行的 js 代码操作 DOM ，这样会影响到页面最终渲染效果的一致性（可预见性）。\n\n### 同步任务和异步任务\n\n+ 同步任务：按顺序执行的js代码，上一个任务结束才能执行下一个任务，**主线程中只执行同步任务**。\n+ 异步任务：**不进入主线程**执行，而是由宿主环境提供的线程执行。当**异步任务完成时**，会在消息队列中添加异步任务的回调函数。\n\n### 消息队列\n\n此时，你可能会有疑问：既然 JS 是单线程的，而异步任务又不是在主线程中执行的，这不是矛盾了吗？实际上，JS的确是单线程，但他的宿主环境（浏览器，Node.js）可不是单线程的，js中一些耗时的任务，可以交由宿主环境的其他线程来执行，但这与多线程语言可以开启多个线程并行执行任务并不相同。\n\n让我们来看看异步任务执行时发生了什么。假设js代码发出了一个异步 http 请求，此时由IO线程来接管执行http请求的代码，主线程将异步任务挂起，并继续执行接下来的同步代码，当IO线程接收到了服务器发来的响应，便将异步任务的回调加入到消息队列的队尾。\n\n**消息队列**（任务队列）是在**主线程之外的数据结构，**每当有异步任务完成，那么他的回调函数（callback）就会被push到消息队列的队尾。主线程中所有同步任务执行完之后，由事件循环来通知主线程开始执行消息队列中的任务。\n\n### 事件循环（Event Loop）\n\n简单的说，事件循环起到通知主线程该执行异步任务回调的作用。\n\n1. 在浏览器源码中，可以看到在最开始的时候，渲染主线程会进入一个无限循环\n2. 每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。\n3. 其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务\n\n这样一来，就可以让每个异步任务有条不紊的、持续的进行下去了。\n\n**整个过程，被称之为事件循环（在chrome源码中称为消息循环）**\n\n![image-20230507175003831](http://182.44.49.100:34/images/image-20230507175003831.png)\n\n\n\n## 任务的优先级\n\n任务没有优先级，在消息队列中先进先出\n\n但**消息队列是有优先级的**\n\n根据 W3C 的最新解释:\n\n+ 每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。\n  在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。\n\n+ 浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行\n  https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\n\n  > 随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法\n\n在目前 chrome 的实现中，至少包含了下面的队列：\n\n+ 延时队列：用于存放计时器到达后的回调任务，优先级「**中**」（setTimeout、setInterval）\n\n+ 交互队列：用于存放用户操作后产生的事件处理任务，优先级「**高**」（点击事件等交互操作）\n\n+ 微队列：用户存放需要最快执行的任务，优先级「**最高**」 （Promise , MutationObserver）\n\n\n\n下面用一组图片来形象地展示消息队列和事件循环、异步任务的运行机制：\n\n没有异步任务时，主线程的一次执行\n\n\n\n![image-20230330211730822](http://182.44.49.100:34/images/2023/05/06/image-20230330211730822.png)\n\n在主线程中引入事件循环\n\n\n\n![image-20230330211813118](http://182.44.49.100:34/images/2023/05/06/image-20230330211813118.png)\n\n渲染进程的线程之间发送通知\n\n\n\n![image-20230330211910974](http://182.44.49.100:34/images/2023/05/06/image-20230330211910974.png)\n\n![image-20230330211933941](http://182.44.49.100:34/images/2023/05/06/image-20230330211933941.png)\n\n线程模型：消息队列、事件循环和跨进程发送信息\n\n![image-20230330212109012](http://182.44.49.100:34/images/2023/05/06/image-20230330212109012.png)\n\n### 参考\n\n[阿里一面：熟悉事件循环？那谈谈为什么会分为宏任务和微任务。](https://juejin.cn/post/7073099307510923295)\n\n[浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务](https://juejin.cn/post/6844904193367474184)\n","slug":"eventLoop","published":1,"updated":"2023-05-07T11:53:09.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0xb00070kv35crj0zsf","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上篇文章中介绍了多进程的浏览器基本架构，现在，我们来谈谈单线程的 JS 代码、消息队列、事件循环、微任务和宏任务。</p>\n<h2 id=\"单线程的-JavaScript\"><a href=\"#单线程的-JavaScript\" class=\"headerlink\" title=\"单线程的 JavaScript\"></a>单线程的 JavaScript</h2><h3 id=\"JS-代码运行在哪里？\"><a href=\"#JS-代码运行在哪里？\" class=\"headerlink\" title=\"JS 代码运行在哪里？\"></a>JS 代码运行在哪里？</h3><p>如果你已经仔细阅读过上一篇文章，那么答案是显而易见的：由于浏览器是由渲染进程的主线程来执行 js 代码的，换句话说，js的运行位置是渲染进程的主线程，所以 js 自然而然就是单线程的。</p>\n<h3 id=\"js-为什么设计成单线程的？\"><a href=\"#js-为什么设计成单线程的？\" class=\"headerlink\" title=\"js 为什么设计成单线程的？\"></a>js 为什么设计成单线程的？</h3><p>这个问题的答案同样在上一篇文章中有所体现。浏览器中的js执行和页面渲染是在同一个线程中发生的，主线程在解析HTML生成DOM树的过程中，如果遇到<code>&lt;script&gt;</code>标签会先执行js代码而阻塞对HTML的解析，因为 js 能够修改DOM进而影响渲染结果。但如果 js 可以拥有多个线程来执行，那么会出现一边解析HTML进行渲染，一边执行的 js 代码操作 DOM ，这样会影响到页面最终渲染效果的一致性（可预见性）。</p>\n<h3 id=\"同步任务和异步任务\"><a href=\"#同步任务和异步任务\" class=\"headerlink\" title=\"同步任务和异步任务\"></a>同步任务和异步任务</h3><ul>\n<li>同步任务：按顺序执行的js代码，上一个任务结束才能执行下一个任务，<strong>主线程中只执行同步任务</strong>。</li>\n<li>异步任务：<strong>不进入主线程</strong>执行，而是由宿主环境提供的线程执行。当<strong>异步任务完成时</strong>，会在消息队列中添加异步任务的回调函数。</li>\n</ul>\n<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p>此时，你可能会有疑问：既然 JS 是单线程的，而异步任务又不是在主线程中执行的，这不是矛盾了吗？实际上，JS的确是单线程，但他的宿主环境（浏览器，Node.js）可不是单线程的，js中一些耗时的任务，可以交由宿主环境的其他线程来执行，但这与多线程语言可以开启多个线程并行执行任务并不相同。</p>\n<p>让我们来看看异步任务执行时发生了什么。假设js代码发出了一个异步 http 请求，此时由IO线程来接管执行http请求的代码，主线程将异步任务挂起，并继续执行接下来的同步代码，当IO线程接收到了服务器发来的响应，便将异步任务的回调加入到消息队列的队尾。</p>\n<p><strong>消息队列</strong>（任务队列）是在<strong>主线程之外的数据结构，</strong>每当有异步任务完成，那么他的回调函数（callback）就会被push到消息队列的队尾。主线程中所有同步任务执行完之后，由事件循环来通知主线程开始执行消息队列中的任务。</p>\n<h3 id=\"事件循环（Event-Loop）\"><a href=\"#事件循环（Event-Loop）\" class=\"headerlink\" title=\"事件循环（Event Loop）\"></a>事件循环（Event Loop）</h3><p>简单的说，事件循环起到通知主线程该执行异步任务回调的作用。</p>\n<ol>\n<li>在浏览器源码中，可以看到在最开始的时候，渲染主线程会进入一个无限循环</li>\n<li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li>\n<li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li>\n</ol>\n<p>这样一来，就可以让每个异步任务有条不紊的、持续的进行下去了。</p>\n<p><strong>整个过程，被称之为事件循环（在chrome源码中称为消息循环）</strong></p>\n<p><img src=\"http://182.44.49.100:34/images/image-20230507175003831.png\" alt=\"image-20230507175003831\"></p>\n<h2 id=\"任务的优先级\"><a href=\"#任务的优先级\" class=\"headerlink\" title=\"任务的优先级\"></a>任务的优先级</h2><p>任务没有优先级，在消息队列中先进先出</p>\n<p>但<strong>消息队列是有优先级的</strong></p>\n<p>根据 W3C 的最新解释:</p>\n<ul>\n<li><p>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。<br>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</p>\n</li>\n<li><p>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行<br><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\">https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint</a></p>\n<blockquote>\n<p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p>\n</blockquote>\n</li>\n</ul>\n<p>在目前 chrome 的实现中，至少包含了下面的队列：</p>\n<ul>\n<li><p>延时队列：用于存放计时器到达后的回调任务，优先级「<strong>中</strong>」（setTimeout、setInterval）</p>\n</li>\n<li><p>交互队列：用于存放用户操作后产生的事件处理任务，优先级「<strong>高</strong>」（点击事件等交互操作）</p>\n</li>\n<li><p>微队列：用户存放需要最快执行的任务，优先级「<strong>最高</strong>」 （Promise , MutationObserver）</p>\n</li>\n</ul>\n<p>下面用一组图片来形象地展示消息队列和事件循环、异步任务的运行机制：</p>\n<p>没有异步任务时，主线程的一次执行</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211730822.png\" alt=\"image-20230330211730822\"></p>\n<p>在主线程中引入事件循环</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211813118.png\" alt=\"image-20230330211813118\"></p>\n<p>渲染进程的线程之间发送通知</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211910974.png\" alt=\"image-20230330211910974\"></p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211933941.png\" alt=\"image-20230330211933941\"></p>\n<p>线程模型：消息队列、事件循环和跨进程发送信息</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330212109012.png\" alt=\"image-20230330212109012\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://juejin.cn/post/7073099307510923295\">阿里一面：熟悉事件循环？那谈谈为什么会分为宏任务和微任务。</a></p>\n<p><a href=\"https://juejin.cn/post/6844904193367474184\">浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务</a></p>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上篇文章中介绍了多进程的浏览器基本架构，现在，我们来谈谈单线程的 JS 代码、消息队列、事件循环、微任务和宏任务。</p>\n<h2 id=\"单线程的-JavaScript\"><a href=\"#单线程的-JavaScript\" class=\"headerlink\" title=\"单线程的 JavaScript\"></a>单线程的 JavaScript</h2><h3 id=\"JS-代码运行在哪里？\"><a href=\"#JS-代码运行在哪里？\" class=\"headerlink\" title=\"JS 代码运行在哪里？\"></a>JS 代码运行在哪里？</h3><p>如果你已经仔细阅读过上一篇文章，那么答案是显而易见的：由于浏览器是由渲染进程的主线程来执行 js 代码的，换句话说，js的运行位置是渲染进程的主线程，所以 js 自然而然就是单线程的。</p>\n<h3 id=\"js-为什么设计成单线程的？\"><a href=\"#js-为什么设计成单线程的？\" class=\"headerlink\" title=\"js 为什么设计成单线程的？\"></a>js 为什么设计成单线程的？</h3><p>这个问题的答案同样在上一篇文章中有所体现。浏览器中的js执行和页面渲染是在同一个线程中发生的，主线程在解析HTML生成DOM树的过程中，如果遇到<code>&lt;script&gt;</code>标签会先执行js代码而阻塞对HTML的解析，因为 js 能够修改DOM进而影响渲染结果。但如果 js 可以拥有多个线程来执行，那么会出现一边解析HTML进行渲染，一边执行的 js 代码操作 DOM ，这样会影响到页面最终渲染效果的一致性（可预见性）。</p>\n<h3 id=\"同步任务和异步任务\"><a href=\"#同步任务和异步任务\" class=\"headerlink\" title=\"同步任务和异步任务\"></a>同步任务和异步任务</h3><ul>\n<li>同步任务：按顺序执行的js代码，上一个任务结束才能执行下一个任务，<strong>主线程中只执行同步任务</strong>。</li>\n<li>异步任务：<strong>不进入主线程</strong>执行，而是由宿主环境提供的线程执行。当<strong>异步任务完成时</strong>，会在消息队列中添加异步任务的回调函数。</li>\n</ul>\n<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p>此时，你可能会有疑问：既然 JS 是单线程的，而异步任务又不是在主线程中执行的，这不是矛盾了吗？实际上，JS的确是单线程，但他的宿主环境（浏览器，Node.js）可不是单线程的，js中一些耗时的任务，可以交由宿主环境的其他线程来执行，但这与多线程语言可以开启多个线程并行执行任务并不相同。</p>\n<p>让我们来看看异步任务执行时发生了什么。假设js代码发出了一个异步 http 请求，此时由IO线程来接管执行http请求的代码，主线程将异步任务挂起，并继续执行接下来的同步代码，当IO线程接收到了服务器发来的响应，便将异步任务的回调加入到消息队列的队尾。</p>\n<p><strong>消息队列</strong>（任务队列）是在<strong>主线程之外的数据结构，</strong>每当有异步任务完成，那么他的回调函数（callback）就会被push到消息队列的队尾。主线程中所有同步任务执行完之后，由事件循环来通知主线程开始执行消息队列中的任务。</p>\n<h3 id=\"事件循环（Event-Loop）\"><a href=\"#事件循环（Event-Loop）\" class=\"headerlink\" title=\"事件循环（Event Loop）\"></a>事件循环（Event Loop）</h3><p>简单的说，事件循环起到通知主线程该执行异步任务回调的作用。</p>\n<ol>\n<li>在浏览器源码中，可以看到在最开始的时候，渲染主线程会进入一个无限循环</li>\n<li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li>\n<li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li>\n</ol>\n<p>这样一来，就可以让每个异步任务有条不紊的、持续的进行下去了。</p>\n<p><strong>整个过程，被称之为事件循环（在chrome源码中称为消息循环）</strong></p>\n<p><img src=\"http://182.44.49.100:34/images/image-20230507175003831.png\" alt=\"image-20230507175003831\"></p>\n<h2 id=\"任务的优先级\"><a href=\"#任务的优先级\" class=\"headerlink\" title=\"任务的优先级\"></a>任务的优先级</h2><p>任务没有优先级，在消息队列中先进先出</p>\n<p>但<strong>消息队列是有优先级的</strong></p>\n<p>根据 W3C 的最新解释:</p>\n<ul>\n<li><p>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。<br>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</p>\n</li>\n<li><p>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行<br><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\">https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint</a></p>\n<blockquote>\n<p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p>\n</blockquote>\n</li>\n</ul>\n<p>在目前 chrome 的实现中，至少包含了下面的队列：</p>\n<ul>\n<li><p>延时队列：用于存放计时器到达后的回调任务，优先级「<strong>中</strong>」（setTimeout、setInterval）</p>\n</li>\n<li><p>交互队列：用于存放用户操作后产生的事件处理任务，优先级「<strong>高</strong>」（点击事件等交互操作）</p>\n</li>\n<li><p>微队列：用户存放需要最快执行的任务，优先级「<strong>最高</strong>」 （Promise , MutationObserver）</p>\n</li>\n</ul>\n<p>下面用一组图片来形象地展示消息队列和事件循环、异步任务的运行机制：</p>\n<p>没有异步任务时，主线程的一次执行</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211730822.png\" alt=\"image-20230330211730822\"></p>\n<p>在主线程中引入事件循环</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211813118.png\" alt=\"image-20230330211813118\"></p>\n<p>渲染进程的线程之间发送通知</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211910974.png\" alt=\"image-20230330211910974\"></p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330211933941.png\" alt=\"image-20230330211933941\"></p>\n<p>线程模型：消息队列、事件循环和跨进程发送信息</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/image-20230330212109012.png\" alt=\"image-20230330212109012\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://juejin.cn/post/7073099307510923295\">阿里一面：熟悉事件循环？那谈谈为什么会分为宏任务和微任务。</a></p>\n<p><a href=\"https://juejin.cn/post/6844904193367474184\">浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务</a></p>\n"},{"title":"幽灵依赖与包管理工具","date":"2023-05-05T09:05:37.000Z","_content":"\n## 包管理工具\n\n最近接触了 vben-admin 这个开源项目，发现使用的包管理工具是 pnpm，而我之前一直都是用的 npm，想来不知他们有何差别，便去网上找了些资料和文档学习一下。\n\n目前流行的包管理工具：npm，yarn，pnpm。pnpm的主要优势在于节省磁盘空间，install命令执行速度快，解决了幽灵依赖。\n\n## node_modules 的目录结构\n\n### 嵌套式\n\n在早期的npm@2版本中，他的 node_modules 目录是嵌套式的。因此当一个依赖包内部依赖另一个包时，外部的依赖包目录里会再嵌套一层node_modules，里面存放着内部依赖包。\n\n一个例子，demo-foo 和 demo-baz 都依赖了demo-bar 这个包，它被同时安装在demo-foo和demo-baz的node_modules下。\n\n```\nnode_modules\n└─ demo-foo\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar\n         ├─ index.js\n         └─ package.json\n└─ demo-baz\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar\n         ├─ index.js\n         └─ package.json\n```\n\n虽然这种方式目录结构比较清晰，但它的缺点显而易见，如果多个依赖包都在内部依赖同一种依赖，由于没有复用机制，会造成磁盘空间的浪费；且如果嵌套层级太深，那么在windows中无法识别长度超过255个字符的路径，造成严重的问题。\n\n\n\n### 扁平式\n\n为了解决上述问题，后来的 npm@3+ 版本和新出的 yarn 对 node_modules 目录结构做出了改变，将原来嵌套式的目录结构拍平，所有的依赖包和依赖的依赖都存放在根node_modules目录下，再通过链接的方式，**共享**依赖的依赖。\n\n跟上一个例子相同的场景，目录结构被拍平了，demo-foo和demo-baz共同依赖同一个demo-bar\n\n```text\nnode_modules\n└─ demo-bar\n   ├─ index.js\n   └─ package.json\n└─ demo-baz\n   ├─ index.js\n   └─ package.json\n└─ demo-foo\n   ├─ index.js\n   └─ package.json\n```\n\n这种方式解决了嵌套式目录路径过长和依赖不能复用的问题。但同时也引入了新的问题：幽灵依赖和分身问题\n\n## 幽灵依赖\n\n幽灵依赖是指：在 JS 代码中可以导入并没有在 `package.json `中出现的包。这是扁平化的node_modules目录引起的，它把所有的依赖和子依赖都置于最顶层。根据模块的加载机制，demo-bar即使没有被显式的install，但仍可以通过`import bar from 'demo-bar'`导入这个子依赖。\n\n幽灵依赖会产生严重的问题：当有一天demo-foo和demo-bar被卸载，那么它们的子依赖也会不复存在，这时项目中引入的demo-bar及其API就会出现问题；再者，当更新父依赖的版本时，它的子依赖的版本也会被更新，一旦这次子依赖的更新导致当前项目中用到的子依赖API失效，那么这个问题是非常难以排查的。\n\n\n\n## 分身问题\n\nNPM分身问题是指：对于相同依赖的不同版本，npm只会将其中的一个版本提升到最顶层的node_modules，而剩下的其他版本则可能会被重新安装，并嵌套地安装在父依赖目录下。\n\n> 具体提升哪个父依赖的相同子依赖，取决于哪个父依赖最早被安装\n\n比如下面这个例子，当某一个其他依赖demo-bar的父依赖C更新版本时，C所需要的demo-bar是1.0.1版本，且C是最早被安装的demo-bar的父依赖，那么1.0.1版本的demo-bar会提升到顶级的node_modules，其他的父依赖重新安装1.0.0版本的demo-bar\n\n```text\nnode_modules\n└─ demo-bar // v1.0.1\n   ├─ index.js\n   └─ package.json\n└─ demo-baz\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar // v1.0.0\n         ├─ index.js\n         └─ package.json\n└─ demo-foo\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar // v1.0.0\n         ├─ index.js\n         └─ package.json\n```\n\n## pnpm的解决方案\n\n### 硬链接和软链接\n\n硬链接（hard link）和软连接，又称符号链接（symbolic link）是操作系统中两种共享文件的链接方式。\n\n硬链接通过直接指向文件的索引块从而实现文件共享；软连接则创建一个新的文件（eg. 快捷方式），文件内容是要共享的文件的硬链接，示意图如下：\n\n\n\n![软链接和硬链接](http://182.44.49.100:34/images/2023/05/06/f1e85fbacc206f75936444f322c83c96.png)\n\n### pnpm的目录结构\n\npnpm通过软链接、硬链接以及全局依赖库来组织目录结构，从而解决了分身问题和幽灵依赖。\n\npnpm将所有的包都安装在全局的 .pnpm-store 目录中（具体路径通过 `pnpm store path`查询），这是全局依赖库，以下称为store。所有项目的所需依赖都通过硬链接的方式从store链接到node_modules的.pnpm目录中，再用软连接，将.pnpm中的顶层依赖链接到node_modules目录下。\n\n一个简单的例子：demo-baz@1.0.0和demo-foo@1.0.1是经显式install的顶层依赖，demo-bar是它们的子依赖。\n\n```\nnode_modules\n└─ .pnpm\n   └─ demo-bar@1.0.0\n      └─ node_modules\n         └─ demo-bar -> <store>/demo-bar\n   └─ demo-bar@1.0.1\n      └─ node_modules\n         └─ demo-bar -> <store>/demo-bar\n   └─ demo-baz@1.0.0\n      └─ node_modules\n         ├─ demo-bar -> ../../demo-bar@1.0.0/node_modules/demo-bar\n         └─ demo-baz -> <store>/demo-baz\n   └─ demo-foo@1.0.1\n      └─ node_modules\n         ├─ demo-bar -> ../../demo-bar@1.0.1/node_modules/demo-bar\n         └─ demo-foo -> <store>/demo-foo\n└─ demo-baz -> ./pnpm/demo-baz@1.0.0/node_modules/demo-baz\n└─ demo-foo -> ./pnpm/demo-foo@1.0.1/node_modules/demo-foo\n```\n\n好处：\n\n+ .pnpm目录中采用硬链接，所以可以达到包复用的目的\n+ .pnpm中依赖的node_modules中采用的仍然是扁平式目录，无论demo-foo中嵌套多少层子依赖，它的文件目录的深度依然不变\n+ 由于顶层依赖中没有了子依赖，所以就避免了幽灵依赖\n+ 不同版本的相同子依赖都会存在于顶层.pnpm下，因此某个依赖更新子依赖并不会影响其他依赖的子依赖，依然可以通过硬链接实现依赖的复用，这就解决了分身问题。\n\n\n\n## pnpm的局限性\n\n1. 由于符号连接（symbolic link）在一些场景下有兼容性问题，目前在 Eletron 以及 labmda 部署的应用上无法使用 pnpm\n2. 由于全局公用同一份store，因此当某个项目修改node_modules中的内容时，会直接影响全局store中对应的内容，这会对其他的项目造成影响。关于这个问题，最好的解决方法是clone（copy-on-write写入前复制）：修改前，创建一个新的引用指向当前的文件。\n3. 并不是所有的命令pnpm都很快，例如pnpm run 就比较慢 \n","source":"_posts/pnpm.md","raw":"---\ntitle: 幽灵依赖与包管理工具\ndate: 2023-05-05 17:05:37\ntags: [pnpm,幽灵依赖,包管理工具]\ncategories: [前端工程化]\n---\n\n## 包管理工具\n\n最近接触了 vben-admin 这个开源项目，发现使用的包管理工具是 pnpm，而我之前一直都是用的 npm，想来不知他们有何差别，便去网上找了些资料和文档学习一下。\n\n目前流行的包管理工具：npm，yarn，pnpm。pnpm的主要优势在于节省磁盘空间，install命令执行速度快，解决了幽灵依赖。\n\n## node_modules 的目录结构\n\n### 嵌套式\n\n在早期的npm@2版本中，他的 node_modules 目录是嵌套式的。因此当一个依赖包内部依赖另一个包时，外部的依赖包目录里会再嵌套一层node_modules，里面存放着内部依赖包。\n\n一个例子，demo-foo 和 demo-baz 都依赖了demo-bar 这个包，它被同时安装在demo-foo和demo-baz的node_modules下。\n\n```\nnode_modules\n└─ demo-foo\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar\n         ├─ index.js\n         └─ package.json\n└─ demo-baz\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar\n         ├─ index.js\n         └─ package.json\n```\n\n虽然这种方式目录结构比较清晰，但它的缺点显而易见，如果多个依赖包都在内部依赖同一种依赖，由于没有复用机制，会造成磁盘空间的浪费；且如果嵌套层级太深，那么在windows中无法识别长度超过255个字符的路径，造成严重的问题。\n\n\n\n### 扁平式\n\n为了解决上述问题，后来的 npm@3+ 版本和新出的 yarn 对 node_modules 目录结构做出了改变，将原来嵌套式的目录结构拍平，所有的依赖包和依赖的依赖都存放在根node_modules目录下，再通过链接的方式，**共享**依赖的依赖。\n\n跟上一个例子相同的场景，目录结构被拍平了，demo-foo和demo-baz共同依赖同一个demo-bar\n\n```text\nnode_modules\n└─ demo-bar\n   ├─ index.js\n   └─ package.json\n└─ demo-baz\n   ├─ index.js\n   └─ package.json\n└─ demo-foo\n   ├─ index.js\n   └─ package.json\n```\n\n这种方式解决了嵌套式目录路径过长和依赖不能复用的问题。但同时也引入了新的问题：幽灵依赖和分身问题\n\n## 幽灵依赖\n\n幽灵依赖是指：在 JS 代码中可以导入并没有在 `package.json `中出现的包。这是扁平化的node_modules目录引起的，它把所有的依赖和子依赖都置于最顶层。根据模块的加载机制，demo-bar即使没有被显式的install，但仍可以通过`import bar from 'demo-bar'`导入这个子依赖。\n\n幽灵依赖会产生严重的问题：当有一天demo-foo和demo-bar被卸载，那么它们的子依赖也会不复存在，这时项目中引入的demo-bar及其API就会出现问题；再者，当更新父依赖的版本时，它的子依赖的版本也会被更新，一旦这次子依赖的更新导致当前项目中用到的子依赖API失效，那么这个问题是非常难以排查的。\n\n\n\n## 分身问题\n\nNPM分身问题是指：对于相同依赖的不同版本，npm只会将其中的一个版本提升到最顶层的node_modules，而剩下的其他版本则可能会被重新安装，并嵌套地安装在父依赖目录下。\n\n> 具体提升哪个父依赖的相同子依赖，取决于哪个父依赖最早被安装\n\n比如下面这个例子，当某一个其他依赖demo-bar的父依赖C更新版本时，C所需要的demo-bar是1.0.1版本，且C是最早被安装的demo-bar的父依赖，那么1.0.1版本的demo-bar会提升到顶级的node_modules，其他的父依赖重新安装1.0.0版本的demo-bar\n\n```text\nnode_modules\n└─ demo-bar // v1.0.1\n   ├─ index.js\n   └─ package.json\n└─ demo-baz\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar // v1.0.0\n         ├─ index.js\n         └─ package.json\n└─ demo-foo\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ demo-bar // v1.0.0\n         ├─ index.js\n         └─ package.json\n```\n\n## pnpm的解决方案\n\n### 硬链接和软链接\n\n硬链接（hard link）和软连接，又称符号链接（symbolic link）是操作系统中两种共享文件的链接方式。\n\n硬链接通过直接指向文件的索引块从而实现文件共享；软连接则创建一个新的文件（eg. 快捷方式），文件内容是要共享的文件的硬链接，示意图如下：\n\n\n\n![软链接和硬链接](http://182.44.49.100:34/images/2023/05/06/f1e85fbacc206f75936444f322c83c96.png)\n\n### pnpm的目录结构\n\npnpm通过软链接、硬链接以及全局依赖库来组织目录结构，从而解决了分身问题和幽灵依赖。\n\npnpm将所有的包都安装在全局的 .pnpm-store 目录中（具体路径通过 `pnpm store path`查询），这是全局依赖库，以下称为store。所有项目的所需依赖都通过硬链接的方式从store链接到node_modules的.pnpm目录中，再用软连接，将.pnpm中的顶层依赖链接到node_modules目录下。\n\n一个简单的例子：demo-baz@1.0.0和demo-foo@1.0.1是经显式install的顶层依赖，demo-bar是它们的子依赖。\n\n```\nnode_modules\n└─ .pnpm\n   └─ demo-bar@1.0.0\n      └─ node_modules\n         └─ demo-bar -> <store>/demo-bar\n   └─ demo-bar@1.0.1\n      └─ node_modules\n         └─ demo-bar -> <store>/demo-bar\n   └─ demo-baz@1.0.0\n      └─ node_modules\n         ├─ demo-bar -> ../../demo-bar@1.0.0/node_modules/demo-bar\n         └─ demo-baz -> <store>/demo-baz\n   └─ demo-foo@1.0.1\n      └─ node_modules\n         ├─ demo-bar -> ../../demo-bar@1.0.1/node_modules/demo-bar\n         └─ demo-foo -> <store>/demo-foo\n└─ demo-baz -> ./pnpm/demo-baz@1.0.0/node_modules/demo-baz\n└─ demo-foo -> ./pnpm/demo-foo@1.0.1/node_modules/demo-foo\n```\n\n好处：\n\n+ .pnpm目录中采用硬链接，所以可以达到包复用的目的\n+ .pnpm中依赖的node_modules中采用的仍然是扁平式目录，无论demo-foo中嵌套多少层子依赖，它的文件目录的深度依然不变\n+ 由于顶层依赖中没有了子依赖，所以就避免了幽灵依赖\n+ 不同版本的相同子依赖都会存在于顶层.pnpm下，因此某个依赖更新子依赖并不会影响其他依赖的子依赖，依然可以通过硬链接实现依赖的复用，这就解决了分身问题。\n\n\n\n## pnpm的局限性\n\n1. 由于符号连接（symbolic link）在一些场景下有兼容性问题，目前在 Eletron 以及 labmda 部署的应用上无法使用 pnpm\n2. 由于全局公用同一份store，因此当某个项目修改node_modules中的内容时，会直接影响全局store中对应的内容，这会对其他的项目造成影响。关于这个问题，最好的解决方法是clone（copy-on-write写入前复制）：修改前，创建一个新的引用指向当前的文件。\n3. 并不是所有的命令pnpm都很快，例如pnpm run 就比较慢 \n","slug":"pnpm","published":1,"updated":"2023-05-06T09:06:28.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0xc00080kv37wr61cy1","content":"<h2 id=\"包管理工具\"><a href=\"#包管理工具\" class=\"headerlink\" title=\"包管理工具\"></a>包管理工具</h2><p>最近接触了 vben-admin 这个开源项目，发现使用的包管理工具是 pnpm，而我之前一直都是用的 npm，想来不知他们有何差别，便去网上找了些资料和文档学习一下。</p>\n<p>目前流行的包管理工具：npm，yarn，pnpm。pnpm的主要优势在于节省磁盘空间，install命令执行速度快，解决了幽灵依赖。</p>\n<h2 id=\"node-modules-的目录结构\"><a href=\"#node-modules-的目录结构\" class=\"headerlink\" title=\"node_modules 的目录结构\"></a>node_modules 的目录结构</h2><h3 id=\"嵌套式\"><a href=\"#嵌套式\" class=\"headerlink\" title=\"嵌套式\"></a>嵌套式</h3><p>在早期的npm@2版本中，他的 node_modules 目录是嵌套式的。因此当一个依赖包内部依赖另一个包时，外部的依赖包目录里会再嵌套一层node_modules，里面存放着内部依赖包。</p>\n<p>一个例子，demo-foo 和 demo-baz 都依赖了demo-bar 这个包，它被同时安装在demo-foo和demo-baz的node_modules下。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">node_modules<br>└─ demo-foo<br>   ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>   ├─ package.<span class=\"hljs-keyword\">json</span><br><span class=\"hljs-keyword\"></span>   └─ node_modules<br>      └─ demo-<span class=\"hljs-keyword\">bar</span><br><span class=\"hljs-keyword\"></span>         ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>         └─ package.<span class=\"hljs-keyword\">json</span><br><span class=\"hljs-keyword\"></span>└─ demo-<span class=\"hljs-keyword\">baz</span><br><span class=\"hljs-keyword\"></span>   ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>   ├─ package.<span class=\"hljs-keyword\">json</span><br><span class=\"hljs-keyword\"></span>   └─ node_modules<br>      └─ demo-<span class=\"hljs-keyword\">bar</span><br><span class=\"hljs-keyword\"></span>         ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>         └─ package.<span class=\"hljs-keyword\">json</span><br></code></pre></td></tr></table></figure>\n\n<p>虽然这种方式目录结构比较清晰，但它的缺点显而易见，如果多个依赖包都在内部依赖同一种依赖，由于没有复用机制，会造成磁盘空间的浪费；且如果嵌套层级太深，那么在windows中无法识别长度超过255个字符的路径，造成严重的问题。</p>\n<h3 id=\"扁平式\"><a href=\"#扁平式\" class=\"headerlink\" title=\"扁平式\"></a>扁平式</h3><p>为了解决上述问题，后来的 npm@3+ 版本和新出的 yarn 对 node_modules 目录结构做出了改变，将原来嵌套式的目录结构拍平，所有的依赖包和依赖的依赖都存放在根node_modules目录下，再通过链接的方式，<strong>共享</strong>依赖的依赖。</p>\n<p>跟上一个例子相同的场景，目录结构被拍平了，demo-foo和demo-baz共同依赖同一个demo-bar</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">node_modules<br>└─ demo-bar<br>   ├─ index.js<br>   └─ package.json<br>└─ demo-baz<br>   ├─ index.js<br>   └─ package.json<br>└─ demo-foo<br>   ├─ index.js<br>   └─ package.json<br></code></pre></td></tr></table></figure>\n\n<p>这种方式解决了嵌套式目录路径过长和依赖不能复用的问题。但同时也引入了新的问题：幽灵依赖和分身问题</p>\n<h2 id=\"幽灵依赖\"><a href=\"#幽灵依赖\" class=\"headerlink\" title=\"幽灵依赖\"></a>幽灵依赖</h2><p>幽灵依赖是指：在 JS 代码中可以导入并没有在 <code>package.json </code>中出现的包。这是扁平化的node_modules目录引起的，它把所有的依赖和子依赖都置于最顶层。根据模块的加载机制，demo-bar即使没有被显式的install，但仍可以通过<code>import bar from &#39;demo-bar&#39;</code>导入这个子依赖。</p>\n<p>幽灵依赖会产生严重的问题：当有一天demo-foo和demo-bar被卸载，那么它们的子依赖也会不复存在，这时项目中引入的demo-bar及其API就会出现问题；再者，当更新父依赖的版本时，它的子依赖的版本也会被更新，一旦这次子依赖的更新导致当前项目中用到的子依赖API失效，那么这个问题是非常难以排查的。</p>\n<h2 id=\"分身问题\"><a href=\"#分身问题\" class=\"headerlink\" title=\"分身问题\"></a>分身问题</h2><p>NPM分身问题是指：对于相同依赖的不同版本，npm只会将其中的一个版本提升到最顶层的node_modules，而剩下的其他版本则可能会被重新安装，并嵌套地安装在父依赖目录下。</p>\n<blockquote>\n<p>具体提升哪个父依赖的相同子依赖，取决于哪个父依赖最早被安装</p>\n</blockquote>\n<p>比如下面这个例子，当某一个其他依赖demo-bar的父依赖C更新版本时，C所需要的demo-bar是1.0.1版本，且C是最早被安装的demo-bar的父依赖，那么1.0.1版本的demo-bar会提升到顶级的node_modules，其他的父依赖重新安装1.0.0版本的demo-bar</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">node_modules<br>└─ demo-bar // v1.0.1<br>   ├─ index.js<br>   └─ package.json<br>└─ demo-baz<br>   ├─ index.js<br>   ├─ package.json<br>   └─ node_modules<br>      └─ demo-bar // v1.0.0<br>         ├─ index.js<br>         └─ package.json<br>└─ demo-foo<br>   ├─ index.js<br>   ├─ package.json<br>   └─ node_modules<br>      └─ demo-bar // v1.0.0<br>         ├─ index.js<br>         └─ package.json<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"pnpm的解决方案\"><a href=\"#pnpm的解决方案\" class=\"headerlink\" title=\"pnpm的解决方案\"></a>pnpm的解决方案</h2><h3 id=\"硬链接和软链接\"><a href=\"#硬链接和软链接\" class=\"headerlink\" title=\"硬链接和软链接\"></a>硬链接和软链接</h3><p>硬链接（hard link）和软连接，又称符号链接（symbolic link）是操作系统中两种共享文件的链接方式。</p>\n<p>硬链接通过直接指向文件的索引块从而实现文件共享；软连接则创建一个新的文件（eg. 快捷方式），文件内容是要共享的文件的硬链接，示意图如下：</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/f1e85fbacc206f75936444f322c83c96.png\" alt=\"软链接和硬链接\"></p>\n<h3 id=\"pnpm的目录结构\"><a href=\"#pnpm的目录结构\" class=\"headerlink\" title=\"pnpm的目录结构\"></a>pnpm的目录结构</h3><p>pnpm通过软链接、硬链接以及全局依赖库来组织目录结构，从而解决了分身问题和幽灵依赖。</p>\n<p>pnpm将所有的包都安装在全局的 .pnpm-store 目录中（具体路径通过 <code>pnpm store path</code>查询），这是全局依赖库，以下称为store。所有项目的所需依赖都通过硬链接的方式从store链接到node_modules的.pnpm目录中，再用软连接，将.pnpm中的顶层依赖链接到node_modules目录下。</p>\n<p>一个简单的例子：<a href=\"mailto:&#100;&#101;&#x6d;&#111;&#x2d;&#98;&#97;&#122;&#x40;&#x31;&#46;&#48;&#x2e;&#48;\">&#100;&#101;&#x6d;&#111;&#x2d;&#98;&#97;&#122;&#x40;&#x31;&#46;&#48;&#x2e;&#48;</a>和<a href=\"mailto:&#x64;&#x65;&#x6d;&#x6f;&#45;&#102;&#111;&#111;&#64;&#49;&#x2e;&#x30;&#46;&#49;\">&#x64;&#x65;&#x6d;&#x6f;&#45;&#102;&#111;&#111;&#64;&#49;&#x2e;&#x30;&#46;&#49;</a>是经显式install的顶层依赖，demo-bar是它们的子依赖。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">node_modules<br>└─ .pnpm<br>   └─ demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><br>      └─ node_modules<br>         └─ demo-bar -&gt; &lt;store&gt;/demo-bar<br>   └─ demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><br>      └─ node_modules<br>         └─ demo-bar -&gt; &lt;store&gt;/demo-bar<br>   └─ demo-baz@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><br>      └─ node_modules<br>         ├─ demo-bar -&gt; ..<span class=\"hljs-regexp\">/../</span>demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-regexp\">/node_modules/</span>demo-bar<br>         └─ demo-baz -&gt; &lt;store&gt;/demo-baz<br>   └─ demo-foo@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><br>      └─ node_modules<br>         ├─ demo-bar -&gt; ..<span class=\"hljs-regexp\">/../</span>demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/node_modules/</span>demo-bar<br>         └─ demo-foo -&gt; &lt;store&gt;/demo-foo<br>└─ demo-baz -&gt; .<span class=\"hljs-regexp\">/pnpm/</span>demo-baz@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-regexp\">/node_modules/</span>demo-baz<br>└─ demo-foo -&gt; .<span class=\"hljs-regexp\">/pnpm/</span>demo-foo@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/node_modules/</span>demo-foo<br></code></pre></td></tr></table></figure>\n\n<p>好处：</p>\n<ul>\n<li>.pnpm目录中采用硬链接，所以可以达到包复用的目的</li>\n<li>.pnpm中依赖的node_modules中采用的仍然是扁平式目录，无论demo-foo中嵌套多少层子依赖，它的文件目录的深度依然不变</li>\n<li>由于顶层依赖中没有了子依赖，所以就避免了幽灵依赖</li>\n<li>不同版本的相同子依赖都会存在于顶层.pnpm下，因此某个依赖更新子依赖并不会影响其他依赖的子依赖，依然可以通过硬链接实现依赖的复用，这就解决了分身问题。</li>\n</ul>\n<h2 id=\"pnpm的局限性\"><a href=\"#pnpm的局限性\" class=\"headerlink\" title=\"pnpm的局限性\"></a>pnpm的局限性</h2><ol>\n<li>由于符号连接（symbolic link）在一些场景下有兼容性问题，目前在 Eletron 以及 labmda 部署的应用上无法使用 pnpm</li>\n<li>由于全局公用同一份store，因此当某个项目修改node_modules中的内容时，会直接影响全局store中对应的内容，这会对其他的项目造成影响。关于这个问题，最好的解决方法是clone（copy-on-write写入前复制）：修改前，创建一个新的引用指向当前的文件。</li>\n<li>并不是所有的命令pnpm都很快，例如pnpm run 就比较慢 </li>\n</ol>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<h2 id=\"包管理工具\"><a href=\"#包管理工具\" class=\"headerlink\" title=\"包管理工具\"></a>包管理工具</h2><p>最近接触了 vben-admin 这个开源项目，发现使用的包管理工具是 pnpm，而我之前一直都是用的 npm，想来不知他们有何差别，便去网上找了些资料和文档学习一下。</p>\n<p>目前流行的包管理工具：npm，yarn，pnpm。pnpm的主要优势在于节省磁盘空间，install命令执行速度快，解决了幽灵依赖。</p>\n<h2 id=\"node-modules-的目录结构\"><a href=\"#node-modules-的目录结构\" class=\"headerlink\" title=\"node_modules 的目录结构\"></a>node_modules 的目录结构</h2><h3 id=\"嵌套式\"><a href=\"#嵌套式\" class=\"headerlink\" title=\"嵌套式\"></a>嵌套式</h3><p>在早期的npm@2版本中，他的 node_modules 目录是嵌套式的。因此当一个依赖包内部依赖另一个包时，外部的依赖包目录里会再嵌套一层node_modules，里面存放着内部依赖包。</p>\n<p>一个例子，demo-foo 和 demo-baz 都依赖了demo-bar 这个包，它被同时安装在demo-foo和demo-baz的node_modules下。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">node_modules<br>└─ demo-foo<br>   ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>   ├─ package.<span class=\"hljs-keyword\">json</span><br><span class=\"hljs-keyword\"></span>   └─ node_modules<br>      └─ demo-<span class=\"hljs-keyword\">bar</span><br><span class=\"hljs-keyword\"></span>         ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>         └─ package.<span class=\"hljs-keyword\">json</span><br><span class=\"hljs-keyword\"></span>└─ demo-<span class=\"hljs-keyword\">baz</span><br><span class=\"hljs-keyword\"></span>   ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>   ├─ package.<span class=\"hljs-keyword\">json</span><br><span class=\"hljs-keyword\"></span>   └─ node_modules<br>      └─ demo-<span class=\"hljs-keyword\">bar</span><br><span class=\"hljs-keyword\"></span>         ├─ index.<span class=\"hljs-keyword\">js</span><br><span class=\"hljs-keyword\"></span>         └─ package.<span class=\"hljs-keyword\">json</span><br></code></pre></td></tr></table></figure>\n\n<p>虽然这种方式目录结构比较清晰，但它的缺点显而易见，如果多个依赖包都在内部依赖同一种依赖，由于没有复用机制，会造成磁盘空间的浪费；且如果嵌套层级太深，那么在windows中无法识别长度超过255个字符的路径，造成严重的问题。</p>\n<h3 id=\"扁平式\"><a href=\"#扁平式\" class=\"headerlink\" title=\"扁平式\"></a>扁平式</h3><p>为了解决上述问题，后来的 npm@3+ 版本和新出的 yarn 对 node_modules 目录结构做出了改变，将原来嵌套式的目录结构拍平，所有的依赖包和依赖的依赖都存放在根node_modules目录下，再通过链接的方式，<strong>共享</strong>依赖的依赖。</p>\n<p>跟上一个例子相同的场景，目录结构被拍平了，demo-foo和demo-baz共同依赖同一个demo-bar</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">node_modules<br>└─ demo-bar<br>   ├─ index.js<br>   └─ package.json<br>└─ demo-baz<br>   ├─ index.js<br>   └─ package.json<br>└─ demo-foo<br>   ├─ index.js<br>   └─ package.json<br></code></pre></td></tr></table></figure>\n\n<p>这种方式解决了嵌套式目录路径过长和依赖不能复用的问题。但同时也引入了新的问题：幽灵依赖和分身问题</p>\n<h2 id=\"幽灵依赖\"><a href=\"#幽灵依赖\" class=\"headerlink\" title=\"幽灵依赖\"></a>幽灵依赖</h2><p>幽灵依赖是指：在 JS 代码中可以导入并没有在 <code>package.json </code>中出现的包。这是扁平化的node_modules目录引起的，它把所有的依赖和子依赖都置于最顶层。根据模块的加载机制，demo-bar即使没有被显式的install，但仍可以通过<code>import bar from &#39;demo-bar&#39;</code>导入这个子依赖。</p>\n<p>幽灵依赖会产生严重的问题：当有一天demo-foo和demo-bar被卸载，那么它们的子依赖也会不复存在，这时项目中引入的demo-bar及其API就会出现问题；再者，当更新父依赖的版本时，它的子依赖的版本也会被更新，一旦这次子依赖的更新导致当前项目中用到的子依赖API失效，那么这个问题是非常难以排查的。</p>\n<h2 id=\"分身问题\"><a href=\"#分身问题\" class=\"headerlink\" title=\"分身问题\"></a>分身问题</h2><p>NPM分身问题是指：对于相同依赖的不同版本，npm只会将其中的一个版本提升到最顶层的node_modules，而剩下的其他版本则可能会被重新安装，并嵌套地安装在父依赖目录下。</p>\n<blockquote>\n<p>具体提升哪个父依赖的相同子依赖，取决于哪个父依赖最早被安装</p>\n</blockquote>\n<p>比如下面这个例子，当某一个其他依赖demo-bar的父依赖C更新版本时，C所需要的demo-bar是1.0.1版本，且C是最早被安装的demo-bar的父依赖，那么1.0.1版本的demo-bar会提升到顶级的node_modules，其他的父依赖重新安装1.0.0版本的demo-bar</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">node_modules<br>└─ demo-bar // v1.0.1<br>   ├─ index.js<br>   └─ package.json<br>└─ demo-baz<br>   ├─ index.js<br>   ├─ package.json<br>   └─ node_modules<br>      └─ demo-bar // v1.0.0<br>         ├─ index.js<br>         └─ package.json<br>└─ demo-foo<br>   ├─ index.js<br>   ├─ package.json<br>   └─ node_modules<br>      └─ demo-bar // v1.0.0<br>         ├─ index.js<br>         └─ package.json<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"pnpm的解决方案\"><a href=\"#pnpm的解决方案\" class=\"headerlink\" title=\"pnpm的解决方案\"></a>pnpm的解决方案</h2><h3 id=\"硬链接和软链接\"><a href=\"#硬链接和软链接\" class=\"headerlink\" title=\"硬链接和软链接\"></a>硬链接和软链接</h3><p>硬链接（hard link）和软连接，又称符号链接（symbolic link）是操作系统中两种共享文件的链接方式。</p>\n<p>硬链接通过直接指向文件的索引块从而实现文件共享；软连接则创建一个新的文件（eg. 快捷方式），文件内容是要共享的文件的硬链接，示意图如下：</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/f1e85fbacc206f75936444f322c83c96.png\" alt=\"软链接和硬链接\"></p>\n<h3 id=\"pnpm的目录结构\"><a href=\"#pnpm的目录结构\" class=\"headerlink\" title=\"pnpm的目录结构\"></a>pnpm的目录结构</h3><p>pnpm通过软链接、硬链接以及全局依赖库来组织目录结构，从而解决了分身问题和幽灵依赖。</p>\n<p>pnpm将所有的包都安装在全局的 .pnpm-store 目录中（具体路径通过 <code>pnpm store path</code>查询），这是全局依赖库，以下称为store。所有项目的所需依赖都通过硬链接的方式从store链接到node_modules的.pnpm目录中，再用软连接，将.pnpm中的顶层依赖链接到node_modules目录下。</p>\n<p>一个简单的例子：<a href=\"mailto:&#100;&#101;&#x6d;&#111;&#x2d;&#98;&#97;&#122;&#x40;&#x31;&#46;&#48;&#x2e;&#48;\">&#100;&#101;&#x6d;&#111;&#x2d;&#98;&#97;&#122;&#x40;&#x31;&#46;&#48;&#x2e;&#48;</a>和<a href=\"mailto:&#x64;&#x65;&#x6d;&#x6f;&#45;&#102;&#111;&#111;&#64;&#49;&#x2e;&#x30;&#46;&#49;\">&#x64;&#x65;&#x6d;&#x6f;&#45;&#102;&#111;&#111;&#64;&#49;&#x2e;&#x30;&#46;&#49;</a>是经显式install的顶层依赖，demo-bar是它们的子依赖。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">node_modules<br>└─ .pnpm<br>   └─ demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><br>      └─ node_modules<br>         └─ demo-bar -&gt; &lt;store&gt;/demo-bar<br>   └─ demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><br>      └─ node_modules<br>         └─ demo-bar -&gt; &lt;store&gt;/demo-bar<br>   └─ demo-baz@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><br>      └─ node_modules<br>         ├─ demo-bar -&gt; ..<span class=\"hljs-regexp\">/../</span>demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-regexp\">/node_modules/</span>demo-bar<br>         └─ demo-baz -&gt; &lt;store&gt;/demo-baz<br>   └─ demo-foo@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><br>      └─ node_modules<br>         ├─ demo-bar -&gt; ..<span class=\"hljs-regexp\">/../</span>demo-bar@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/node_modules/</span>demo-bar<br>         └─ demo-foo -&gt; &lt;store&gt;/demo-foo<br>└─ demo-baz -&gt; .<span class=\"hljs-regexp\">/pnpm/</span>demo-baz@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-regexp\">/node_modules/</span>demo-baz<br>└─ demo-foo -&gt; .<span class=\"hljs-regexp\">/pnpm/</span>demo-foo@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/node_modules/</span>demo-foo<br></code></pre></td></tr></table></figure>\n\n<p>好处：</p>\n<ul>\n<li>.pnpm目录中采用硬链接，所以可以达到包复用的目的</li>\n<li>.pnpm中依赖的node_modules中采用的仍然是扁平式目录，无论demo-foo中嵌套多少层子依赖，它的文件目录的深度依然不变</li>\n<li>由于顶层依赖中没有了子依赖，所以就避免了幽灵依赖</li>\n<li>不同版本的相同子依赖都会存在于顶层.pnpm下，因此某个依赖更新子依赖并不会影响其他依赖的子依赖，依然可以通过硬链接实现依赖的复用，这就解决了分身问题。</li>\n</ul>\n<h2 id=\"pnpm的局限性\"><a href=\"#pnpm的局限性\" class=\"headerlink\" title=\"pnpm的局限性\"></a>pnpm的局限性</h2><ol>\n<li>由于符号连接（symbolic link）在一些场景下有兼容性问题，目前在 Eletron 以及 labmda 部署的应用上无法使用 pnpm</li>\n<li>由于全局公用同一份store，因此当某个项目修改node_modules中的内容时，会直接影响全局store中对应的内容，这会对其他的项目造成影响。关于这个问题，最好的解决方法是clone（copy-on-write写入前复制）：修改前，创建一个新的引用指向当前的文件。</li>\n<li>并不是所有的命令pnpm都很快，例如pnpm run 就比较慢 </li>\n</ol>\n"},{"title":"JS的各种类型继承模式总结","date":"2023-05-07T02:51:31.000Z","index_img":"http://182.44.49.100:34/images/20230507171452.png","banner_img":"http://182.44.49.100:34/images/20230507171452.png","_content":"\n# 原型式继承\n\n+ 原型式继承就是`Object.create()`的实现原理。\n+ 原型式继承非常适用于不需要单独创建构造函数，但仍需要在对象实例之间共享信息的场合。\n\n```js\n function create(o){\n    // 创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型\n    function F(){}  \n    F.prototype = o\n    return new F()\n  }\n  let sup = {name:'jiabin'};\n  let sub = create(sup);\n  sub.age = 23\n  console.log(sub);\n```\n\n![image-20230507160253096](http://182.44.49.100:34/images/image-20230507160253096.png)\n\n> 记住`create()`这个函数，下文的代码中会反复用到\n\n# 寄生式继承\n\n```js\n  function createAnother(o){\n    let clone = create(o);   // 调用函数创建一个新的实现继承的对象\n    clone.sayHi = function(){   // 以某种方式增强这个对象\n      console.log('hello');\n    }\n    return clone\n  }\n```\n\n与原型式继承比较接近的是寄生式继承，它的思想是在原型式继承的基础上，以某种方式对子对象进行改造（增强）。\n\n### 寄生式 vs 原型式\n\n+ 与原型式继承的不同之处是，寄生式继承不仅实现了实例之间的继承关系，并且增强了子实例。\n\n+ 寄生式与原型式都适合于不需要构造函数，只需关注对象实例的场景\n\n# 盗用构造函数\n\n由于原型链的原因，以上两种继承方式创建的对象之间是会共享引用类型的属性的，这导致不同的对象之间无法拥有自己独立的数据。\n\n通过调用父类构造函数的的call / apply函数，可以实现夫类型构造函数的借用。使得子类型的构造函数也能创建独立的父类型数据。\n\n``` js\n  function SupType(){\n    this.name = 'jiabin';\n    this.age = 23;\n    this.sayHi(){\n        console.log('hello!')\n    }\n  } \n  function SubType(){\n    SupType.apply(this)\n    this.job = 'worker'\n  }\n```\n\n由`SubType`构造函数创建的对象也包含`SupType`构造函数的属性，并且是对象本身所有的。但缺点是不能重用父类型的方法（大量同名同作用，但内存地址不相同的函数）\n\n# 组合继承\n\n```js\nfunction SupType(){\n    this.name = 'jiabin';\n    this.age = 23\n  }\n  SupType.prototype.getName = function(){\n    console.log(this.name);\n  }\n  function SubType(){\n    this.job='programmer'\n    SupType.apply(this)    // 盗用父类构造函数\n  }\n  SubType.prototype = new SupType();     // 第二次调用父类构造函数\n  SubType.prototype.constructor = SubType   // 修正子类型原型的constructor值，保持原型链不变，使得instanceof和isPropertyOf()正常有效\n  sub = new SubType()\n  console.log(sub);\n```\n\n![image-20230507160643061](http://182.44.49.100:34/images/image-20230507160643061.png)\n\n综合了原型链和盗用构造函数，使得子类型的实例既可以实现方法重用，又可以拥有自己的属性数据\n\n\n\n# 寄生式组合继承\n\n组合继承实现了基本的方法重用和独立属性，但他存在着效率问题。\n\n+ 最主要的效率问题是父类型的构造函数被调用了两次，一次是在盗用构造函数时，另一次是在给子类型构造函数的原型赋值时。实际上，对于第二次调用，目的只是为了重写子类型的原型，完全不需要调用父类型构造函数来实例化一个父类对象这么麻烦，可以通过创建一个继承父类型的简单对象（寄生于父类型原型的寄生虫），然后增强这个对象（寄生虫），实现子类型对父类型的继承\n+ 其次是子类型构造函数的原型中存在着冗余的父类型的属性。\n\n```js\n  function SupType1(){\n    this.name = 'jiabin';\n    this.age = 23;\n  }\n\n  // 在父类型的原型上声明可让子类型重用的方法\n  SupType1.prototype.getAge = function(){\n    console.log(this.age);\n  }\n\n  function SubType1(){\n    SupType.apply(this)\n    this.job = 'worker'\n  }\n\n  function inheritSupType(SupType,SubType){\n    let prototype = create(SupType.prototype);  // 创建一个寄生虫对象，它就是子类型的原型\n    prototype.constructor = SubType    // 修正寄生虫对象的constructor的值\n    SubType.prototype = prototype      // 给子类型的原型重新赋值\n  }\n  inheritSupType(SupType1,SubType1);\n\n  sub = new SubType1();\n  console.log(sub);\n\n```\n\n![image-20230507162321625](http://182.44.49.100:34/images/image-20230507162321625.png)\n\n可以看到**没有了冗余**的父类型属性，而且不同的子类型示例**可以重用**同一个父类型的方法。\n\n\n\n# 总结\n\n+ 原型式继承和寄生式继承适用于继承某个对象实例的场景。创建的对象存在数据共享的问题\n+ 在子类型构造函数中盗用父类型构造函数，解决了数据共享问题，但是引发方法不能重用的问题\n+ 组合继承，组合了盗用构造函数和原型链，解决了上述两个问题，但存在效率问题和冗余父类型属性\n+ 寄生式组合继承解决了组合继承的效率问题、避免了冗余对的父类属性，是最佳的类型继承范式，是ES6 extends关键字的实现原理。\n\n总而言之，在ES6之前，JS 的确可以通过各种操作模拟类似于类的行为，但最终实现的代码显得非常冗长和杂乱，这也正是ES6 推出类（class) 这个语法糖结构的必要性所在。但同时需要指明的是，class背后使用的仍然是原型和构造函数的概念。\n","source":"_posts/inherit.md","raw":"---\ntitle: JS的各种类型继承模式总结\ndate: 2023-05-07 10:51:31\ntags: [类型继承,原型,寄生式组合继承]\ncategories: [JavaScript]\nindex_img: http://182.44.49.100:34/images/20230507171452.png\nbanner_img: http://182.44.49.100:34/images/20230507171452.png\n---\n\n# 原型式继承\n\n+ 原型式继承就是`Object.create()`的实现原理。\n+ 原型式继承非常适用于不需要单独创建构造函数，但仍需要在对象实例之间共享信息的场合。\n\n```js\n function create(o){\n    // 创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型\n    function F(){}  \n    F.prototype = o\n    return new F()\n  }\n  let sup = {name:'jiabin'};\n  let sub = create(sup);\n  sub.age = 23\n  console.log(sub);\n```\n\n![image-20230507160253096](http://182.44.49.100:34/images/image-20230507160253096.png)\n\n> 记住`create()`这个函数，下文的代码中会反复用到\n\n# 寄生式继承\n\n```js\n  function createAnother(o){\n    let clone = create(o);   // 调用函数创建一个新的实现继承的对象\n    clone.sayHi = function(){   // 以某种方式增强这个对象\n      console.log('hello');\n    }\n    return clone\n  }\n```\n\n与原型式继承比较接近的是寄生式继承，它的思想是在原型式继承的基础上，以某种方式对子对象进行改造（增强）。\n\n### 寄生式 vs 原型式\n\n+ 与原型式继承的不同之处是，寄生式继承不仅实现了实例之间的继承关系，并且增强了子实例。\n\n+ 寄生式与原型式都适合于不需要构造函数，只需关注对象实例的场景\n\n# 盗用构造函数\n\n由于原型链的原因，以上两种继承方式创建的对象之间是会共享引用类型的属性的，这导致不同的对象之间无法拥有自己独立的数据。\n\n通过调用父类构造函数的的call / apply函数，可以实现夫类型构造函数的借用。使得子类型的构造函数也能创建独立的父类型数据。\n\n``` js\n  function SupType(){\n    this.name = 'jiabin';\n    this.age = 23;\n    this.sayHi(){\n        console.log('hello!')\n    }\n  } \n  function SubType(){\n    SupType.apply(this)\n    this.job = 'worker'\n  }\n```\n\n由`SubType`构造函数创建的对象也包含`SupType`构造函数的属性，并且是对象本身所有的。但缺点是不能重用父类型的方法（大量同名同作用，但内存地址不相同的函数）\n\n# 组合继承\n\n```js\nfunction SupType(){\n    this.name = 'jiabin';\n    this.age = 23\n  }\n  SupType.prototype.getName = function(){\n    console.log(this.name);\n  }\n  function SubType(){\n    this.job='programmer'\n    SupType.apply(this)    // 盗用父类构造函数\n  }\n  SubType.prototype = new SupType();     // 第二次调用父类构造函数\n  SubType.prototype.constructor = SubType   // 修正子类型原型的constructor值，保持原型链不变，使得instanceof和isPropertyOf()正常有效\n  sub = new SubType()\n  console.log(sub);\n```\n\n![image-20230507160643061](http://182.44.49.100:34/images/image-20230507160643061.png)\n\n综合了原型链和盗用构造函数，使得子类型的实例既可以实现方法重用，又可以拥有自己的属性数据\n\n\n\n# 寄生式组合继承\n\n组合继承实现了基本的方法重用和独立属性，但他存在着效率问题。\n\n+ 最主要的效率问题是父类型的构造函数被调用了两次，一次是在盗用构造函数时，另一次是在给子类型构造函数的原型赋值时。实际上，对于第二次调用，目的只是为了重写子类型的原型，完全不需要调用父类型构造函数来实例化一个父类对象这么麻烦，可以通过创建一个继承父类型的简单对象（寄生于父类型原型的寄生虫），然后增强这个对象（寄生虫），实现子类型对父类型的继承\n+ 其次是子类型构造函数的原型中存在着冗余的父类型的属性。\n\n```js\n  function SupType1(){\n    this.name = 'jiabin';\n    this.age = 23;\n  }\n\n  // 在父类型的原型上声明可让子类型重用的方法\n  SupType1.prototype.getAge = function(){\n    console.log(this.age);\n  }\n\n  function SubType1(){\n    SupType.apply(this)\n    this.job = 'worker'\n  }\n\n  function inheritSupType(SupType,SubType){\n    let prototype = create(SupType.prototype);  // 创建一个寄生虫对象，它就是子类型的原型\n    prototype.constructor = SubType    // 修正寄生虫对象的constructor的值\n    SubType.prototype = prototype      // 给子类型的原型重新赋值\n  }\n  inheritSupType(SupType1,SubType1);\n\n  sub = new SubType1();\n  console.log(sub);\n\n```\n\n![image-20230507162321625](http://182.44.49.100:34/images/image-20230507162321625.png)\n\n可以看到**没有了冗余**的父类型属性，而且不同的子类型示例**可以重用**同一个父类型的方法。\n\n\n\n# 总结\n\n+ 原型式继承和寄生式继承适用于继承某个对象实例的场景。创建的对象存在数据共享的问题\n+ 在子类型构造函数中盗用父类型构造函数，解决了数据共享问题，但是引发方法不能重用的问题\n+ 组合继承，组合了盗用构造函数和原型链，解决了上述两个问题，但存在效率问题和冗余父类型属性\n+ 寄生式组合继承解决了组合继承的效率问题、避免了冗余对的父类属性，是最佳的类型继承范式，是ES6 extends关键字的实现原理。\n\n总而言之，在ES6之前，JS 的确可以通过各种操作模拟类似于类的行为，但最终实现的代码显得非常冗长和杂乱，这也正是ES6 推出类（class) 这个语法糖结构的必要性所在。但同时需要指明的是，class背后使用的仍然是原型和构造函数的概念。\n","slug":"inherit","published":1,"updated":"2023-05-07T09:19:34.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0xd000c0kv309zz1vs2","content":"<h1 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h1><ul>\n<li>原型式继承就是<code>Object.create()</code>的实现原理。</li>\n<li>原型式继承非常适用于不需要单独创建构造函数，但仍需要在对象实例之间共享信息的场合。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\">o</span>)&#123;<br>   <span class=\"hljs-comment\">// 创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型</span><br>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>)&#123;&#125;  <br>   F.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = o<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">F</span>()<br> &#125;<br> <span class=\"hljs-keyword\">let</span> sup = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;jiabin&#x27;</span>&#125;;<br> <span class=\"hljs-keyword\">let</span> sub = <span class=\"hljs-title function_\">create</span>(sup);<br> sub.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span><br> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sub);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://182.44.49.100:34/images/image-20230507160253096.png\" alt=\"image-20230507160253096\"></p>\n<blockquote>\n<p>记住<code>create()</code>这个函数，下文的代码中会反复用到</p>\n</blockquote>\n<h1 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createAnother</span>(<span class=\"hljs-params\">o</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> clone = <span class=\"hljs-title function_\">create</span>(o);   <span class=\"hljs-comment\">// 调用函数创建一个新的实现继承的对象</span><br>  clone.<span class=\"hljs-property\">sayHi</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;   <span class=\"hljs-comment\">// 以某种方式增强这个对象</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> clone<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>与原型式继承比较接近的是寄生式继承，它的思想是在原型式继承的基础上，以某种方式对子对象进行改造（增强）。</p>\n<h3 id=\"寄生式-vs-原型式\"><a href=\"#寄生式-vs-原型式\" class=\"headerlink\" title=\"寄生式 vs 原型式\"></a>寄生式 vs 原型式</h3><ul>\n<li><p>与原型式继承的不同之处是，寄生式继承不仅实现了实例之间的继承关系，并且增强了子实例。</p>\n</li>\n<li><p>寄生式与原型式都适合于不需要构造函数，只需关注对象实例的场景</p>\n</li>\n</ul>\n<h1 id=\"盗用构造函数\"><a href=\"#盗用构造函数\" class=\"headerlink\" title=\"盗用构造函数\"></a>盗用构造函数</h1><p>由于原型链的原因，以上两种继承方式创建的对象之间是会共享引用类型的属性的，这导致不同的对象之间无法拥有自己独立的数据。</p>\n<p>通过调用父类构造函数的的call / apply函数，可以实现夫类型构造函数的借用。使得子类型的构造函数也能创建独立的父类型数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SupType</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;jiabin&#x27;</span>;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span>;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello!&#x27;</span>)<br>  &#125;<br>&#125; <br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>)<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = <span class=\"hljs-string\">&#x27;worker&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由<code>SubType</code>构造函数创建的对象也包含<code>SupType</code>构造函数的属性，并且是对象本身所有的。但缺点是不能重用父类型的方法（大量同名同作用，但内存地址不相同的函数）</p>\n<h1 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SupType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;jiabin&#x27;</span>;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span><br>  &#125;<br>  <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>=<span class=\"hljs-string\">&#x27;programmer&#x27;</span><br>    <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>)    <span class=\"hljs-comment\">// 盗用父类构造函数</span><br>  &#125;<br>  <span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SupType</span>();     <span class=\"hljs-comment\">// 第二次调用父类构造函数</span><br>  <span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">SubType</span>   <span class=\"hljs-comment\">// 修正子类型原型的constructor值，保持原型链不变，使得instanceof和isPropertyOf()正常有效</span><br>  sub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>()<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sub);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://182.44.49.100:34/images/image-20230507160643061.png\" alt=\"image-20230507160643061\"></p>\n<p>综合了原型链和盗用构造函数，使得子类型的实例既可以实现方法重用，又可以拥有自己的属性数据</p>\n<h1 id=\"寄生式组合继承\"><a href=\"#寄生式组合继承\" class=\"headerlink\" title=\"寄生式组合继承\"></a>寄生式组合继承</h1><p>组合继承实现了基本的方法重用和独立属性，但他存在着效率问题。</p>\n<ul>\n<li>最主要的效率问题是父类型的构造函数被调用了两次，一次是在盗用构造函数时，另一次是在给子类型构造函数的原型赋值时。实际上，对于第二次调用，目的只是为了重写子类型的原型，完全不需要调用父类型构造函数来实例化一个父类对象这么麻烦，可以通过创建一个继承父类型的简单对象（寄生于父类型原型的寄生虫），然后增强这个对象（寄生虫），实现子类型对父类型的继承</li>\n<li>其次是子类型构造函数的原型中存在着冗余的父类型的属性。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SupType1</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;jiabin&#x27;</span>;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 在父类型的原型上声明可让子类型重用的方法</span><br><span class=\"hljs-title class_\">SupType1</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getAge</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType1</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>)<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = <span class=\"hljs-string\">&#x27;worker&#x27;</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inheritSupType</span>(<span class=\"hljs-params\">SupType,SubType</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> prototype = <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);  <span class=\"hljs-comment\">// 创建一个寄生虫对象，它就是子类型的原型</span><br>  prototype.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">SubType</span>    <span class=\"hljs-comment\">// 修正寄生虫对象的constructor的值</span><br>  <span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = prototype      <span class=\"hljs-comment\">// 给子类型的原型重新赋值</span><br>&#125;<br><span class=\"hljs-title function_\">inheritSupType</span>(<span class=\"hljs-title class_\">SupType1</span>,<span class=\"hljs-title class_\">SubType1</span>);<br><br>sub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType1</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sub);<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://182.44.49.100:34/images/image-20230507162321625.png\" alt=\"image-20230507162321625\"></p>\n<p>可以看到<strong>没有了冗余</strong>的父类型属性，而且不同的子类型示例<strong>可以重用</strong>同一个父类型的方法。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>原型式继承和寄生式继承适用于继承某个对象实例的场景。创建的对象存在数据共享的问题</li>\n<li>在子类型构造函数中盗用父类型构造函数，解决了数据共享问题，但是引发方法不能重用的问题</li>\n<li>组合继承，组合了盗用构造函数和原型链，解决了上述两个问题，但存在效率问题和冗余父类型属性</li>\n<li>寄生式组合继承解决了组合继承的效率问题、避免了冗余对的父类属性，是最佳的类型继承范式，是ES6 extends关键字的实现原理。</li>\n</ul>\n<p>总而言之，在ES6之前，JS 的确可以通过各种操作模拟类似于类的行为，但最终实现的代码显得非常冗长和杂乱，这也正是ES6 推出类（class) 这个语法糖结构的必要性所在。但同时需要指明的是，class背后使用的仍然是原型和构造函数的概念。</p>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<h1 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h1><ul>\n<li>原型式继承就是<code>Object.create()</code>的实现原理。</li>\n<li>原型式继承非常适用于不需要单独创建构造函数，但仍需要在对象实例之间共享信息的场合。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\">o</span>)&#123;<br>   <span class=\"hljs-comment\">// 创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型</span><br>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>)&#123;&#125;  <br>   F.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = o<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">F</span>()<br> &#125;<br> <span class=\"hljs-keyword\">let</span> sup = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;jiabin&#x27;</span>&#125;;<br> <span class=\"hljs-keyword\">let</span> sub = <span class=\"hljs-title function_\">create</span>(sup);<br> sub.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span><br> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sub);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://182.44.49.100:34/images/image-20230507160253096.png\" alt=\"image-20230507160253096\"></p>\n<blockquote>\n<p>记住<code>create()</code>这个函数，下文的代码中会反复用到</p>\n</blockquote>\n<h1 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createAnother</span>(<span class=\"hljs-params\">o</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> clone = <span class=\"hljs-title function_\">create</span>(o);   <span class=\"hljs-comment\">// 调用函数创建一个新的实现继承的对象</span><br>  clone.<span class=\"hljs-property\">sayHi</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;   <span class=\"hljs-comment\">// 以某种方式增强这个对象</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> clone<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>与原型式继承比较接近的是寄生式继承，它的思想是在原型式继承的基础上，以某种方式对子对象进行改造（增强）。</p>\n<h3 id=\"寄生式-vs-原型式\"><a href=\"#寄生式-vs-原型式\" class=\"headerlink\" title=\"寄生式 vs 原型式\"></a>寄生式 vs 原型式</h3><ul>\n<li><p>与原型式继承的不同之处是，寄生式继承不仅实现了实例之间的继承关系，并且增强了子实例。</p>\n</li>\n<li><p>寄生式与原型式都适合于不需要构造函数，只需关注对象实例的场景</p>\n</li>\n</ul>\n<h1 id=\"盗用构造函数\"><a href=\"#盗用构造函数\" class=\"headerlink\" title=\"盗用构造函数\"></a>盗用构造函数</h1><p>由于原型链的原因，以上两种继承方式创建的对象之间是会共享引用类型的属性的，这导致不同的对象之间无法拥有自己独立的数据。</p>\n<p>通过调用父类构造函数的的call / apply函数，可以实现夫类型构造函数的借用。使得子类型的构造函数也能创建独立的父类型数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SupType</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;jiabin&#x27;</span>;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span>;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello!&#x27;</span>)<br>  &#125;<br>&#125; <br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>)<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = <span class=\"hljs-string\">&#x27;worker&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由<code>SubType</code>构造函数创建的对象也包含<code>SupType</code>构造函数的属性，并且是对象本身所有的。但缺点是不能重用父类型的方法（大量同名同作用，但内存地址不相同的函数）</p>\n<h1 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SupType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;jiabin&#x27;</span>;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span><br>  &#125;<br>  <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span>=<span class=\"hljs-string\">&#x27;programmer&#x27;</span><br>    <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>)    <span class=\"hljs-comment\">// 盗用父类构造函数</span><br>  &#125;<br>  <span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SupType</span>();     <span class=\"hljs-comment\">// 第二次调用父类构造函数</span><br>  <span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">SubType</span>   <span class=\"hljs-comment\">// 修正子类型原型的constructor值，保持原型链不变，使得instanceof和isPropertyOf()正常有效</span><br>  sub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>()<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sub);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://182.44.49.100:34/images/image-20230507160643061.png\" alt=\"image-20230507160643061\"></p>\n<p>综合了原型链和盗用构造函数，使得子类型的实例既可以实现方法重用，又可以拥有自己的属性数据</p>\n<h1 id=\"寄生式组合继承\"><a href=\"#寄生式组合继承\" class=\"headerlink\" title=\"寄生式组合继承\"></a>寄生式组合继承</h1><p>组合继承实现了基本的方法重用和独立属性，但他存在着效率问题。</p>\n<ul>\n<li>最主要的效率问题是父类型的构造函数被调用了两次，一次是在盗用构造函数时，另一次是在给子类型构造函数的原型赋值时。实际上，对于第二次调用，目的只是为了重写子类型的原型，完全不需要调用父类型构造函数来实例化一个父类对象这么麻烦，可以通过创建一个继承父类型的简单对象（寄生于父类型原型的寄生虫），然后增强这个对象（寄生虫），实现子类型对父类型的继承</li>\n<li>其次是子类型构造函数的原型中存在着冗余的父类型的属性。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SupType1</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;jiabin&#x27;</span>;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">23</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 在父类型的原型上声明可让子类型重用的方法</span><br><span class=\"hljs-title class_\">SupType1</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getAge</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType1</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>)<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">job</span> = <span class=\"hljs-string\">&#x27;worker&#x27;</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inheritSupType</span>(<span class=\"hljs-params\">SupType,SubType</span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> prototype = <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">SupType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);  <span class=\"hljs-comment\">// 创建一个寄生虫对象，它就是子类型的原型</span><br>  prototype.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">SubType</span>    <span class=\"hljs-comment\">// 修正寄生虫对象的constructor的值</span><br>  <span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = prototype      <span class=\"hljs-comment\">// 给子类型的原型重新赋值</span><br>&#125;<br><span class=\"hljs-title function_\">inheritSupType</span>(<span class=\"hljs-title class_\">SupType1</span>,<span class=\"hljs-title class_\">SubType1</span>);<br><br>sub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType1</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sub);<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://182.44.49.100:34/images/image-20230507162321625.png\" alt=\"image-20230507162321625\"></p>\n<p>可以看到<strong>没有了冗余</strong>的父类型属性，而且不同的子类型示例<strong>可以重用</strong>同一个父类型的方法。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>原型式继承和寄生式继承适用于继承某个对象实例的场景。创建的对象存在数据共享的问题</li>\n<li>在子类型构造函数中盗用父类型构造函数，解决了数据共享问题，但是引发方法不能重用的问题</li>\n<li>组合继承，组合了盗用构造函数和原型链，解决了上述两个问题，但存在效率问题和冗余父类型属性</li>\n<li>寄生式组合继承解决了组合继承的效率问题、避免了冗余对的父类属性，是最佳的类型继承范式，是ES6 extends关键字的实现原理。</li>\n</ul>\n<p>总而言之，在ES6之前，JS 的确可以通过各种操作模拟类似于类的行为，但最终实现的代码显得非常冗长和杂乱，这也正是ES6 推出类（class) 这个语法糖结构的必要性所在。但同时需要指明的是，class背后使用的仍然是原型和构造函数的概念。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-03-20T14:55:17.581Z","updated":"2023-03-20T09:10:05.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0xe000d0kv3gcov8v8b","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"vue2电商练手项目","date":"2023-04-09T07:07:15.000Z","_content":"\n*完成了一个 Vue2 的的练手项目，记录部分项目开发流程和技术点*\n\n### 创建 Vue 项目\n\n+ 创建vue项目：在根目录cmd `vue create xxx`\n+ 创建vue项目时就勾上Router，免得开发时再手动安装 vue-router 插件包。同理把 css preprocess也勾选上，免得手动安装 less loader 包\n\n\n\n### eslint常见报错类型\n\n+ 组件的命名必须是**多个**单词的驼峰命名\n+ 组件通过 `import` 引入后必须注册，注册后必须使用，变量、方法同理\n+ `import` 引入组件的文件时**不能**带上 .vue 后缀\n\n\n\n### 文件树规范\n\n+ node_modules 是包裹项目依赖的各个包的文件夹\n+ public 中存放的是**静态页面** index.html （vue和react一般用来开发单页面应用，单页面应用自然要有一个html文件）和一些**静态资源**（图片）。放在public文件夹的资源在 webpack 打包时会原封不动的放到dist文件夹中\n\n+ src 意为**源码**，顾名思义该目录是开发者写代码的文件夹\n  + assets 也是放置**静态资源**（一般放置多个组件共用的静态资源）。与 public 不同的是，放置在 assets 文件夹中的静态资源，在webpack打包时会被当做一个模块，打包在 js 文件里\n  + components 一般放置的是**非路由组件**（全局组件），不管跳转到哪个 page 页面上都会有的组件，通常以 html 标签的方式使用\n  + pages 放置**路由组件**，即经路由跳转到的组件，通常用 `router-view` 来使用\n  + router 项目当中配置的**路由‘器’**放置在 router 文件夹中。\n  + App.vue 是项目中的**唯一根组件**\n  + main.js 是程序的入口文件，也是整个程序当中最先执行的文件\n+ babel.config.js 是 babel 的配置文件。可以把 babel 理解为翻译官，负责把 ES6 语法翻译为 ES5 兼容性更好\n+ vue.confg.js 是 vue 项目的可选配置文件，运行时会被自动加载。用于配置打包dist文件夹的路径、webpack、Babel、eslint的设置等等，详见[https://cli.vuejs.org/zh/config/#](https://links.jianshu.com/go?to=https%3A%2F%2Fcli.vuejs.org%2Fzh%2Fconfig%2F%23)\n+ package.json 可以理解为是项目的身份证，记录着项目的信息（项目叫什么，版本是多少，运行脚本是什么，依赖有哪些）\n+ package-lock.json 缓存性文件，告诉我项目的依赖包是从哪里下载的\n+ readme.md 说明性的文件\n\n\n\n### 路由相关\n\n**使用路由的流程**\n\n​\t\t在 index.js 引入 vue-router 插件 **=>** Vue.use() 注册引用的插件 **=>** 定义路由配置 **=>** 在main.js中引入定好的路由 **=>** 把引入的路由作为根组件的选项添加进去。\n\n+ 前端的路由表现为 url : component 的键值对，这种 component 被称为路由组件。\n\n+ 在使用时一定要**注册路由**：在 main.js 中用 `import router from '@/router/index.js' ` 引入 `router` ，并将其添加到 Vue 根组件的选项上。\n\n+ 注册完路由，会发生神奇的事情，不管是非路由组件还是路由组件，他们身上都会获得 `$route` 和 `$router` 属性。`$route` ：一般获取**路由信息**（路径、query、params，meta），`$router` 是**路由操作**对象，用于实现编程式导航进行路由跳转（push | replace）。\n\n+ **路由重定向**`{path: '/', redirect: '/home'}  ` ，打开域名直接跳转到首页\n\n+ 路由的跳转分两种：\n\n  + 声明式导航，用 `router-link` 代替 `<a>...</a>` 用户点击，直接进行路由跳转\t\n\n  + 编程式导航，用 `$router.push()` 和 `$router.replace()` 进行路由跳转。比如，用户点击登录时，我们不希望直接进行跳转，而是先进行账户验证后再发生跳转。  在跳转发生前后做一些动作，这就是编程式导航的典型应用场景\n\n+ 路由重定向：将一个 url 重定向为指向另一个 url。\n\n+ **路由元信息**：他是一个Object。有时，你可能希望将任意**信息附加**到路由上，如过渡名称、谁可以访问路由、在该路由下那些组件隐藏等。这些事情可以通过接收属性对象的`meta`属性来实现，并且它可以在路由地址和导航守卫上都被访问到。\n\n+ **路由传参**分两种：\n\n  + params参数：实现**动态路由**，必须在路由的 path 处添加 `:/xxx` 的占位符。\n    + 当路由的path里设置了占位符，默认是必须传 params 参数的。如果路由跳转时却没有提供 params 参数，则跳转后的 url 中就会有 url 路径缺失的现象，这当然不是我们希望看到的。所以，尽量在路由中定义占位符时加上一个问号 `:/xxx?` 代表着 params 参数可传可不传。\n  + query参数：即`path?xxx=1&xxx=2`这样用于搜索的参数。\n\n  > 当需要路由传参时，推荐使用命名路由的name进行路由检索，当然这**只能**用于push的**对象参数**（另一种原始的参数是字符串参数）。\n  >\n  > 另外要注意：push的对象参数里，path 和 params是**不可同时使用**的，如果要传params，必须用name来指定路由\n\n  + 给**路由组件传递props**：在路由定义处设置，常用函数式传递，既能传递 params 和query参数又能传递自定义数据。\n\n\n\n### 页面组件结构\n\n典型的上中下结构\n\n![组件结构](http://182.44.49.100:34/images/2023/05/06/99a042307be2e6e58cd703214d0c07a4.png)\n\n\n\n### 技术点\n\n![技术点](http://182.44.49.100:34/images/2023/05/06/7801634e91006adb2b0a329401f8cbba.png)\n","source":"_posts/shop-app.md","raw":"---\ntitle: vue2电商练手项目\ndate: 2023-04-09 15:07:15\ntags: [vue2,电商项目,vuex,vue-router,mock,代理]\ncategories: [vue2]\n---\n\n*完成了一个 Vue2 的的练手项目，记录部分项目开发流程和技术点*\n\n### 创建 Vue 项目\n\n+ 创建vue项目：在根目录cmd `vue create xxx`\n+ 创建vue项目时就勾上Router，免得开发时再手动安装 vue-router 插件包。同理把 css preprocess也勾选上，免得手动安装 less loader 包\n\n\n\n### eslint常见报错类型\n\n+ 组件的命名必须是**多个**单词的驼峰命名\n+ 组件通过 `import` 引入后必须注册，注册后必须使用，变量、方法同理\n+ `import` 引入组件的文件时**不能**带上 .vue 后缀\n\n\n\n### 文件树规范\n\n+ node_modules 是包裹项目依赖的各个包的文件夹\n+ public 中存放的是**静态页面** index.html （vue和react一般用来开发单页面应用，单页面应用自然要有一个html文件）和一些**静态资源**（图片）。放在public文件夹的资源在 webpack 打包时会原封不动的放到dist文件夹中\n\n+ src 意为**源码**，顾名思义该目录是开发者写代码的文件夹\n  + assets 也是放置**静态资源**（一般放置多个组件共用的静态资源）。与 public 不同的是，放置在 assets 文件夹中的静态资源，在webpack打包时会被当做一个模块，打包在 js 文件里\n  + components 一般放置的是**非路由组件**（全局组件），不管跳转到哪个 page 页面上都会有的组件，通常以 html 标签的方式使用\n  + pages 放置**路由组件**，即经路由跳转到的组件，通常用 `router-view` 来使用\n  + router 项目当中配置的**路由‘器’**放置在 router 文件夹中。\n  + App.vue 是项目中的**唯一根组件**\n  + main.js 是程序的入口文件，也是整个程序当中最先执行的文件\n+ babel.config.js 是 babel 的配置文件。可以把 babel 理解为翻译官，负责把 ES6 语法翻译为 ES5 兼容性更好\n+ vue.confg.js 是 vue 项目的可选配置文件，运行时会被自动加载。用于配置打包dist文件夹的路径、webpack、Babel、eslint的设置等等，详见[https://cli.vuejs.org/zh/config/#](https://links.jianshu.com/go?to=https%3A%2F%2Fcli.vuejs.org%2Fzh%2Fconfig%2F%23)\n+ package.json 可以理解为是项目的身份证，记录着项目的信息（项目叫什么，版本是多少，运行脚本是什么，依赖有哪些）\n+ package-lock.json 缓存性文件，告诉我项目的依赖包是从哪里下载的\n+ readme.md 说明性的文件\n\n\n\n### 路由相关\n\n**使用路由的流程**\n\n​\t\t在 index.js 引入 vue-router 插件 **=>** Vue.use() 注册引用的插件 **=>** 定义路由配置 **=>** 在main.js中引入定好的路由 **=>** 把引入的路由作为根组件的选项添加进去。\n\n+ 前端的路由表现为 url : component 的键值对，这种 component 被称为路由组件。\n\n+ 在使用时一定要**注册路由**：在 main.js 中用 `import router from '@/router/index.js' ` 引入 `router` ，并将其添加到 Vue 根组件的选项上。\n\n+ 注册完路由，会发生神奇的事情，不管是非路由组件还是路由组件，他们身上都会获得 `$route` 和 `$router` 属性。`$route` ：一般获取**路由信息**（路径、query、params，meta），`$router` 是**路由操作**对象，用于实现编程式导航进行路由跳转（push | replace）。\n\n+ **路由重定向**`{path: '/', redirect: '/home'}  ` ，打开域名直接跳转到首页\n\n+ 路由的跳转分两种：\n\n  + 声明式导航，用 `router-link` 代替 `<a>...</a>` 用户点击，直接进行路由跳转\t\n\n  + 编程式导航，用 `$router.push()` 和 `$router.replace()` 进行路由跳转。比如，用户点击登录时，我们不希望直接进行跳转，而是先进行账户验证后再发生跳转。  在跳转发生前后做一些动作，这就是编程式导航的典型应用场景\n\n+ 路由重定向：将一个 url 重定向为指向另一个 url。\n\n+ **路由元信息**：他是一个Object。有时，你可能希望将任意**信息附加**到路由上，如过渡名称、谁可以访问路由、在该路由下那些组件隐藏等。这些事情可以通过接收属性对象的`meta`属性来实现，并且它可以在路由地址和导航守卫上都被访问到。\n\n+ **路由传参**分两种：\n\n  + params参数：实现**动态路由**，必须在路由的 path 处添加 `:/xxx` 的占位符。\n    + 当路由的path里设置了占位符，默认是必须传 params 参数的。如果路由跳转时却没有提供 params 参数，则跳转后的 url 中就会有 url 路径缺失的现象，这当然不是我们希望看到的。所以，尽量在路由中定义占位符时加上一个问号 `:/xxx?` 代表着 params 参数可传可不传。\n  + query参数：即`path?xxx=1&xxx=2`这样用于搜索的参数。\n\n  > 当需要路由传参时，推荐使用命名路由的name进行路由检索，当然这**只能**用于push的**对象参数**（另一种原始的参数是字符串参数）。\n  >\n  > 另外要注意：push的对象参数里，path 和 params是**不可同时使用**的，如果要传params，必须用name来指定路由\n\n  + 给**路由组件传递props**：在路由定义处设置，常用函数式传递，既能传递 params 和query参数又能传递自定义数据。\n\n\n\n### 页面组件结构\n\n典型的上中下结构\n\n![组件结构](http://182.44.49.100:34/images/2023/05/06/99a042307be2e6e58cd703214d0c07a4.png)\n\n\n\n### 技术点\n\n![技术点](http://182.44.49.100:34/images/2023/05/06/7801634e91006adb2b0a329401f8cbba.png)\n","slug":"shop-app","published":1,"updated":"2023-05-06T09:09:05.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhdcv0xf000h0kv35foo6ysh","content":"<p><em>完成了一个 Vue2 的的练手项目，记录部分项目开发流程和技术点</em></p>\n<h3 id=\"创建-Vue-项目\"><a href=\"#创建-Vue-项目\" class=\"headerlink\" title=\"创建 Vue 项目\"></a>创建 Vue 项目</h3><ul>\n<li>创建vue项目：在根目录cmd <code>vue create xxx</code></li>\n<li>创建vue项目时就勾上Router，免得开发时再手动安装 vue-router 插件包。同理把 css preprocess也勾选上，免得手动安装 less loader 包</li>\n</ul>\n<h3 id=\"eslint常见报错类型\"><a href=\"#eslint常见报错类型\" class=\"headerlink\" title=\"eslint常见报错类型\"></a>eslint常见报错类型</h3><ul>\n<li>组件的命名必须是<strong>多个</strong>单词的驼峰命名</li>\n<li>组件通过 <code>import</code> 引入后必须注册，注册后必须使用，变量、方法同理</li>\n<li><code>import</code> 引入组件的文件时<strong>不能</strong>带上 .vue 后缀</li>\n</ul>\n<h3 id=\"文件树规范\"><a href=\"#文件树规范\" class=\"headerlink\" title=\"文件树规范\"></a>文件树规范</h3><ul>\n<li><p>node_modules 是包裹项目依赖的各个包的文件夹</p>\n</li>\n<li><p>public 中存放的是<strong>静态页面</strong> index.html （vue和react一般用来开发单页面应用，单页面应用自然要有一个html文件）和一些<strong>静态资源</strong>（图片）。放在public文件夹的资源在 webpack 打包时会原封不动的放到dist文件夹中</p>\n</li>\n<li><p>src 意为<strong>源码</strong>，顾名思义该目录是开发者写代码的文件夹</p>\n<ul>\n<li>assets 也是放置<strong>静态资源</strong>（一般放置多个组件共用的静态资源）。与 public 不同的是，放置在 assets 文件夹中的静态资源，在webpack打包时会被当做一个模块，打包在 js 文件里</li>\n<li>components 一般放置的是<strong>非路由组件</strong>（全局组件），不管跳转到哪个 page 页面上都会有的组件，通常以 html 标签的方式使用</li>\n<li>pages 放置<strong>路由组件</strong>，即经路由跳转到的组件，通常用 <code>router-view</code> 来使用</li>\n<li>router 项目当中配置的<strong>路由‘器’</strong>放置在 router 文件夹中。</li>\n<li>App.vue 是项目中的<strong>唯一根组件</strong></li>\n<li>main.js 是程序的入口文件，也是整个程序当中最先执行的文件</li>\n</ul>\n</li>\n<li><p>babel.config.js 是 babel 的配置文件。可以把 babel 理解为翻译官，负责把 ES6 语法翻译为 ES5 兼容性更好</p>\n</li>\n<li><p>vue.confg.js 是 vue 项目的可选配置文件，运行时会被自动加载。用于配置打包dist文件夹的路径、webpack、Babel、eslint的设置等等，详见<a href=\"https://links.jianshu.com/go?to=https://cli.vuejs.org/zh/config/%23\">https://cli.vuejs.org/zh/config/#</a></p>\n</li>\n<li><p>package.json 可以理解为是项目的身份证，记录着项目的信息（项目叫什么，版本是多少，运行脚本是什么，依赖有哪些）</p>\n</li>\n<li><p>package-lock.json 缓存性文件，告诉我项目的依赖包是从哪里下载的</p>\n</li>\n<li><p>readme.md 说明性的文件</p>\n</li>\n</ul>\n<h3 id=\"路由相关\"><a href=\"#路由相关\" class=\"headerlink\" title=\"路由相关\"></a>路由相关</h3><p><strong>使用路由的流程</strong></p>\n<p>​        在 index.js 引入 vue-router 插件 <strong>=&gt;</strong> Vue.use() 注册引用的插件 <strong>=&gt;</strong> 定义路由配置 <strong>=&gt;</strong> 在main.js中引入定好的路由 <strong>=&gt;</strong> 把引入的路由作为根组件的选项添加进去。</p>\n<ul>\n<li><p>前端的路由表现为 url : component 的键值对，这种 component 被称为路由组件。</p>\n</li>\n<li><p>在使用时一定要<strong>注册路由</strong>：在 main.js 中用 <code>import router from &#39;@/router/index.js&#39; </code> 引入 <code>router</code> ，并将其添加到 Vue 根组件的选项上。</p>\n</li>\n<li><p>注册完路由，会发生神奇的事情，不管是非路由组件还是路由组件，他们身上都会获得 <code>$route</code> 和 <code>$router</code> 属性。<code>$route</code> ：一般获取<strong>路由信息</strong>（路径、query、params，meta），<code>$router</code> 是<strong>路由操作</strong>对象，用于实现编程式导航进行路由跳转（push | replace）。</p>\n</li>\n<li><p><strong>路由重定向</strong><code>&#123;path: &#39;/&#39;, redirect: &#39;/home&#39;&#125;  </code> ，打开域名直接跳转到首页</p>\n</li>\n<li><p>路由的跳转分两种：</p>\n<ul>\n<li><p>声明式导航，用 <code>router-link</code> 代替 <code>&lt;a&gt;...&lt;/a&gt;</code> 用户点击，直接进行路由跳转    </p>\n</li>\n<li><p>编程式导航，用 <code>$router.push()</code> 和 <code>$router.replace()</code> 进行路由跳转。比如，用户点击登录时，我们不希望直接进行跳转，而是先进行账户验证后再发生跳转。  在跳转发生前后做一些动作，这就是编程式导航的典型应用场景</p>\n</li>\n</ul>\n</li>\n<li><p>路由重定向：将一个 url 重定向为指向另一个 url。</p>\n</li>\n<li><p><strong>路由元信息</strong>：他是一个Object。有时，你可能希望将任意<strong>信息附加</strong>到路由上，如过渡名称、谁可以访问路由、在该路由下那些组件隐藏等。这些事情可以通过接收属性对象的<code>meta</code>属性来实现，并且它可以在路由地址和导航守卫上都被访问到。</p>\n</li>\n<li><p><strong>路由传参</strong>分两种：</p>\n<ul>\n<li>params参数：实现<strong>动态路由</strong>，必须在路由的 path 处添加 <code>:/xxx</code> 的占位符。<ul>\n<li>当路由的path里设置了占位符，默认是必须传 params 参数的。如果路由跳转时却没有提供 params 参数，则跳转后的 url 中就会有 url 路径缺失的现象，这当然不是我们希望看到的。所以，尽量在路由中定义占位符时加上一个问号 <code>:/xxx?</code> 代表着 params 参数可传可不传。</li>\n</ul>\n</li>\n<li>query参数：即<code>path?xxx=1&amp;xxx=2</code>这样用于搜索的参数。</li>\n</ul>\n<blockquote>\n<p>当需要路由传参时，推荐使用命名路由的name进行路由检索，当然这<strong>只能</strong>用于push的<strong>对象参数</strong>（另一种原始的参数是字符串参数）。</p>\n<p>另外要注意：push的对象参数里，path 和 params是<strong>不可同时使用</strong>的，如果要传params，必须用name来指定路由</p>\n</blockquote>\n<ul>\n<li>给<strong>路由组件传递props</strong>：在路由定义处设置，常用函数式传递，既能传递 params 和query参数又能传递自定义数据。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"页面组件结构\"><a href=\"#页面组件结构\" class=\"headerlink\" title=\"页面组件结构\"></a>页面组件结构</h3><p>典型的上中下结构</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/99a042307be2e6e58cd703214d0c07a4.png\" alt=\"组件结构\"></p>\n<h3 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h3><p><img src=\"http://182.44.49.100:34/images/2023/05/06/7801634e91006adb2b0a329401f8cbba.png\" alt=\"技术点\"></p>\n","site":{"data":{"fluid_config":{"favicon":"http://182.44.49.100:34/images/fluid.png","apple_touch_icon":"http://182.44.49.100:34/images/2023/05/06/fluid.png","tab_title_separator":" - ","force_https":false,"code":{"copy_btn":true,"language":{"enable":true,"default":"TEXT"},"highlight":{"enable":true,"line_number":true,"lib":"highlightjs","highlightjs":{"style":"github gist","style_dark":"dark"},"prismjs":{"style":"default","style_dark":"tomorrow night","preprocess":true}}},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false,"scope":[]},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"left","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","subtitle_color":"#fff","subtitle_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","board_color":"#fff","board_color_dark":"#252d38","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","line_color":"#eaecef","line_color_dark":"#435266","scrollbar_color":"#c4c6c9","scrollbar_color_dark":"#687582","scrollbar_hover_color":"#a6a6a6","scrollbar_hover_color_dark":"#9da8b3","button_bg_color":"transparent","button_bg_color_dark":"transparent","button_hover_bg_color":"#f2f3f5","button_hover_bg_color_dark":"#46647e"},"font":{"font_size":"16px","font_family":null,"letter_spacing":"0.02em","code_font_size":"85%"},"custom_js":null,"custom_css":null,"web_analytics":{"enable":true,"follow_dnt":false,"baidu":"103e72537b3063b8cce2f0ffde4ac39c","google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","app_key":"G6QQBTQciP4LO2OHPGWTQLT3","server_url":"https://9plblvop.lc-cn-e1-shared.com","path":"window.location.pathname","ignore_local":true}},"lazyload":{"enable":true,"loading_img":"http://182.44.49.100:34/images/2023/05/06/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_1736178_lbnruvf0jn.css","navbar":{"blog_title":"Mongobin","ground_glass":{"enable":true,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"banner":{"parallax":true,"width_height_ratio":1},"scroll_down_arrow":{"enable":true,"banner_height_limit":80,"scroll_after_turning_page":true},"scroll_top_arrow":{"enable":true},"open_graph":{"enable":true,"twitter_card":"summary_large_image","twitter_id":null,"twitter_site":null,"google_plus":null,"fb_admins":null,"fb_app_id":null},"footer":{"content":" <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>🥝Jabin</span></a> <i class=\"iconfont icon-love\"></i> <a href=\"#\" target=\"_self\" rel=\"nofollow noopener\"><span>SunnyZ🥝</span></a> ","statistics":{"enable":true,"source":"leancloud","pv_format":"总访问量 {} 次"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"http://182.44.49.100:34/images/2023/05/06/police_beian.png"}},"index":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/banner.png","banner_img_height":100,"banner_mask_alpha":0.3,"slogan":{"enable":true,"text":"Welcome to Jabin's personal blog😋😋😋","api":{"enable":false,"url":"","method":"GET","headers":{},"keys":[]}},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true},"post_sticky":{"enable":true,"icon":"iconfont icon-top"}},"post":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"default_index_img":null,"meta":{"author":{"enable":true},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true},"min2read":{"enable":true,"awl":4,"wpm":100},"views":{"enable":true,"source":"leancloud"}},"updated":{"enable":false,"date_format":"LL a","relative":false,"note_class":"info"},"category_bar":{"enable":true,"specific":true,"placement":"right","post_order_by":"title","post_limit":0},"toc":{"enable":true,"placement":"left","headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"license":"BY","author":{"enable":true},"post_date":{"enable":true,"format":"LL"},"update_date":{"enable":false,"format":"LL"}},"prev_next":{"enable":true},"image_caption":{"enable":true},"image_zoom":{"enable":true,"img_url_replace":["",""]},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"valine"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","theme_dark":"github-dark"},"disqus":{"shortname":"fluid","disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"},"valine":{"appId":"9pLbLVOPyiwzNblgc6TJZhNZ-9Nh9j0Va","appKey":"G6QQBTQciP4LO2OHPGWTQLT3","path":"window.location.pathname","placeholder":"快来参与评论吧~","avatar":"retro","meta":["nick","mail","link"],"requiredFields":[],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":"","emojiCDN":null,"emojiMaps":null,"enableQQ":false},"waline":{"serverURL":"","path":"window.location.pathname","meta":["nick","mail","link"],"requiredMeta":["nick"],"lang":"zh-CN","emoji":["https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo"],"dark":"html[data-user-color-scheme=\"dark\"]","wordLimit":0,"pageSize":10},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":null,"site_id":null,"max_shown_comments":10,"locale":"zh","components":["embed"]},"twikoo":{"envId":null,"region":"ap-shanghai","path":"window.location.pathname"},"cusdis":{"host":null,"app_id":null,"lang":"zh-cn"},"giscus":{"repo":null,"repo-id":null,"category":null,"category-id":null,"theme-light":"light","theme-dark":"dark","mapping":"pathname","reactions-enabled":1,"emit-metadata":0,"input-position":"top","lang":"zh-CN"},"archive":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"category":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"order_by":"-length","collapse_depth":0,"post_order_by":"-date","post_limit":10},"tag":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","name":"Jabin","intro":"一个菜鸟前端选手😰","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page":{"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"page404":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"redirect_delay":5000},"links":{"enable":true,"banner_img":"http://182.44.49.100:34/images/2023/05/06/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"items":[{"title":"Fluid Blog","intro":"主题博客","link":"https://hexo.fluid-dev.com/","avatar":"/img/favicon.png"},{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","avatar":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","avatar":"/img/favicon.png"}],"onerror_avatar":"http://182.44.49.100:34/images/2023/05/06/avatar.png","custom":{"enable":false,"content":"<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>"},"comments":{"enable":false,"type":"disqus"}},"static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://lib.baomitu.com/anchor-js/4.3.1/","github_markdown":"https://lib.baomitu.com/github-markdown-css/4.0.0/","jquery":"https://lib.baomitu.com/jquery/3.6.0/","bootstrap":"https://lib.baomitu.com/twitter-bootstrap/4.6.1/","prismjs":"https://lib.baomitu.com/prism/1.29.0/","tocbot":"https://lib.baomitu.com/tocbot/4.18.2/","typed":"https://lib.baomitu.com/typed.js/2.0.12/","fancybox":"https://lib.baomitu.com/fancybox/3.5.7/","nprogress":"https://lib.baomitu.com/nprogress/0.2.0/","mathjax":"https://lib.baomitu.com/mathjax/3.2.2/","katex":"https://lib.baomitu.com/KaTeX/0.16.2/","busuanzi":"https://busuanzi.ibruce.info/busuanzi/2.3/","clipboard":"https://lib.baomitu.com/clipboard.js/2.0.11/","mermaid":"https://lib.baomitu.com/mermaid/8.14.0/","valine":"https://lib.baomitu.com/valine/1.5.1/","waline":"https://lib.baomitu.com/waline/2.14.1/","gitalk":"https://lib.baomitu.com/gitalk/1.8.0/","disqusjs":"https://lib.baomitu.com/disqusjs/1.3.0/","twikoo":"https://lib.baomitu.com/twikoo/1.6.8/","hint":"https://lib.baomitu.com/hint.css/2.7.0/"}}}},"excerpt":"","more":"<p><em>完成了一个 Vue2 的的练手项目，记录部分项目开发流程和技术点</em></p>\n<h3 id=\"创建-Vue-项目\"><a href=\"#创建-Vue-项目\" class=\"headerlink\" title=\"创建 Vue 项目\"></a>创建 Vue 项目</h3><ul>\n<li>创建vue项目：在根目录cmd <code>vue create xxx</code></li>\n<li>创建vue项目时就勾上Router，免得开发时再手动安装 vue-router 插件包。同理把 css preprocess也勾选上，免得手动安装 less loader 包</li>\n</ul>\n<h3 id=\"eslint常见报错类型\"><a href=\"#eslint常见报错类型\" class=\"headerlink\" title=\"eslint常见报错类型\"></a>eslint常见报错类型</h3><ul>\n<li>组件的命名必须是<strong>多个</strong>单词的驼峰命名</li>\n<li>组件通过 <code>import</code> 引入后必须注册，注册后必须使用，变量、方法同理</li>\n<li><code>import</code> 引入组件的文件时<strong>不能</strong>带上 .vue 后缀</li>\n</ul>\n<h3 id=\"文件树规范\"><a href=\"#文件树规范\" class=\"headerlink\" title=\"文件树规范\"></a>文件树规范</h3><ul>\n<li><p>node_modules 是包裹项目依赖的各个包的文件夹</p>\n</li>\n<li><p>public 中存放的是<strong>静态页面</strong> index.html （vue和react一般用来开发单页面应用，单页面应用自然要有一个html文件）和一些<strong>静态资源</strong>（图片）。放在public文件夹的资源在 webpack 打包时会原封不动的放到dist文件夹中</p>\n</li>\n<li><p>src 意为<strong>源码</strong>，顾名思义该目录是开发者写代码的文件夹</p>\n<ul>\n<li>assets 也是放置<strong>静态资源</strong>（一般放置多个组件共用的静态资源）。与 public 不同的是，放置在 assets 文件夹中的静态资源，在webpack打包时会被当做一个模块，打包在 js 文件里</li>\n<li>components 一般放置的是<strong>非路由组件</strong>（全局组件），不管跳转到哪个 page 页面上都会有的组件，通常以 html 标签的方式使用</li>\n<li>pages 放置<strong>路由组件</strong>，即经路由跳转到的组件，通常用 <code>router-view</code> 来使用</li>\n<li>router 项目当中配置的<strong>路由‘器’</strong>放置在 router 文件夹中。</li>\n<li>App.vue 是项目中的<strong>唯一根组件</strong></li>\n<li>main.js 是程序的入口文件，也是整个程序当中最先执行的文件</li>\n</ul>\n</li>\n<li><p>babel.config.js 是 babel 的配置文件。可以把 babel 理解为翻译官，负责把 ES6 语法翻译为 ES5 兼容性更好</p>\n</li>\n<li><p>vue.confg.js 是 vue 项目的可选配置文件，运行时会被自动加载。用于配置打包dist文件夹的路径、webpack、Babel、eslint的设置等等，详见<a href=\"https://links.jianshu.com/go?to=https://cli.vuejs.org/zh/config/%23\">https://cli.vuejs.org/zh/config/#</a></p>\n</li>\n<li><p>package.json 可以理解为是项目的身份证，记录着项目的信息（项目叫什么，版本是多少，运行脚本是什么，依赖有哪些）</p>\n</li>\n<li><p>package-lock.json 缓存性文件，告诉我项目的依赖包是从哪里下载的</p>\n</li>\n<li><p>readme.md 说明性的文件</p>\n</li>\n</ul>\n<h3 id=\"路由相关\"><a href=\"#路由相关\" class=\"headerlink\" title=\"路由相关\"></a>路由相关</h3><p><strong>使用路由的流程</strong></p>\n<p>​        在 index.js 引入 vue-router 插件 <strong>=&gt;</strong> Vue.use() 注册引用的插件 <strong>=&gt;</strong> 定义路由配置 <strong>=&gt;</strong> 在main.js中引入定好的路由 <strong>=&gt;</strong> 把引入的路由作为根组件的选项添加进去。</p>\n<ul>\n<li><p>前端的路由表现为 url : component 的键值对，这种 component 被称为路由组件。</p>\n</li>\n<li><p>在使用时一定要<strong>注册路由</strong>：在 main.js 中用 <code>import router from &#39;@/router/index.js&#39; </code> 引入 <code>router</code> ，并将其添加到 Vue 根组件的选项上。</p>\n</li>\n<li><p>注册完路由，会发生神奇的事情，不管是非路由组件还是路由组件，他们身上都会获得 <code>$route</code> 和 <code>$router</code> 属性。<code>$route</code> ：一般获取<strong>路由信息</strong>（路径、query、params，meta），<code>$router</code> 是<strong>路由操作</strong>对象，用于实现编程式导航进行路由跳转（push | replace）。</p>\n</li>\n<li><p><strong>路由重定向</strong><code>&#123;path: &#39;/&#39;, redirect: &#39;/home&#39;&#125;  </code> ，打开域名直接跳转到首页</p>\n</li>\n<li><p>路由的跳转分两种：</p>\n<ul>\n<li><p>声明式导航，用 <code>router-link</code> 代替 <code>&lt;a&gt;...&lt;/a&gt;</code> 用户点击，直接进行路由跳转    </p>\n</li>\n<li><p>编程式导航，用 <code>$router.push()</code> 和 <code>$router.replace()</code> 进行路由跳转。比如，用户点击登录时，我们不希望直接进行跳转，而是先进行账户验证后再发生跳转。  在跳转发生前后做一些动作，这就是编程式导航的典型应用场景</p>\n</li>\n</ul>\n</li>\n<li><p>路由重定向：将一个 url 重定向为指向另一个 url。</p>\n</li>\n<li><p><strong>路由元信息</strong>：他是一个Object。有时，你可能希望将任意<strong>信息附加</strong>到路由上，如过渡名称、谁可以访问路由、在该路由下那些组件隐藏等。这些事情可以通过接收属性对象的<code>meta</code>属性来实现，并且它可以在路由地址和导航守卫上都被访问到。</p>\n</li>\n<li><p><strong>路由传参</strong>分两种：</p>\n<ul>\n<li>params参数：实现<strong>动态路由</strong>，必须在路由的 path 处添加 <code>:/xxx</code> 的占位符。<ul>\n<li>当路由的path里设置了占位符，默认是必须传 params 参数的。如果路由跳转时却没有提供 params 参数，则跳转后的 url 中就会有 url 路径缺失的现象，这当然不是我们希望看到的。所以，尽量在路由中定义占位符时加上一个问号 <code>:/xxx?</code> 代表着 params 参数可传可不传。</li>\n</ul>\n</li>\n<li>query参数：即<code>path?xxx=1&amp;xxx=2</code>这样用于搜索的参数。</li>\n</ul>\n<blockquote>\n<p>当需要路由传参时，推荐使用命名路由的name进行路由检索，当然这<strong>只能</strong>用于push的<strong>对象参数</strong>（另一种原始的参数是字符串参数）。</p>\n<p>另外要注意：push的对象参数里，path 和 params是<strong>不可同时使用</strong>的，如果要传params，必须用name来指定路由</p>\n</blockquote>\n<ul>\n<li>给<strong>路由组件传递props</strong>：在路由定义处设置，常用函数式传递，既能传递 params 和query参数又能传递自定义数据。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"页面组件结构\"><a href=\"#页面组件结构\" class=\"headerlink\" title=\"页面组件结构\"></a>页面组件结构</h3><p>典型的上中下结构</p>\n<p><img src=\"http://182.44.49.100:34/images/2023/05/06/99a042307be2e6e58cd703214d0c07a4.png\" alt=\"组件结构\"></p>\n<h3 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h3><p><img src=\"http://182.44.49.100:34/images/2023/05/06/7801634e91006adb2b0a329401f8cbba.png\" alt=\"技术点\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clhdcv0x000010kv3fydohy2w","category_id":"clhdcv0x800040kv32ndc2jog","_id":"clhdcv0xf000e0kv37b6k2naz"},{"post_id":"clhdcv0xd000c0kv309zz1vs2","category_id":"clhdcv0x800040kv32ndc2jog","_id":"clhdcv0xg000i0kv3bmc463f1"},{"post_id":"clhdcv0x600030kv369bb8xjh","category_id":"clhdcv0xc00090kv39gpch2sk","_id":"clhdcv0xh000l0kv36u4l9ejv"},{"post_id":"clhdcv0xa00060kv3666hcs9k","category_id":"clhdcv0xf000f0kv3dg2egyjv","_id":"clhdcv0xh000o0kv3gtztfb46"},{"post_id":"clhdcv0xb00070kv35crj0zsf","category_id":"clhdcv0xg000j0kv37a9u4hdj","_id":"clhdcv0xi000r0kv30vcfazm5"},{"post_id":"clhdcv0xc00080kv37wr61cy1","category_id":"clhdcv0xh000p0kv3fnxr9bhq","_id":"clhdcv0xi000u0kv3enec0yrs"},{"post_id":"clhdcv0xf000h0kv35foo6ysh","category_id":"clhdcv0xi000s0kv3g7u81tu5","_id":"clhdcv0xj000y0kv37y0t8gec"}],"PostTag":[{"post_id":"clhdcv0x000010kv3fydohy2w","tag_id":"clhdcv0x900050kv3fz2za953","_id":"clhdcv0xd000b0kv3b6kr6rsa"},{"post_id":"clhdcv0x600030kv369bb8xjh","tag_id":"clhdcv0xd000a0kv3fn2lcf2g","_id":"clhdcv0xh000m0kv37bhre323"},{"post_id":"clhdcv0x600030kv369bb8xjh","tag_id":"clhdcv0xf000g0kv3h6c51ruk","_id":"clhdcv0xh000n0kv3gfrdhzaz"},{"post_id":"clhdcv0xa00060kv3666hcs9k","tag_id":"clhdcv0xh000k0kv3bcm1gsx2","_id":"clhdcv0xj000w0kv3c1jw4ybb"},{"post_id":"clhdcv0xa00060kv3666hcs9k","tag_id":"clhdcv0xh000q0kv39lil3wqw","_id":"clhdcv0xj000x0kv30f2ycx9l"},{"post_id":"clhdcv0xa00060kv3666hcs9k","tag_id":"clhdcv0xi000t0kv32vt98jwt","_id":"clhdcv0xj00100kv36zwtd4bw"},{"post_id":"clhdcv0xb00070kv35crj0zsf","tag_id":"clhdcv0xf000g0kv3h6c51ruk","_id":"clhdcv0xl00160kv33irxdwhv"},{"post_id":"clhdcv0xb00070kv35crj0zsf","tag_id":"clhdcv0xj000z0kv3fujbhfk2","_id":"clhdcv0xl00170kv38a0a0ag0"},{"post_id":"clhdcv0xb00070kv35crj0zsf","tag_id":"clhdcv0xk00110kv356mjfv32","_id":"clhdcv0xl00190kv31fqcfo02"},{"post_id":"clhdcv0xb00070kv35crj0zsf","tag_id":"clhdcv0xk00120kv302q4e88d","_id":"clhdcv0xl001a0kv3cdo68b6h"},{"post_id":"clhdcv0xb00070kv35crj0zsf","tag_id":"clhdcv0xk00130kv35mb6c683","_id":"clhdcv0xl001c0kv34gub1h8c"},{"post_id":"clhdcv0xb00070kv35crj0zsf","tag_id":"clhdcv0xk00140kv38g8c25j8","_id":"clhdcv0xl001d0kv3g4qe4to2"},{"post_id":"clhdcv0xc00080kv37wr61cy1","tag_id":"clhdcv0xk00150kv3beag6hnm","_id":"clhdcv0xm001f0kv358avfz50"},{"post_id":"clhdcv0xc00080kv37wr61cy1","tag_id":"clhdcv0xl00180kv39ho75hxt","_id":"clhdcv0xm001g0kv33pp48m3t"},{"post_id":"clhdcv0xc00080kv37wr61cy1","tag_id":"clhdcv0xl001b0kv3auxj43kj","_id":"clhdcv0xm001i0kv373oc29m6"},{"post_id":"clhdcv0xd000c0kv309zz1vs2","tag_id":"clhdcv0xl001e0kv3d1dj1xf5","_id":"clhdcv0xm001l0kv3gllsb6cx"},{"post_id":"clhdcv0xd000c0kv309zz1vs2","tag_id":"clhdcv0xm001h0kv318slgj02","_id":"clhdcv0xm001m0kv37ncw0lmv"},{"post_id":"clhdcv0xd000c0kv309zz1vs2","tag_id":"clhdcv0xm001j0kv364a2e66l","_id":"clhdcv0xn001o0kv32y9jfckc"},{"post_id":"clhdcv0xf000h0kv35foo6ysh","tag_id":"clhdcv0xm001k0kv3camxgbox","_id":"clhdcv0xo001t0kv3foab6rru"},{"post_id":"clhdcv0xf000h0kv35foo6ysh","tag_id":"clhdcv0xm001n0kv3bpyl8bbb","_id":"clhdcv0xo001u0kv3acfp9m3u"},{"post_id":"clhdcv0xf000h0kv35foo6ysh","tag_id":"clhdcv0xn001p0kv37mv26j7b","_id":"clhdcv0xo001v0kv3e6cd91cq"},{"post_id":"clhdcv0xf000h0kv35foo6ysh","tag_id":"clhdcv0xn001q0kv3f0q5g2kt","_id":"clhdcv0xo001w0kv37iw5cq42"},{"post_id":"clhdcv0xf000h0kv35foo6ysh","tag_id":"clhdcv0xn001r0kv32daj6a15","_id":"clhdcv0xo001x0kv3d7xqbhph"},{"post_id":"clhdcv0xf000h0kv35foo6ysh","tag_id":"clhdcv0xn001s0kv31t922zpb","_id":"clhdcv0xo001y0kv3f2df9049"}],"Tag":[{"name":"浏览器架构","_id":"clhdcv0x900050kv3fz2za953"},{"name":"浏览器原理","_id":"clhdcv0xd000a0kv3fn2lcf2g"},{"name":"事件循环","_id":"clhdcv0xf000g0kv3h6c51ruk"},{"name":"Hexo","_id":"clhdcv0xh000k0kv3bcm1gsx2"},{"name":"云服务器","_id":"clhdcv0xh000q0kv39lil3wqw"},{"name":"Git","_id":"clhdcv0xi000t0kv32vt98jwt"},{"name":"消息队列","_id":"clhdcv0xj000z0kv3fujbhfk2"},{"name":"微队列","_id":"clhdcv0xk00110kv356mjfv32"},{"name":"交互队列","_id":"clhdcv0xk00120kv302q4e88d"},{"name":"延时队列","_id":"clhdcv0xk00130kv35mb6c683"},{"name":"异步任务","_id":"clhdcv0xk00140kv38g8c25j8"},{"name":"pnpm","_id":"clhdcv0xk00150kv3beag6hnm"},{"name":"幽灵依赖","_id":"clhdcv0xl00180kv39ho75hxt"},{"name":"包管理工具","_id":"clhdcv0xl001b0kv3auxj43kj"},{"name":"类型继承","_id":"clhdcv0xl001e0kv3d1dj1xf5"},{"name":"原型","_id":"clhdcv0xm001h0kv318slgj02"},{"name":"寄生式组合继承","_id":"clhdcv0xm001j0kv364a2e66l"},{"name":"vue2","_id":"clhdcv0xm001k0kv3camxgbox"},{"name":"电商项目","_id":"clhdcv0xm001n0kv3bpyl8bbb"},{"name":"vuex","_id":"clhdcv0xn001p0kv37mv26j7b"},{"name":"vue-router","_id":"clhdcv0xn001q0kv3f0q5g2kt"},{"name":"mock","_id":"clhdcv0xn001r0kv32daj6a15"},{"name":"代理","_id":"clhdcv0xn001s0kv31t922zpb"}]}}